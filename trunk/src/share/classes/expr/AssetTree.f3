package expr;
import expr.Treeview.*;
import f3.media.scene.*;
import expr.ResourceNode.*;
import expr.prog.Expression;
import expr.prog.Expression.Member;
import expr.inspector.Inspector;
import f3.math.*;
import f3.reflect.*;

public abstract class Asset {
    public var url is String;
    public var name = bind { var slash = url.lastIndexOf("/"); url.substring(slash+1) };
    public readonly var containedAssets is Asset[];
}

public class MaAsset is Asset {
    public const model is Ma.Model;
    override var url = bind model.url;
    override var containedAssets = bind 
	[foreach (cam in model.getCameras()) CameraAsset { 
		url: "{url}#{cam.id}";
		name: cam.id; 
		camera: cam;
	 },
	 foreach (clipLib in model.getClipLibraries()) ClipLibraryAsset { 
	     url: "{url}#{clipLib.id}";
	     name: clipLib.id;
	     clipLibrary: clipLib;
	 }];
}

public class SceneAsset is Asset {
    override var name = "Scene";
    protected var count = 1;
    public function getScene to ResourceScene {
	ResourceScene {
            background: null;
            camera: PerspectiveCamera {};
	    id: "Scene {count++}";
	}
    }
}

public class Scene2DAsset is SceneAsset {
    override var name = "2D Scene";
    override public function getScene to ResourceScene {
	ResourceScene {
            background: null;
            camera: Camera2D { near: 10000, far: -10000 };
	    id: "2D Scene {count++}";
	}
    }
}

public class CameraAsset is Asset {
    public const camera is Camera;
}

public class ClipAsset is Asset {
    public function getClip to TimeNode { null }
}

public class ClipLibraryAsset is Asset {
    public const clipLibrary is TimeGroup;
    override var containedAssets = bind foreach (c in clipLibrary.content) makeClipAsset(c);
    function makeClipAsset from (c is TimeNode) to ClipAsset {
	ClipAsset { 
	    url: "{url}#{c.id}";
	    name: c.id; 
	    override function getClip to TimeNode { c } 
	}
    }
}

public class TransitionLayerAsset is ClipAsset {
    override var name = "Transition Layer";
    override var url = "node://TransitionLayer";
    var count = 1;
    override public function getClip to TimeNode {
	TransitionLayer {
	    id: "Transition Layer {count++}";
	}
    }
}


public class ImageAsset is Asset {
}

public class WebAsset is Asset {
}

public class SVGAsset is Asset {
}

public class TimeLayerAsset is Asset {
    override var name = "Time Layer";
}

public class ExprAsset is Asset {
}

public class AssetTreenode is Treenode {
    public var asset is Asset;
    override var canOpen = bind { var n = asset.containedAssets.size(); n > 0 };
    override var children = bind foreach (x in asset.containedAssets) AssetTreenode {asset: x};
    override var label = bind asset.name;
    override function open {
	children;
	super.open();
    }
}

public function makeAsset from (r is ResourceNode) to Asset {
    if (r is MaResourceNode) {
	MaAsset {
	    model: (r as MaResourceNode).model;
	}
    } else if (r.url.endsWith(".svg")) {
	SVGAsset {
	    url: r.url
	} 
    } else if (r.url.endsWith(".png")) {
	ImageAsset {
	    url: r.url;
	}
    } else {
	WebAsset {
	    url: r.url;
	}
    }
}

public class PackageAsset is Asset {
    public var packages is PackageAsset[];
    public var classes is ClassAsset[];
    override var containedAssets = bind [packages, classes]
}

public class RootPackageAsset is PackageAsset {
    public var primitives is TypeAsset[] = 
        [PrimitiveTypeAsset {
                name: "Boolean";
                t: Reflect.BOOLEAN_TYPE;
                containedAssets: foreach (m in Expression.BOOL_MEMBERS) {
                    MemberAsset {
                        member: m;
                    }
                }
        },
        PrimitiveTypeAsset {
                name: "Integer";
                t: Reflect.INTEGER_TYPE;
                containedAssets: foreach (m in Expression.INT_MEMBERS) {
                    MemberAsset {
                        member: m;
                    }
                }
        },
        PrimitiveTypeAsset {
                name: "Number";
                t: Reflect.NUMBER_TYPE;
                containedAssets: foreach (m in Expression.NUM_MEMBERS) {
                    MemberAsset {
                        member: m;
                    }
                }
        },
        ClassAsset {
                className: "String";
                clazz: Reflect.STRING_TYPE;
        }];
    override var containedAssets = bind [primitives, packages, classes]
}

public class TypeAsset is Asset {
    public var t is F3Type;
    override var name = bind t.getName();
}

public class PrimitiveTypeAsset is TypeAsset {
}

public class ClassAsset is TypeAsset {
    public const className is String;
    public var classes is ClassAsset[];
    override var name = bind Names.formatClassName(className);
    public var clazz is F3ClassType = bind Reflect.getType(className.replace("/", ".")) as F3ClassType;
    override var t = bind clazz;
    override var containedAssets = bind [classes, foreach (m in Expression.introspect(clazz)) MemberAsset {
        member: m;
        }];
}

public class MemberAsset is Asset {
    public const member is Member;
    override var name = bind Names.formatName(member.name);
}

const packMap = new java.util.HashMap of (String, PackageAsset);

function findPackage from (str is String) to PackageAsset {
    var r = packMap.get(str);
    if (r == null) {
        println("FIND PACK: {str}");
        if (str == "") {
            r = RootPackageAsset {
                name: "Code";
            }
            packMap.put(str, r);
            return r;
        }
        const slash = str.lastIndexOf("/");
        const parentName = if (slash < 0) then "" else str.substring(0, slash);
        const name = str.substring(slash + 1);
        const p = findPackage(parentName);
        r = PackageAsset {
            name: name;
        }
        insert r into p.packages;
        packMap.put(str, r);
    }
    return r;
}

const excluded = ["jogamp", "com/sun", "com/jogamp", "org.antlr", "org/antlr", "org/json", "org/f3", "jogl", "f3/jogl", "f3/animation", "f3/date", "f3/reflect", "f3/f3unit", "f3/lang", "javax"];

function getPackageAssets to PackageAsset {
    const bcp = java.lang.System.getProperty("boot.class.path");
    const cp = java.lang.System.getProperty("java.class.path");
    for (x in [bcp.split(java.io.File.pathSeparator), cp.split(java.io.File.pathSeparator)]) {
        println("CLASSPATH: {x}");
        const f = new java.io.File(x);
        if (f.isDirectory()) {
            for (file in f.listFiles()) {
                const name = file.getName();
                if (not name.endsWith(".class")) {
                    continue;
                }
                const slash = name.lastIndexOf("/");
                if (slash < 0) continue;
                const parentName = name.substring(0, slash);
                const pack = findPackage(parentName);
                // @TODO
            }
        } else if (f.exists()) {
            const jar = new java.util.jar.JarFile(f.getAbsolutePath());
            const e = jar.entries();
            while (e.hasMoreElements()) {
                const entry = e.nextElement();
                const name = entry.getName();
                if (not name.endsWith(".class")) {
                    continue;
                }

                if (name.contains("$Mixin") or name.contains("BFunc$") or name.contains("$ObjLit") or name.contains("Local$") or name.contains("$Script")) {
                    continue;
                }
                var bad = false;
                for (i in [0..9]) {
                    if (name.contains("${i}")) {
                        bad = true;
                        break;
                    }
                }
                if (bad) continue;
                for (i in excluded) {
                    if (name.startsWith(i)) {
                        bad = true;
                        break;
                    }
                }
                if (bad) continue;
                println("class asset: {name}");
                const slash = name.lastIndexOf("/");
                if (slash < 0) continue;
                const parentName = name.substring(0, slash);
                const pack = findPackage(parentName);
                var target is ClassAsset = null;
                var className = name.substring(0, name.length()-6);
                var dollar = className.lastIndexOf("$");
                var containedClassName is String;
                if (dollar > 0) {
                    containedClassName = className;
                    className = className.substring(0, dollar);
                }
                for (clazz in pack.classes) {
                    if (clazz.className == className) {
                        target = clazz;
                        break;
                    }
                }
                if (target == null) {
                    insert (target = ClassAsset { className: className }) into pack.classes;
                }
                if (dollar > 0) {
                    insert ClassAsset { className: containedClassName} into target.classes;
                }
            }
        }
    }
    return packMap.get("");
}

public class AssetModel is Treemodel {
    public var resources is ResourceGroup;
    override var root = AssetTreenode {
	asset: Asset {
	    name: "Assets";
	    containedAssets: bind 
	    [getPackageAssets(), TransitionLayerAsset{}, 
             Scene2DAsset {}, foreach (r in resources.resources) makeAsset(r)]
	}
    }
}