package expr;
import java.lang.Math;
import f3.util.*;
import f3.media.scene.*;
import f3.media.scene.Shape2D.*;
import Resources.*;

class Instance {
    public var src is ResourceLabel;
    public var target is ResourceLabel = ResourceLabel {
        webBrowserFactory: bind src.webBrowserFactory;
        pathFactory:  bind src.pathFactory;
        layoutEngine:  bind src.layoutEngine;
        effectLoader:  bind src.effectLoader;
        soundLoader:  bind src.soundLoader;
        movieLoader:  bind src.movieLoader;
        imageLoader:  bind src.imageLoader;
        tx: src.tx;
        ty: src.ty;
        id: src.id;
        url: src.url;
        fontSize: src.fontSize;
        fontFamily: src.fontFamily;
        fontStyle: src.fontStyle;
        fontWeight: src.fontWeight;
        foreground: src.foreground;
        background: src.background;
        width: src.width;
        text: src.text;
    };
}

function createInstance from (src is ResourceLabel) to Instance {
    Instance {
        src: src;
    }
}

public class ResourceLabel is AbstractResourceText {

    public var text is String;
    override var background is Color = new Color(.9, .9, .9, 0.0);

    override public function setText from (text is String) to ()
    {
        this.text = text;
    }

    const impl is Text.Label = Text.Label {
        layoutEngine: bind layoutEngine;
        foreground: bind ColorPaint(foreground);
        background: bind ColorPaint(background);
        text: bind text;
        font: bind font;
        width: bind if width < 0 then Math.max(minimumWidth, font.width(text)) else width;
    };
    override var content = bind [impl];


    public override bound function instance to Node {
        createInstance(this).target;
    }


    public override function instance from (id is String,
                                            lookupVar is function from String to Object,
                                            lookupSpatial is function from String to Node,
                                            lookupTemporal is function from String to TimeNode) to Node 
    {
        /*
        const n = this;
        const f = this;
        const i = TextOutputResource {
                url: f.url;
                id: f.id;
                displayName: f.displayName;
                fontFamily: f.fontFamily.selection;
                fontWeight: f.fontWeight.selection;
                fontStyle: f.fontStyle.selection;
                fontSize: f.fontSize.selection;
                foreground: formatColor(f.foreground);
                background: formatColor(f.background);
                width: f.width;
                text: f.text;
                tx: n.tx;
                ty: n.ty;
                tz: n.tz;
                sx: n.sx;
                sy: n.sy;
                sz: n.sz;
                rx: n.rx;
                ry: n.ry;
                rz: n.rz;
                px: n.px;
                py: n.py;
                pz: n.pz;
                //    programs: progs;
                //                animation: anims;
                //            colliderResource: colliderResource;
        };
        const r = i as TextOutputResource;
        const tf = ResourceLabel {
            layoutEngine: bind layoutEngine;
            id: r.id;
            url: r.url;
            displayName: i.displayName;
            fontSize: new FontSizeSelection(r.fontSize);
            fontFamily: new FontFamilySelection(r.fontFamily);
            fontStyle: new FontStyleSelection(r.fontStyle);
            fontWeight: new FontWeightSelection(r.fontWeight);
            foreground: parseColor(r.foreground);
            background: parseColor(r.background);
            width: r.width;
        };
        tf.setText(r.text);
        println("instanced: {tf}");
        return tf;
        */
        null
    }

}

