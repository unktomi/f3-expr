package expr.prog;
import f3.util.*;

public class Instrumenter of a is Observer of a 
{
    public const debugger is Debugger;
    public const location is Object;
    public const target is Observer;

    override function onNext from (x is a) to () 
    {
	debugger.onNext(this, x)
    }

    override function onError from (e is java.lang.Exception) to () 
    {
	debugger.onError(this, e)
    }

    override function onCompleted from () to () 
    {
	debugger.onCompleted(this)
    }
}

public class Debugger 
{
    var programCounter is Instrumenter of ?;

    public var paused is Boolean;

    public function pause to ()
    {
        paused = true;
    }

    public function resume to () 
    {
        paused = false;
    }

    public function stepInto to ()
    {
    }

    public function stepOver to ()
    {
    }

    public function stepOut to ()
    {
    }

    public function setBreakpoint from (location is Object) to () 
    {
    }

    public function removeBreakpoint from (location is Object) to () 
    {
    }
    
    public function instrument of a from (location is Object, obsvr is Observer of a)
	to Instrumenter of a
    {
	Instrumenter of a {
            location: location;
	    debugger: this;
	    target: obsvr;
	}
    }

    public function onNext of a from (i is Instrumenter of a, x is a) to ()
    {
    }

    public function onError of a from (i is Instrumenter of a,
				       e is java.lang.Exception) to ()
    {
    }

    public function onCompleted of a from (i is Instrumenter of a) to () 
    {
    }
}