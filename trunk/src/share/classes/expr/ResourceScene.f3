package expr;
import f3.media.scene.*;
import f3.media.input.*;
import expr.undo.*;
import f3.util.*;
import expr.ResourceNode.*;
import expr.InspectedElement.*;
import f3.math.LinearMath.*;

public class ResourceScene is Scene, Inspectable {

    public override function toString to String 
    {
        "ResourceScene {id}";
    }   

    public readonly var paused is Boolean;

    public const instanceSpace is Group = Group {id: "Instance Space"};

    public var currentModels is MaResourceNode[] = bind foreach (m in currentResource.resources) if (m is MaResourceNode) then m as MaResourceNode else null;

    public var currentCameras is Camera[];

    public var $enableDynamics is Boolean = true;
    public var $drawCollisions is Boolean = true;
    public var $gravityX is Number;
    public var $gravityY is Number = -9.8;
    public var $gravityZ is Number;

    public const dynamicsGroup = InspectionGroup {
        displayName: "Size";
        targets: 
        [InspectedBooleanValue {
            displayName: "Enable Dynamics";
            target: &$enableDynamics;
        },
        InspectedBooleanValue {
            displayName: "Draw Collisions";
            target: &$drawCollisions;
        },
        InspectedNumberValue {
            displayName: "Gravity X";
            target: &$gravityX;
        },
        InspectedNumberValue {
            displayName: "Gravity Y";
            target: &$gravityY;
        },
        InspectedNumberValue {
            visible: bind not (camera is Camera2D)
            displayName: "Gravity Z";
            target: &$gravityZ;
        }]
    }

    
    var g = bind vector($gravityX, $gravityY, $gravityZ);

    const undoList = dynamicsGroup.getUndoList(UndoList {});

    postinit {
        undoList.addTarget("camera", &camera);
        undoList.addTarget("visible", &visible);
        undoList.addTarget("background", &background);
    }



    override function update to () {     
        dynamicsWorld.gravity = g;
        dynamicsWorld.enabled = $enableDynamics;
        super.update();
        updateCams();
    }

    function updateCams to () {
        var cams is Camera[];
        currentResource.foldLeft((), function from (_ is (), n is Node) to () {
                if (n is Camera and n <> camera) {
                    if (not (n.id == "topShape" or n.id == "perspShape" or n.id == "frontShape" or n.id == "sideShape")) {
                        insert n as Camera into cams;
                    }
                }
            });
        currentCameras = cams;
    }
    
    public const currentResource is ResourceGroup = ResourceGroup { id: bind id, scene: this };

    override var content = bind [currentResource, instanceSpace];

    public var selectedResource is ResourceNode;
    public var selectedMesh is MeshNode;

    public function reset to ()
    {
        currentResource.url = "";
        currentResource.resources = [];
        instanceSpace.content = [];
        selectedMesh = null;
        selectedResource = null;
        selection.onNext(null);
        meshSelection.onNext(null);
    }

    override function injectMouseDown from (event is MouseEvent) to ()
    {
        super.injectMouseDown(event);
        for (i in underMouse) {
            if (i.node is MeshNode) {
                var p = i.node.parent;
                while (p <> null) {
                    if (p is ResourceNode) {
                        println("SELECTING: {p}");
                        meshSelection.onNext(selectedMesh = i.node as MeshNode);
                        selection.onNext(p as ResourceNode);
                        return;
                    }
                    p = p.parent;
                }
            }
        }
    }

    const renderComplete = 
        observeRenderComplete().subscribe(function from (scene is Scene) to () 
                                          {
                                              if ($drawCollisions) {
                                                  dynamicsWorld.debugDraw(scene.camera) 
                                              }
                                          });
    
    const selection = Subject of ResourceNode {};

    const meshSelection = Subject of MeshNode {};

    public function observeSelection to Observable of ResourceNode 
    {
        selection
    }

    public function observeMeshSelection to Observable of MeshNode
    {
        meshSelection
    }

    public var cameraSelection is CameraSelection = CameraSelection {
        camera: bind camera inverse;
        cameras: bind [camera, currentCameras];
    }

    public var dynamicsWorld is DynamicsWorld;

    public const sizeGroup = InspectionGroup {
        displayName: "Size";
        targets: 
        [ReadonlyInspectedNumberValue {
            editable: false;
            displayName: "Width";
            target: &width;
        },
        ReadonlyInspectedNumberValue {
            editable: false;
            displayName: "Height";
            target: &height;
        }]
    }

    override var $hideMembers = ["width", "height"];

}

