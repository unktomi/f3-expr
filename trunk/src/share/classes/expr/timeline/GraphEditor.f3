package expr.timeline;
import f3.media.scene.*;
import f3.media.scene.KeyFrame.*;
import expr.*;
import expr.undo.*;
public class GraphEditor is Trax {

    public const mainTrax is Trax;
    override var frameRateN = bind this.mainTrax.frameRateN inverse;
    override var graph = true;
    public var resourceTargets is ResourceTarget[];
    public var eventTarget is Context.MemberContext;
    public var variableTargets is Context.ClosureVarContext[];
    override var clips = bind [getChannelBoxes(resourceTargets), getVarChannelBoxes(variableTargets)];
    override function onDrop from (where is Pick, clip is TimeNode, add is function from TimeNode to ()) to ()
    {
    }

    bound function getChannelBoxes from (targets is ResourceTarget[]) to TimeNode[]
    {
        foreach (x in targets) x.channelBoxes;
    }

    bound function getVarChannelBoxes from (targets is Context.ClosureVarContext[]) to TimeNode[]
    {
        foreach (x in targets) x.animationClip;
    }

    var playheadPos is Duration;

    override protected function handleDelete to ()
    {
        deleteKeys();
        MasterUndoable.commit();
    }

    override function deleteKeys to () 
    {
        foreach (resourceTarget in resourceTargets, box in resourceTarget.channelBoxes.content) {
            box.foldLeft((), 
                         function from (_ is (), clip is TimeNode) to () 
                         {
                             if (clip is Channel of ?) {
                                 const ch = clip as Channel of ?;
                                 const m = ch.toSceneTransform.inverse();
                                 ch.deleteKeys(m * selectionStartTime, m * selectionEndTime);
                             }
                         });
        }
    }

    override public function setKeys to () 
    {
        foreach (resourceTarget in resourceTargets, box in resourceTarget.channelBoxes.content) {
            box.foldLeft((), 
                         function from (_ is (), clip is TimeNode) to () 
                         {
                             if (clip.pickableInScene and clip is Channel of ?) {
                                 const ch = clip as Channel of Number;
                                 const k = ch.pickKey(ch.localTime);
                                 if (k <> null) {
                                     ch.setKey(k.interpolator);
                                 } else {
                                     ch.setKey(KeyFrame.Linear);
                                 }
                             }
                         });
        }
        super.setKeys();
    }

    override protected function onPlayheadChange from (event is Duration) to ()
    {
        super.onPlayheadChange(event);
        if (playheadPos <> event) {
            //println("playhead change {playheadPos} => {event}");
            playheadPos = event;
            for (resourceTarget in resourceTargets) {
                const rn = (resourceTarget as ResourceNode);
                rn.timeline.enabled = true;
                rn.timeline.setPlayhead(event);
                rn.timeline.enabled = false;
            }
            for (varTarget in variableTargets) {
                varTarget.timeline.enabled = true;
                varTarget.timeline.setPlayhead(event);
                varTarget.timeline.enabled = false;
            }
        }
    }
    
    override function updatePlayhead to () 
    {
        super.updatePlayhead();
        const event = target.playhead;
        for (resourceTarget in resourceTargets) {
            const rn = (resourceTarget as ResourceNode);
            rn.timeline.enabled = true;
            rn.timeline.setPlayhead(event);
            rn.timeline.enabled = false;
        }
        for (varTarget in variableTargets) {
            varTarget.timeline.enabled = true;
            varTarget.timeline.setPlayhead(event);
            varTarget.timeline.enabled = false;
        }
    }
}