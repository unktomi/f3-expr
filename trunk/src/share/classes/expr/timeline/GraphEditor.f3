package expr.timeline;
import f3.media.scene.*;
import f3.media.scene.KeyFrame.*;
import expr.*;

public class GraphEditor is Trax {

    public const mainTrax is Trax;
    override var frameRateN = bind mainTrax.frameRateN with inverse;
    override var graph = true;
    public var resourceTargets is ResourceTarget[];
    override var clips = bind getChannelBoxes(resourceTargets);

    bound function getChannelBoxes from (targets is ResourceTarget[]) to TimeNode[]
    {
        foreach(x in targets) x.channelBoxes;
    }

    var playheadPos is Duration;

    override protected function handleDelete to ()
    {
        deleteKeys();
    }

    function deleteKeys to () 
    {
        foreach (resourceTarget in resourceTargets, box in resourceTarget.channelBoxes.content, clip in (box as TimeGroup).content) {
            const ch = clip as Channel of ?;
            ch.deleteKey();
        }
    }

    override public function setKeys to () 
    {
        for (resourceTarget in resourceTargets, box in resourceTarget.channelBoxes.content, clip in (box as TimeGroup).content where clip.pickableInScene) {
            const ch = clip as Channel of Number;
            var k = ch.pickKey(playheadPos);
            var i is Interpolator of Number = KeyFrame.Linear;
            if (false and k <> null) {
                if (k.position == playheadPos and k.interpolator is KeyFrame.Tangent) {
                    i = k.interpolator;
                } else {
                    if (k.position < playheadPos) {
                        k = k.next;
                    }
                    if (k <> null and k.prev <> null and k.next <> null) {
                        const fps = 1s / frameRateN;
                        const frame1 = (k.prev.position / fps)  as Integer;
                        const frame2 = (k.position / fps)  as Integer;
                        const frame3 = (k.next.position / fps)  as Integer;
                        const x1 = frame1;
                        const x2 = frame2;
                        const x3 = frame3;
                        const y1 = k.prev.value;
                        const y2 = k.value;
                        const y3 = k.next.value;
                        const ox = x2 - x1;
                        const oy = y2 - y1;
                        const ix = x3 - x2;
                        const iy = y3 - y2;
                        i = KeyFrame.Tangent 
                            {
                                kox: ox;
                                koy: oy;
                                kix: ix;
                                kiy: iy;
                            };
                    }
                }
            }
            //println("setting key {playheadPos}");
            ch.setKey(i);
        }
    }

    override protected function onPlayheadChange from (event is Duration) to ()
    {
        super.onPlayheadChange(event);
        if (playheadPos <> event) {
            //println("playhead change {playheadPos} => {event}");
            playheadPos = event;
            for (resourceTarget in resourceTargets) {
                const rn = (resourceTarget as ResourceNode);
                rn.timeline.enabled = true;
                rn.timeline.setPlayhead(event);
                rn.timeline.enabled = false;
            }
        }
    }
    
    override function refreshPlayhead to () 
    {
        super.refreshPlayhead();
        /*
        const rn = (resourceTarget as ResourceNode);
        rn.timeline.enabled = true;
        rn.timeline.setPlayhead(playheadPos);
        rn.timeline.enabled = false;
        */
    }
}