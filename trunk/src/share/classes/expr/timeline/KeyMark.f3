package expr.timeline;
import expr.*;
import expr.AssetTree.*;
import expr.Names.*;
import f3.media.scene.*;
import f3.media.scene.Shape2D.*;
import f3.media.scene.KeyFrame.*;
import f3.media.input.*;
import f3.util.*;
import f3.util.Observer.*;
import f3.math.*;
import f3.math.LinearMath.*;
import java.lang.Math;
import expr.undo.*;
import expr.timeline.Trax.*;

public class KeyMark is Image, MouseInputHandler, KeyboardInputHandler {
    var kx = 0.0;
    override var url = "{__DIR__}keybubblemarker.png";
    public var k is Key of Number;
    public var ch is Channel of Number;
    public var trax is Trax;
    public var view is TimeNodeView;
    public var valueBounds is Vec2;
    public var sy is Number = 1.0;
    override var transform = bind translate(trax.durationToX(k.position), 0);
    var lockedValueBounds is Vec2;
    var lockedSy is Number;
    var lockX is Boolean;

    override function onMouseDown from (event is MouseEvent) to ()
    {
        if (event.clickCount > 1) {
            trax.editKey(view, ch, k);
        } 
        kx = trax.durationToX(k.position) / ch.toSceneTransform.rate;
        lockedValueBounds = valueBounds;
        lockedSy = sy;
        lockX = event.metaKey;
    }

    override function onMouseDrag from (event is MouseEvent) to ()
    {
        println("view={view}");
        kx += (event.picked.dragPoint1 - event.picked.dragPoint0).x / ch.toSceneTransform.rate;
        var dy = (event.picked.dragPoint1 - event.picked.dragPoint0).y;
        if (lockX or view.rows == 1) {
            println("moving on x only");
            k = trax.moveKeyTo(ch, k, trax.frameTo(trax.xToDuration(kx)));
        } else {
            println("sy={sy}, dy={dy}");
            println("value={k.value} => {k.value + sy * dy}");
            k = ch.setKey(k, trax.frameTo(trax.xToDuration(kx)), k.value + dy / lockedSy, k.interpolator);
        }
        trax.updatePlayhead();
    }

    override function onMouseUp from (event is MouseEvent) to ()
    {
        //println("commit playTime={target.playTime}, pickable={target.pickable}");
        view.updateValueBounds();
        MasterUndoable.commit();
    }


    override function onMouseMove from (event is MouseEvent) to () {}
    override function onMouseEnter from (event is MouseEvent) to () {}
    override function onMouseLeave from (event is MouseEvent) to () {}
    override function onMouseWheel from (event is MouseWheelEvent) to () {}

}
