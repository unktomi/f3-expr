package expr;
import f3.media.scene.*;
import f3.media.input.*;

const W = 14.0;
const H = 14.0;

public class Scrollpane is ResizableNode, Focuser {

    override public function getTargetOfFocus to Focusable 
    {
	if (content is Focuser) then (content as Focuser).getTargetOfFocus() 
            else null;
    }

    public var content is ResizableNode;

    public var leftInset is Number = 0.0;

    public var canZoomVertical is Boolean = true;
    public var canZoomHorizontal is Boolean = true;

    function findScrollable {
        var r is Scrollable = null;
        const f is function from ((), Node) to () 
            = function from (_ is (), n is Node) to ()
            {
                if (r == null) {
                    if (n is StageNode) {
                        const stage = n as StageNode;
                        for (scene in stage.content where r == null) {
                            scene.root.foldLeft((), f);
                        }
                    }
                    if (n.visibleInScene and n is Scrollable) {
                        r = n as Scrollable;
                    }
                }
            };
        internalContent.foldLeft((), f);
        var p = currentScrollable;
        if (r <> null) {
            currentScrollable = r;
        } else {
            currentScrollable = null;
        }
    }

    override function resize from (w is Number, h is Number) to ()
    {
        content.resize(w-W, h-H);
        super.resize(w, h);
    }

    override function update {
        findScrollable();
        super.update();
        content.resize(width-W, height-H);
    }

    var currentScrollable is Scrollable;

    override var internalContent = Group {
        content:
        [TransformNode {
                tx: -W/2, ty: H/2
                content: bind content
        },
        TransformNode {
            tx: bind width/2 - W / 2;
            ty: bind H/2
            content: VScrollbar {
                canZoom: bind canZoomVertical;
                width: W;
                height: bind height-H;
                ty: bind currentScrollable.getTy();
                sy: bind currentScrollable.getSy();
                override function setRect from (ty is Number, 
                                                sy is Number) 
                    to ()
                {
                    println("SET RECT  {ty} {sy}");
                    currentScrollable.setY(ty, sy);
                }
                override function onScroll from (value is Boolean) to ()
                {
                    currentScrollable.onScrollVertically(value);
                }
            }
        },
        TransformNode {
            ty: bind -height/2 + H / 2
            tx: bind -W/2 +leftInset/2;
            content: HScrollbar {
                canZoom: bind canZoomHorizontal;
                height: H;
                width: bind width-W-leftInset;
                tx: bind currentScrollable.getTx();
                sx: bind currentScrollable.getSx();
                override function setRect from (tx is Number, 
                                                sx is Number) 
                    to ()
                {
                    currentScrollable.setX(tx, sx);
                }
                override function onScroll from (value is Boolean) to ()
                {
                    currentScrollable.onScrollHorizontally(value);
                }
            }
        }]
    }
}