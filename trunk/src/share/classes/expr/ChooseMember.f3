package expr;
import expr.prog.Expression;
import f3.media.scene.*;
import f3.media.input.*;
import f3.media.scene.Shape2D.*;
import f3.math.LinearMath.*;
import f3.reflect.*;
const textFg = ColorPaint(Color.color(.8, .8, .8));
const textBg = ColorPaint(Color.color(.4, .4, .4));

public class ChooseMember is ResizableNode, Focuser {
    override public function getTargetOfFocus to Focusable {
	tv
    }
    public var treeModel is Treeview.Treemodel;
    const tv is Treeview = Treeview {
        filter: bind filter;
        model: bind treeModel;
        override function onKeyInput from (e is KeyboardEvent) to ()
        {
            searchField.onKeyInput(e);
        }
        override function onKeyDown from (e is KeyboardEvent) to () {
            if (e.keyCode == Keys.Enter) {
                checkSelectType();
            }
            if (e.keyCode == Keys.Esc) {
                onEscape();
            }
            super.onKeyDown(e)
        }
        override function onMouseDown from (e is MouseEvent) to ()
        {
            if (e.clickCount > 1) {
                checkSelectType();
            }
            super.onMouseDown(e);
        }
    };

    public var onLoseFocus is function from () to ();

    const focusOb = (tv as Node).observeFocused().subscribe(function from (focused is Boolean) to () {
            if (not focused) {
                onLoseFocus();
            }
        });

    function checkSelectType to ()
    {
        const x = (tv.selectedTreenode as AssetTree.AssetTreenode).asset;
        if (x is AssetTree.TypeAsset) {
            onSelectType(x as AssetTree.TypeAsset);
        } else if (x is AssetTree.MemberAsset) {
            onSelectMember(x as AssetTree.MemberAsset)
        }
    }        

    public var onSelectType is function from AssetTree.TypeAsset to ();
    public var onEscape is function from () to ();
    const searchTv is Treeview = tv;
    readonly var tree is Treeview = bind if filterText <> [] then searchTv else tv;
    readonly var font = bind layoutEngine.createFont(Names.DEFAULT_FONT);
    var cellHeight = 18;
    public const searchField is Text.Field = Text.Field {
        //visible: bind filterText <> [];
        width: bind width;
        //transform: bind translate(-width/2+5, 2);
        font: bind font;
        foreground: bind textFg;
        background: bind textBg;
    };
    const sp = Scrollpane {
        canZoomVertical: false;
        content: bind tree;
        canScrollHorizontally: false;
    };
    public var choosePackages is Boolean = false;
    public var chooseTypes is Boolean = true;
    public var chooseMembers is Boolean = true;
    var filterText is String[];
    public var filterReturnType is F3Type;
    public var filterArgumentType is F3Type;
    public var onSelectMember is function from AssetTree.MemberAsset to ();

    function filter from (tn is Treeview.Treenode) to Boolean 
    {
        const asset = (tn as AssetTree.AssetTreenode).asset;
        if (filterReturnType <> null) {
            if (asset is AssetTree.MemberAsset) {
                const m = asset as AssetTree.MemberAsset;
                var matches is Boolean;
                if (m.member.m is F3FunctionMember) {
                    const f = m.member.m as F3FunctionMember;
                    const ft = f.getType();
                    matches = filterReturnType.isConvertibleFrom(ft.getReturnType());
                    if (not matches) {
                        matches = filterReturnType.isConvertibleFrom(ft);
                    }
                } else {
                    const t = m.member.rt;
                    matches = filterReturnType.isConvertibleFrom(t);
                }
                if (not matches) {
                    return false;
                }
            } else {
                return false;
            }
        } else if (filterArgumentType <> null) {
            if (asset is AssetTree.MemberAsset) {
                const m = asset as AssetTree.MemberAsset;
                var matched = m.member == Expression.FORK ;
                if (not matched) {
                    if (m.member.m is F3FunctionMember) {
                        const f = m.member.m as F3FunctionMember;
                        const ft = f.getType();
                        if (Reflect.UNIT_TYPE == filterArgumentType) {
                            matched = f.isStatic();
                        } else {
                            if (f.isStatic()) {
                                for (i in [0..<ft.minArgs()]) {
                                    const t = ft.getArgumentType(i);
                                    if (t.isConvertibleFrom(filterArgumentType)) {
                                        matched = true;
                                    }
                                    if (true) break; // only check arg 1
                                }
                            } else {
                                const t = f.getDeclaringClass();
                                if (t.isConvertibleFrom(filterArgumentType)) {
                                    matched = true;
                                }
                            }
                        }
                    }
                }
                if (not matched) return false;
            } else {
                return false;
            }
        }       
        if (filterText <> []) {
            const s = tn.label.toLowerCase();
            for (j in filterText) {
                if (not s.contains(j)) return false;
            }
        }
        return true;
    }
    const d = searchField.observeText().subscribe(function from (text is String) to () 
                                                  {
                                                      if (text.trim() == "") {
                                                          filterText = [];
                                                      } else {
                                                          filterText = text.toLowerCase().split(" ");
                                                      }
                                                  });
    override function resize from (w is Number, h is Number) to ()
    {
        super.resize(w, h);
        sp.resize(w, h);
    }

    override var internalContent = Group {
        content: bind 
        [/*
        TransformNode {
            ty: bind height / 2 - cellHeight / 2
            content: bind searchField;
        },
        */
        TransformNode {
            //            ty: bind -cellHeight/2;
            content: bind sp;
        },
        Rectangle {
            pickable: false;
            width: bind sp.bounds.width();
            height: bind sp.bounds.height();
            strokePaint: (ColorPaint(Color.color(.2, .2, .2)));
        }]
    }
}