package expr;
import f3.media.scene.*;
import f3.media.svg.SVG;
import java.io.*;
import java.util.zip.*;
import expr.prog.Expression.ExprScene;
import expr.prog.Program;
import expr.prog.Expression.MemberNode;
import expr.ResourceNode.MaResourceNode;
import expr.ResourceNode.F3AssimpResourceNode;
import f3.util.Bits;

public class Resource {
    public var id is String;
    public var url is String;
    public var programs is ProgramResource[];
    public var animation is TemporalResource[];
    public var displayName is String;
}

public class ChannelBoxResource is TemporalResource {
    public var n_id is Integer;
    public var channels is ChannelResource[];
}

public class ChannelResource is Temporal {
    public var target is String;
    public var keys is KeyFrame[];
}

public class KeyFrame {
    public var keyTime is Duration;
    public var keyValue is Number;
    public var kix is Number;
    public var kiy is Number;
    public var kox is Number;
    public var koy is Number;
}

public class ProjectResource is Resource {
    public var scenes is SceneResource[];
    public var allResources is Resource[];
}

public class SpatialResourceGroup is SpatialResource {
    public var resources is SpatialResource[];
}

public class ColliderResource {
    public var colliderType is String;
    public var mass is Number;
    public var collidable is Boolean;
    public var friction is Number;
    public var restitution is Number;
    public var gravityScale is Number = 1.0;
}

public class SpatialResource is Resource {
    public var tx is Number;
    public var ty is Number;
    public var tz is Number;

    public var rx is Number;
    public var ry is Number;
    public var rz is Number;

    public var sx is Number;
    public var sy is Number;
    public var sz is Number;

    public var px is Number;
    public var py is Number;
    public var pz is Number;

    public var colliderResource is ColliderResource;
}

public class TextResource is SpatialResource {
    public var fontFamily is String = "Helvetica";
    public var fontWeight is String = "normal";
    public var fontStyle is String = "normal";
    public var fontSize is Integer = 16;
    public var text is String = "";
    public var width is Number = 100;
    public var foreground is Integer = 0xffffffff;
    public var background is Integer = 0xff000000;
}

public class TextFieldResource is TextResource {
}

public class TextOutputResource is TextResource {
}

function formatColor from (c is Color) to Integer
{
    const r = (c.red * 255 + 0.5) as Integer;
    const g = (c.green * 255 + 0.5) as Integer;
    const b = (c.blue * 255 + 0.5) as Integer;
    const a = (c.opacity * 255 + 0.5) as Integer;
    var value = Bits.shiftLeft(Bits.bitAnd(a, 0xff), 24);
    value = Bits.bitOr(value, Bits.shiftLeft(Bits.bitAnd(r, 0xff), 16));
    value = Bits.bitOr(value, Bits.shiftLeft(Bits.bitAnd(g, 0xff), 8));
    value = Bits.bitOr(value, Bits.shiftLeft(Bits.bitAnd(b, 0xff), 0));
    return value;
}

function parseColor from (argb is Integer) to Color
{
    const a = Bits.bitAnd(Bits.shiftRight(argb, 24), 0xff);
    const r = Bits.bitAnd(Bits.shiftRight(argb, 16), 0xff);
    const g = Bits.bitAnd(Bits.shiftRight(argb, 8), 0xff);
    const b = Bits.bitAnd(Bits.shiftRight(argb, 0), 0xff);
    Color.color(r / 255.0, g / 255.0, b / 255.0, a / 255.0);
}

public interface Temporal {
    public var blendWeight is Number = 1.0;
    public var playTime is Duration = 0s;
    public var playRate is Number = 1.0;
    public var playCount is Number = 1.0;
}

public class TemporalResource is Temporal, Resource {
    public var content is TemporalResource[];
}

public class MaResource is SpatialResource {
}

public class MaClipLibrary is TemporalResource {
}

public class TranstitionLayerResource is TemporalResource {
}

public class SVGResource is SpatialResource {
}

public class ImageResource is SpatialResource {
}

public class WebResource is SpatialResource {
}

class ResourceBuilder {

    function convertUrl from (url is String) to String 
    {
        url
    }

    function makeResource from (n is ResourceNode) to SpatialResource {
        if (n is MaResourceNode) {
            for (x in (n as MaResourceNode).model.getResources()) {
                convertUrl(x);
            }
        }
        if (n is F3AssimpResourceNode) {
            for (x in (n as F3AssimpResourceNode).model.getResources()) {
                convertUrl(x);
            }
        }
        const progs = foreach (p in n.programs where (p.code <> null or p.varSources.size() > 0) and p.parent == null) ProgramResource {
                variables: foreach (x in p.varSources.entrySet()) {
                    VarDecl {
                        varName: x.getKey().variableName;
                        varType: x.getKey().varType.t.getName();
                        isShortcut: x.getKey().isShortcut;
                        sourceCode: x.getValue().sourceCode;
                        code: x.getValue().code;
                        contextPath: x.getKey().parent.fullName();        
                    }
                }
                event: p.event.serialize();
                code: p.code;
                compiled: p.sourceCode;
                targetPath: p.targetPath;   
                contextPath: p.evalContext.eventContext.fullName(); 
        };
        const anims = foreach (q in n.channelBoxes.content) makeResource(q);
        const colliderResource = ColliderResource {
            collidable: n.collidable;
            friction: n.collidableFriction;
            restitution: n.collidableRestitution;
            mass: n.collidableMass;
            colliderType: n.collidableType.toString();
            gravityScale: n.collidableGravityScale;
        };

        if (n is ResourceTextField) {
            const f = n as ResourceTextField;
            TextFieldResource {
                url: f.url;
                id: f.id;
                displayName: f.displayName;
                fontFamily: f.fontFamily.selection;
                fontWeight: f.fontWeight.selection;
                fontStyle: f.fontStyle.selection;
                fontSize: f.fontSize.selection;
                foreground: formatColor(f.foreground);
                background: formatColor(f.background);
                width: f.width;
                text: f.text;
                tx: n.tx;
                ty: n.ty;
                tz: n.tz;
                
                sx: n.sx;
                sy: n.sy;
                sz: n.sz;
                
                rx: n.rx;
                ry: n.ry;
                rz: n.rz;
                
                px: n.px;
                py: n.py;
                pz: n.pz;
                programs: progs;
                animation: anims;
                colliderResource: colliderResource;
            }
         } else if (n is ResourceLabel) {
            const f = n as ResourceLabel;
            TextOutputResource {
                url: f.url;
                id: f.id;
                displayName: f.displayName;
                fontFamily: f.fontFamily.selection;
                fontWeight: f.fontWeight.selection;
                fontStyle: f.fontStyle.selection;
                fontSize: f.fontSize.selection;
                foreground: formatColor(f.foreground);
                background: formatColor(f.background);
                width: f.width;
                text: f.text;
                tx: n.tx;
                ty: n.ty;
                tz: n.tz;
                
                sx: n.sx;
                sy: n.sy;
                sz: n.sz;
                
                rx: n.rx;
                ry: n.ry;
                rz: n.rz;
                
                px: n.px;
                py: n.py;
                pz: n.pz;
                programs: progs;
                animation: anims;
                colliderResource: colliderResource;
            }
        } else if (n is GroupResourceNode) {
            const g = n as GroupResourceNode;
            SpatialResourceGroup {
                displayName: g.displayName;
                url: convertUrl(n.url);
                tx: n.tx;
                ty: n.ty;
                tz: n.tz;
                
                sx: n.sx;
                sy: n.sy;
                sz: n.sz;
                
                rx: n.rx;
                ry: n.ry;
                rz: n.rz;
                
                px: n.px;
                py: n.py;
                pz: n.pz;
                programs: progs;
                animation: anims;
                colliderResource: colliderResource;
                resources: foreach (x in g.content) makeResource(x as ResourceNode);
            }
        } else {
            SpatialResource {
                displayName: n.displayName;
                url: convertUrl(n.url);
                tx: n.tx;
                ty: n.ty;
                tz: n.tz;
                
                sx: n.sx;
                sy: n.sy;
                sz: n.sz;
                
                rx: n.rx;
                ry: n.ry;
                rz: n.rz;
                
                px: n.px;
                py: n.py;
                pz: n.pz;
                programs: progs;
                animation: anims;
                colliderResource: colliderResource;
            }
        }
    }

    function makeChannelBoxResource from (n is ResourceTarget.ChannelBoxGroup) to ChannelBoxResource {
        ChannelBoxResource {
            var x = n as ResourceTarget.ChannelBoxGroup;
            n_id: x.n_id;
            blendWeight: x.blendWeight;
            playTime: x.playTime;
            playRate: x.playRate;
            playCount: x.playCount;
            channels: foreach (j in x.content) {
                const c = j as Channel;
                ChannelResource {
                    target: c.id;
                    blendWeight: c.blendWeight;
                    playTime: c.playTime;
                    playRate: c.playRate;
                    playCount: c.playCount;
                    keys: foreach (k1 in c.keys) {
                        const k = k1 as f3.media.scene.KeyFrame.Key of Number;
                        const i = k.interpolator;
                        KeyFrame {
                            keyTime: k.position;
                            keyValue: k.value;
                        }
                    }
                }
            }
        }
    }

    
    function makeResource from (n is TimeNode) to TemporalResource {
        if (n is ResourceTarget.ChannelBoxGroup) {
            var r = makeChannelBoxResource(n as ResourceTarget.ChannelBoxGroup);
            r.playTime = n.playTime;
            r.playRate = n.playRate;
            r.playCount = n.playCount;
            r.blendWeight = n.blendWeight;
            r;
        } else if (n is ResourceTimeNode) {
            makeResource(n as ResourceTimeNode);
        } else null
    }

    function makeResource from (n is ResourceTimeNode) to TemporalResource {
        println("unwrapped content of {n.url} => {n.unwrapContent()}");
        println("programs={n.programs}");
        TemporalResource {
            displayName: n.displayName;
            url: convertUrl(n.url);
            blendWeight: n.blendWeight;
            playTime: n.playTime;
            playRate: n.playRate;
            playCount: n.playCount;
            content: foreach (j in n.unwrapContent()) makeResource(j);
            programs: foreach (p in n.programs where p.code <> null and p.parent == null) ProgramResource {
                variables: foreach (x in p.varSources.entrySet()) {
                    VarDecl {
                        varName: x.getKey().variableName;
                        varType: x.getKey().varType.t.getName();
                        isShortcut: x.getKey().isShortcut;
                        sourceCode: x.getValue().sourceCode;
                        code: x.getValue().code;
                        contextPath: x.getKey().parent.fullName();
                    }
                }
                event: p.event.serialize();
                code: p.code;
                compiled: p.sourceCode;
                targetPath: p.targetPath;
                contextPath: p.evalContext.eventContext.fullName(); 
            }
        }
    }
}

public class SceneLayer {
    public var name is String;
    public var spatialResources is SpatialResource[];
}

public class SceneResource is Resource {
    public var width is Number;
    public var height is Number;
    public var name is String;
    public var dynamicsWorldFactory is String;
    public var spatialResources is SpatialResource[];
    public var temporalResources is TemporalResource[];
    public var layers is SceneLayer[];
}

public class ProgramResource is Resource {
    public var event is MemberNode;
    public var variables is VarDecl[];
    public var code is ExprScene;
    public var compiled is String;
    public var targetPath is String;
    public var contextPath is String;
}

public class VarDecl {
    public var varName is String;
    public var varType is String;
    public var sourceCode is String;
    public var code is ExprScene;
    public var isShortcut is Boolean = true;
    public var contextPath is String;
}

class ExportingBuilder is ResourceBuilder {
    const resourcesToCopy = new java.util.HashSet of String();
    override function convertUrl from (url is String) to String 
    {
        if (url.startsWith("text-input://") or url.startsWith("text-output://") or url.startsWith("timenode://") or url.contains("#") or url.startsWith("node://") or url == "") {
            return url;
        } 
        resourcesToCopy.add(url);
        return "file:./{new java.net.URL(url).getPath()}";
    }
    override function makeResource from (n is ResourceNode) to SpatialResource 
    {
        super.makeResource(n);
    }
    override function makeResource from (n is ResourceTimeNode) to TemporalResource 
    {
        super.makeResource(n);
    }
}

public function export
    from (fileName is String,
          url is String,
	  mainScene is Scene,
	  spatial is ResourceGroup,
	  temporal is ResourceTimeGroup,
          scenes is ResourceScene[])
    to ()
{
    const zip = new java.util.zip.ZipOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)));
    var scene = mainScene;
    const builder = ExportingBuilder {};
    if (url.startsWith("file:")) {
	const file = new java.io.File(url.substring(5));
	const sceneRes = SceneResource {
            url: url;
	    width: scene.width;
	    height: scene.height;
	    name: scene.id;
	    spatialResources:
	    foreach (i in spatial.resources) {
		builder.makeResource(i)
	    }
	    temporalResources:
	    foreach (i in temporal.resources) {
		builder.makeResource(i)
	    }
            layers: foreach (i in scenes) SceneLayer {
                name: i.id;
                spatialResources: foreach (j in i.currentResource.resources) builder.makeResource(j)
            }
	}
        zip.putNextEntry(new ZipEntry(file.getName()));
	const w = new java.io.BufferedWriter(new OutputStreamWriter(zip));
	IO.writeObject(w, sceneRes);
	w.flush();
        zip.closeEntry();
        const copied = new java.util.HashSet of String;
        for (uu in builder.resourcesToCopy) {
            const u = new java.net.URL(uu);
            const entryName = u.getPath().substring(1);
            if (copied.add(entryName)) {
                zip.putNextEntry(new ZipEntry(entryName));
                const s = u.openStream();
                copyStream(s, zip);
                zip.closeEntry();
            }
        }
    }
    zip.close();
}

function copyStream from (input is java.io.InputStream, output is java.io.OutputStream) to ()
{
    const buffer = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 4096) as nativearray of Byte;
    var count is Integer;
    while ((count = input.read(buffer, 0, buffer.length)) > 0) {
        output.write(buffer, 0, count);
    }
}
    


public function save 
    from (url is String,
          topLevel is Program[],
	  mainScene is Scene,
	  spatial is ResourceGroup,
	  temporal is ResourceTimeGroup,
          scenes is ResourceScene[])
    to ()

{
    var scene = mainScene;
    if (url.startsWith("file:")) {
    println("TOP LEVELS: {topLevel}");
	const file = new java.io.File(url.substring(5));
        const builder = ResourceBuilder {};
	const sceneRes = SceneResource {
            url: url;
	    width: scene.width;
	    height: scene.height;
	    name: scene.id;
            programs: foreach (p in topLevel where p.parent == null) {
                ProgramResource {
                    variables: foreach (x in p.varSources.entrySet()) {
                        VarDecl {
                            varName: x.getKey().variableName;
                            varType: x.getKey().varType.t.getName();
                            isShortcut: x.getKey().isShortcut;
                            sourceCode: x.getValue().sourceCode;
                            code: x.getValue().code;
                            contextPath: x.getKey().parent.fullName();
                        }
                    }
                    code: p.code;
                    compiled: p.sourceCode;
                    targetPath: p.targetPath;
                    contextPath: p.evalContext.eventContext.fullName(); 
                }
            }
	    spatialResources:
	    foreach (i in spatial.resources) {
		builder.makeResource(i)
	    }
	    temporalResources:
	    foreach (i in temporal.resources) {
		builder.makeResource(i)
	    }
            layers: foreach (i in scenes) SceneLayer {
                name: i.id;
                spatialResources: foreach (j in i.currentResource.resources) builder.makeResource(j)
            }

	}
	const w = new java.io.BufferedWriter(new java.io.FileWriter(file));
	IO.writeObject(w, sceneRes);
	w.close();
    }
}

public function open 
    from (url is String)
    to SceneResource
{
    const reader = new java.io.InputStreamReader(new java.io.BufferedInputStream(new java.net.URL(url).openStream()));
    const result = IO.readObject(reader) as SceneResource;
}