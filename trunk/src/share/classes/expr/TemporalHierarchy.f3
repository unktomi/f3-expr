package expr;
import expr.undo.*;
import f3.media.scene.*;
import f3.util.*;
import f3.util.Observer.*;
import expr.Names.*;
import expr.ResourceTarget.*;
import f3.math.*;

function shouldFormat from (n is TimeNode) to Boolean {
    not (n is ResourceTimeNode and (n as ResourceTimeNode).$useLiteralId);
}

public class Treenode is Treeview.Treenode {
    public var n is TimeNode;
    var label0 = bind if shouldFormat(n) 
                          then if (n.parent is ResourceTimeNode and shouldFormat(n.parent)) then "Main Timeline" else if n is ResourceTimeNode then (n as ResourceTimeNode).displayName else if (n is ChannelBoxesGroup) then (n as ChannelBoxesGroup).target.displayName else formatName(n.id) 
                          else n.id;
    override var label = bind label0;
    function asTimeGroup from (n is TimeNode) to TimeGroup { if (n is TimeGroup) then n as TimeGroup else null }
    override var canOpen = bind { var g = asTimeGroup(n); g.content.size() > 0 }
    override var children = bind foreach (x in getChildren(n)) Treenode { n: bind x, parent: this};

    bound function getChildren from (t is TimeNode) to TimeNode[]
    {
	if (t is TimeGroup) {
	    readonly var g = t as TimeGroup;
	    g.content
	} else [];
    }   
    override function open to () {
	super.open();
	println("open {n} => {children.size()}");
    }
}

public class Model is Treeview.Treemodel {
    public const h is TemporalHierarchy;
    override var root = Treenode { n:  bind h.root };
    public var selection is Treenode on replace {
        selectionObserver.onNext(selection);
    }

    function findSelection from (tn is TimeNode, t is Treeview.Treenode) to Treenode {
        const ht = t as Treenode;
        if (ht.n <> null and ht.n == tn) {
            return ht;
        }
        for (c in t.getAllChildren()) {
            const r = findSelection(tn, c);
            if (r <> null) return r;
        }
        return null;
    }

    const selectionListener = 
	h.observeSelection().subscribe(function from (tn is TimeNode) to () 
				       {
                                           const found is Treenode = findSelection(tn, root);
                                           if (found <> null) {
                                               selection = found;
                                               open(selection);
                                           }
				       });

    function onSelectionChange from (tn is Treeview.Treenode) to ()
    {
	h.selectedTimeNode = (tn as Treenode).n
    }

    const disp = selectionObserver.subscribe(onSelectionChange);
}

public class TemporalHierarchy 
{
    public var selectedTimeNode is TimeNode on replace {
	var p = selectedTimeNode;
	while (p <> null and not (p is ResourceTimeNode)) {
	    p = p.parent;
	}
        if (selectedTransform <> p) {
            println("SELECTION => {p}");
            selectedTransform = p as ResourceTimeNode;
        }
        var tx is Channel of Number;
        var ty is Channel of Number;
        var tz is Channel of Number;

        var sx is Channel of Number;
        var sy is Channel of Number;
        var sz is Channel of Number;

        var rx is Channel of Number;
        var ry is Channel of Number;
        var rz is Channel of Number;

        var rq is Channel of Quat;

        p = selectedTimeNode;
        if (p is ResourceTimeNodeWrapper) {
            p = (p as ResourceTimeNodeWrapper).wrapped;
        }
        if (p is TimeGroup) {
            const g = p as TimeGroup;
            for (c in g.content) {
                if (c is Channel) {
                    if (c.id.toLowerCase().endsWith("tx")) {
                        tx = c as Channel of Number;
                    }
                    else if (c.id.toLowerCase().endsWith("ty")) {
                        ty = c as Channel of Number;
                    }
                    else if (c.id.toLowerCase().endsWith("tz")) {
                        tz = c as Channel of Number;
                    }
                    else if (c.id.toLowerCase().endsWith("sx")) {
                        sz = c as Channel of Number;
                    }
                    else if (c.id.toLowerCase().endsWith("sy")) {
                        sz = c as Channel of Number;
                    }
                    else if (c.id.toLowerCase().endsWith("sz")) {
                        sz = c as Channel of Number;
                    }
                    else if (c.id.toLowerCase().endsWith("rx")) {
                        rx = c as Channel of Number;
                    }
                    else if (c.id.toLowerCase().endsWith("ry")) {
                        ry = c as Channel of Number;
                    }
                    else if (c.id.toLowerCase().endsWith("r")) {
                        rq = c as Channel of Quat;
                    }
                }
            }
        }
        selectedTranslateX = tx;
        selectedTranslateY = ty;
        selectedTranslateZ = tz;

        selectedScaleX = sx;
        selectedScaleY = sy;
        selectedScaleZ = sz;

        selectedRotateX = rx;
        selectedRotateY = ry;
        selectedRotateZ = rz;

        selectedRotateQ = rq;
        println("selected t {tx}, {ty}, {tz}");
        selection.onNext(selectedTimeNode);
    };

    public var selectedTranslateX is Channel of Number;
    public var selectedTranslateY is Channel of Number;
    public var selectedTranslateZ is Channel of Number;

    public var selectedScaleX is Channel of Number;
    public var selectedScaleY is Channel of Number;
    public var selectedScaleZ is Channel of Number;

    public var selectedRotateX is Channel of Number;
    public var selectedRotateY is Channel of Number;
    public var selectedRotateZ is Channel of Number;
    
    public var selectedRotateQ is Channel of Quat;

    public function clearSelection {
	selectedTimeNode = null;
    }

    const undoList = UndoList {};

    postinit {
	undoList.addTarget("selectedTimeNode", &selectedTimeNode);
    }

    public var selectedTransform is TimeNode;

    public var root is TimeNode;

    public function selectTimeNode from (n is TimeNode) to ()
    {
    println("SELECTING TIME NODE: {n}");
	selectedTimeNode = n;
    }

    public function deleteSelection {
	var old = selectedTransform;
	var prev is ResourceTimeNode = null;
	var next is ResourceTimeNode = null;
	var t is TimeNode;
	root.foldLeft((), 
		      function from (_ is (), n is TimeNode) to () {
			  if (n == old) {
			      if (prev == null) {
				  prev = n as ResourceTimeNode;
			      } else t = prev;
			  } else if (n is ResourceTimeNode) {
			      if (prev == t) {
				  next = n as ResourceTimeNode;
			      }
			      prev = n as ResourceTimeNode;
			  }
		      });
	if (t == null) {
	    t = next;
	}
	selectTimeNode(t);
    }

    public function move from (src is TimeNode, target is TimeNode) to ()
    {
        if (not (src is ResourceTimeNode)) {
            return;
        }
	const srcParent = src.parent as TimeGroup;
        if (srcParent is ResourceTimeGroup) {
            const r = srcParent as ResourceTimeGroup;
            delete src as ResourceTimeNode from r.resources;
        } else {
            delete src from srcParent.content;
        }
	var targetTimeGroup is TimeGroup;
	if (not (target is TimeGroup)) {
	    const parent = target.parent as TimeGroup;
            if (parent is ResourceTimeGroup) {
                const r = parent as ResourceTimeGroup;
                const i = f3.util.Sequences.indexOf(r.resources, target);
                insert src as ResourceTimeNode after r.resources[i];
            } else {
                const i = f3.util.Sequences.indexOf(parent.content, target);
                insert src after parent.content[i];
            }
	} else {
	    const parent = target as TimeGroup;
            if (parent is ResourceTimeGroup) {
                const r = parent as ResourceTimeGroup;
                insert src as ResourceTimeNode into r.resources;
            } else {
                insert src into parent.content;
            }
	}
    }

    const selection = Subject of TimeNode {}

    public function observeSelection to Observable of TimeNode {
	selection;
    }
	
}