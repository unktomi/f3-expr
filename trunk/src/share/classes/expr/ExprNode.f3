package expr;
import expr.Resources.*;
import expr.prog.Program;
import f3.media.scene.*;

public class ModelContent {
    public var spatialRoot is Node;
    public var temporalRoot is TimeNode;
}

public class ExprNode is AbstractNode {
    public const soundLoader is SoundLoader = the SoundLoader;
    public const movieLoader is MovieLoader = the MovieLoader;
    public const webBrowserFactory is AbstractWebBrowserFactory = the AbstractWebBrowserFactory;
    public var url is String;
    override var id = bind url;
    public var spatialRoot is Node = bind modelContent.spatialRoot;
    public var temporalRoot is TimeNode = bind modelContent.temporalRoot;
    public var modelContent is ModelContent = bind if url.endsWith(".expr") then loadExpr(url) else loadResource(url);
    var instanceSpace is Group = Group {};
    public var programs is Program[];
    var firstTime = true;
    override function update to () {
        super.update();
        if (firstTime) {
            firstTime = false;
            for (prog in programs) prog.evaluate();
        }
    }
    /*
    var timeline = Timeline {
        content: TimeGroup {
            playCount: -1;
            content: bind temporalRoot;
        }
    }
    */

    function loadExpr from (url is String) to ModelContent {
        var r is SceneResource = Resources.open(url);
        var allPrograms is Program[];
        var ns is ExprNode[] = foreach (x in r.spatialResources) {
            const currentTransform = ExprNode {
                url: x.url
            }
            currentTransform.programs = 
            foreach (prog in x.programs) {
                const p = Program {
                    event: prog.event.deserialize();
                    code: prog.code;
                    sourceCode: prog.compiled;
                    evalContext: Program.EvalContext {
                        interactive: function from () to Boolean { true } 
                        targetNode: currentTransform;
                        instanceSpace: instanceSpace;
                        lookupSpatial: function from (n is String) to Node { 
                            const r = currentTransform.spatialRoot.lookup(n);
                            println("lookupSpatial in {url} {n} => {r}");
                            return r;
                        }
                        //targetTimeline: player;
                        lookupTemporal: function from (n is String) to TimeNode { 
                            const r = currentTransform.temporalRoot.lookup(n);
                            println("lookupTemporal in {url} {n} => {r}");
                            return r;
                        }
                    }
                }
                println("creating program in {x.url} on {p.event} as {p.sourceCode}");
                p;
            }
            currentTransform;
        }
        const spatialRoot = Group {
            id: "Main Scene";
            content: foreach (x in r.spatialResources) {
                var n = ns[indexof x];
                TransformNode {
                    id: "transform"
                        tx: x.tx;
                    ty: x.ty;
                    tz: x.tz;
                    rx: x.rx;
                    ry: x.ry;
                    rz: x.rz;
                    sx: x.sx;
                    sy: x.sy;
                    sz: x.sz;
                    px: x.px;
                    py: x.py;
                    pz: x.pz;
                    content: bind n.spatialRoot;
                }
            }
        }
        const temporalRoot = TimeGroup {
            content: foreach (n in ns) n.temporalRoot;
        }
        ModelContent {
            spatialRoot: if (spatialRoot.content.size() == 1) then spatialRoot.content[0] else spatialRoot;
            temporalRoot: if (temporalRoot.content.size() == 1) then temporalRoot.content[0] else temporalRoot;
        }
    }

    function loadResource from (url is String) to ModelContent 
    {
        if (url.endsWith(".ma")) {
	    const model = Ma.Model {
		url: url;
	    }
            ModelContent {
                spatialRoot: bind model.getSpatialRoot();
                temporalRoot: bind model.getTemporalRoot();
            }
	} else if (url.endsWith(".mp4") or 
                   url.endsWith(".mov")) {
            const movie = Movie {
                url: url;
                paused: true
            }
            const clip = Movie.Clip { movie: movie };
            ModelContent {
                spatialRoot: movie;
                temporalRoot: clip;
            }
	} else if (url.endsWith(".aiff") or 
                   url.endsWith(".asf") or 
                   url.endsWith(".asx") or
                   url.endsWith(".dls") or
                   url.endsWith(".flac") or
                   url.endsWith(".fsb") or
                   url.endsWith(".it") or
                   url.endsWith(".m3u") or
                   url.endsWith(".mid") or
                   url.endsWith(".midi") or
                   url.endsWith(".mod") or
                   url.endsWith(".mp2") or
                   url.endsWith(".mp3") or
                   url.endsWith(".pls") or
                   url.endsWith(".pls") or
                   url.endsWith(".s3m") or
                   url.endsWith(".vag") or
                   url.endsWith(".wav") or
                   url.endsWith(".wax") or
                   url.endsWith(".wma") or
                   url.endsWith(".xm") or
                   url.endsWith(".xma")){
            const sound = Sound.Sample {
                url: url;
                paused: true
            }
            const clip = Sound.Clip { sound: sound };
            ModelContent {
                spatialRoot: sound;
                temporalRoot: clip;
            }
        } else if (url.endsWith(".expr")) {
            loadExpr(url);
	} else if (url.endsWith(".png") or url.endsWith(".jpg") or url.endsWith(".tif") or url.endsWith(".tiff") or url.endsWith(".tga")) {
	    const image = Image { 
		url: url;
	    }
            ModelContent {
                spatialRoot: image;
            }
        } else {
            ModelContent {
                spatialRoot: WebBrowser {
                    url: url;
                }
            }
        }
    }
    override var internalContent = Group {
        content: bind [instanceSpace, spatialRoot]
    }
}


