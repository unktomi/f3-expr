package expr;
import f3.media.scene.*;
import f3.math.*;
import f3.media.scene.KeyFrame.*;

public class MaResourceTimeNode is ResourceTimeNode {
    override var url = bind model.url;
    public var model is Ma.Model;
    override var content = bind model.getTemporalRoot();
    const mapped = new java.util.HashMap of (String, TimeNode);
    var lastContent is TimeNode;
    override function lookup from (n is String) to TimeNode {
        if (lastContent <> content[0]) {
            mapped.clear();
            lastContent = content[0];
        }
        var rtn = mapped.get(n);
        if (rtn <> null) return rtn;
        var r = super.lookup(n);
        println("Ma Resource Time Node {url} lookup: {n} => {r}");
        if (r == null) {
            const sharp2 = n.lastIndexOf("#");
            var clipName = n;
            if (sharp2 > 0) {
                const sharp1 = n.lastIndexOf("#", sharp2-1);
                if (sharp1 > 0) {
                    clipName = n.substring(sharp2+1);
                    const libName = n.substring(sharp1+1, sharp2);
                    println("clipLibs: {model.getClipLibraries()}");
                    for (clipLib in model.getClipLibraries() where clipLib.id == libName) {
                        const clip = clipLib.lookup(clipName);
                        if (clip <> null) {
                            if (rtn == null) {
                                rtn = 
                                    if (clip is ResourceTimeNode) 
                                        then clip as ResourceTimeNode 
                                        else ResourceTimeNodeWrapper {
                                                url: n;
                                                wrapped: clip as TimeGroup;
                                            };
                                mapped.put(n, rtn);
                            }
                            r = rtn;
                            break;
                        }
                    }
                } 
            } else { // hack...
                for (clipLib in model.getClipLibraries()) {
                    var j = clipLib.lookup(clipName);
                    if (j <> null) {
                        r = j;
                        break;
                    }
                }
            }
        }
        return r;
    }
}

public class Subclip is TimeGroup
{
    public var name is String;
    public var target is ResourceTimeNode;
    public var clipInterval is Interval;
    override var content = bind createSubclip(this, clipInterval, target);
    override var id = bind "{target.id}#{name}";
}

function createSubclip from (clip is Subclip, interval is Interval, target is TimeNode) to TimeNode {
    if (Interval.intersect(target.boundsInScene, interval) == null) return null;
    if (target is TimeGroup) {
        const g = target as TimeGroup;
        TimeGroup {
            playTime: g.playTime;
            playCount: g.playCount;
            playRate: g.playRate;
            blendWeight: g.blendWeight;
            id: bind "{clip.id}#{g.id}";
            content: foreach (x in g.content) createSubclip(clip, interval, x);
        }
    } else if (target is Channel of Number) {
        const ch = target as Channel of Number;
        Channel of Number {
            playTime: ch.playTime;
            playCount: ch.playCount;
            playRate: ch.playRate;
            blendWeight: ch.blendWeight;
            id: bind "{clip.id}#{ch.id}";
            targets: ch.targets;
            keys: foreach (k in ch.keys where interval.intersects(k.position)) {
                Key of Number {
                    position: k.position;
                    value: k.value;
                    interpolator: k.interpolator;
                }
            }
        }
    } else null
}

public class ResourceTimeNode is TimeGroup, ResourceTarget {
    public var visible is Boolean = true;
    override function createChannels from (parent is ChannelBoxGroup) to (Channel of Number)[]
    {
        []
    }
    override public function findTarget from (id is String) to Object 
    {
        if (id == "") then this else lookup(id);
    }
    override var id = bind url;
    public var spatial is ResourceNode;
    public function unwrapContent to TimeNode[] {
         content
    }

    public var subclips is Subclip[];

}


