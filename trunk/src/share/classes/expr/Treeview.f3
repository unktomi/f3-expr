package expr;
import f3.util.*;
import f3.media.input.*;
import f3.media.scene.*;
import f3.media.xhtml.*;
import f3.media.scene.Shape2D.*;
import f3.math.*;
import f3.math.LinearMath.*;
import java.lang.Math;
import org.f3.runtime.Foldable;

public class Treemodel is Foldable of Treenode {

    public var root is Treenode;

    override function foldLeft of b
	from (z is b, f is function from (b, Treenode) to b) 
	to b
    {
	root.foldLeft(z, f)
    }

    override function foldRight of b
	from (z is b, f is function from (Treenode, b) to b) 
	to b
    {
	root.foldRight(z, f);
    }

    public function update {
	rowCount = root.update(0, 0);
    }

    public var rowCount is Integer;

    function getRows 
	from (low is Integer, hi is Integer) 
	to Treenode[]
    {
	var result is Treenode[];
	root.getRows(low, hi, 
		     function from (n is Treenode) to ()
		     {
			 insert n into result;
		     });
	return result;
    }

    public const selectionObserver is Subject of Treenode = Subject of Treenode {};

    public function open from (t is Treenode) to ()
    {
	if (not t.parent.isOpen) {
	    t.parent.open();
	}
    }
}


public abstract class Treenode is Foldable of Treenode {
    public var row is Integer;
    public var column is Integer;
    public var isOpen is Boolean;
    public var canOpen is Boolean;
    public var parent is Treenode;
    public var label is String;
    protected var children is Treenode[];

    function update from (r is Integer, c is Integer) to Integer
    {
	row = r; column = c;
	var j = r+1;
	if (isOpen) {
	    if (not canOpen) {
		close();
	    }
	}
	if (isOpen) {
	    var k = c+1;
	    for (child in children) {
		child.parent = this;
		j = child.update(j, k);
	    }
	}
	return j;
    }

    function getRows 
	from (low is Integer, 
	      hi is Integer, 
	      add is function from Treenode to ()) 
	to () 
    {
	if (low <= row and hi > row) {
	    add(this)
	}
	if (isOpen) {
	    var j = 0;
	    for (c in children /*where c.getMinRow() > low and c.getMaxRow() < hi*/) {
		c.getRows(low, hi, add);
	    }
	}
    }

    function getMinRow to Integer 
    {
	row
    }

    function getMaxRow to Integer 
    {
	if (isOpen) then children[children.size()-1].getMinRow() else row;
    }

    public bound function getAllChildren to Treenode[] 
    {
        children
    }

    public bound function getChildren to Treenode[]
    {
	if (isOpen) then children else []
    }

    public function open to ()
    {
	if (not parent.isOpen) {
	    parent.open();
	}
	isOpen = true;
    }

    public function close to ()
    {
	isOpen = false;
    }

    override function foldLeft of b
	from (z is b, f is function from (b, Treenode) to b) to b
    {
	const r = f(z, this);
	if (isOpen) {
	    children.foldLeft(r, 
			      function from (y is b, x is Treenode) to b
			      {
				  x.foldLeft(y, f)
			      });
	} else r;
    }

    override function foldRight of b
	from (z is b, f is function from (Treenode, b) to b) to b
    {
	const r = 
	    if (isOpen) 
		then children.foldRight(z, 
					function from (x is Treenode, y is b) to b
					{
					    x.foldRight(y, f)
					})
		else z;
	f(this, r);
    }
}

function checkVisible from (row is Integer, scrollOffset is Integer, visibleRows is Integer) to Boolean {
    //    println("check visible {row} {scrollOffset} {visibleRows}");
    row >= scrollOffset and row < scrollOffset + visibleRows;
}

public class Treecell is AbstractNode {
    public var tv is Treeview;
    public var tn is Treenode; 
    override var transform = bind translate(0, -tn.row * tv.cellHeight);
    var cellIsVisible = bind getCellIsVisible();
    override var visible = bind cellIsVisible; 
    protected var fg is Paint = bind getFg();
    public bound function isSelected to Boolean 
    {
        tv.selectionRow == tn.row
    }
    protected var bg is Paint = bind if (tv.selectionRow == tn.row) then tv.selectionBackground else getBg();

    public bound function getFg to Paint { tv.getFg(tn.row) }
    public bound function getBg to Paint { tv.getBg(tn.row, tn.column) }
    public bound function getCellIsVisible to Boolean {
        tv.isRowVisible(tn.row);
    }
    bound function css from (p is Paint) to String
    {
        var color = (p as ColorPaint).color;
        var str = color.toCss();
        return str;
    }
    protected bound function getValueContent to Node { null }
    override var internalContent = Group {
	content: 
	[Rectangle {
	     height: bind tv.cellHeight;
	     width: bind tv.cellWidth;
	     fillPaint: bind bg;
	 },
	 TransformNode {
	     tx: bind tv.indent *(tn.column+1);
	     content:
	     [TransformNode { 
	         tx: bind -tv.cellWidth / 2;
		 content: bind if (tn.isOpen) then tv.closeArrow(fg) else if (tn.canOpen) then tv.openArrow(fg) else null;
	     },
	     Text.Label {
		 transform: bind translate(if (tn.canOpen) then 6 else 0, 0);
		 font: bind tv.font;
		 foreground: bind fg;
		 background: null;
		 height: bind tv.cellHeight;
		 width: bind tv.cellWidth;
		 text: bind tn.label;
	     },
             Group {
                 content: bind getValueContent();
             }];
	 }]
    };
    function dumpCells to () {
        for (cell in tv.cells) {
            println("tn={cell.n}");
            println("cell={cell.cell} visibleInScene={cell.cell.visibleInScene}, parent={cell.cell.parent}");
            println("value={cell.cell.getValueContent()}");
        }
    }
    const onClick = 
	internalContent.observeMouseDown().subscribe(function from (e is MouseEvent) to () {
                //                println("row={tn.row} fg={fg}");
                //                dumpCells();
		const limit = -tv.cellWidth/2+tv.indent*(tn.column+1)+6;
		if (tn.canOpen and e.location.x < limit) {
		    if (not tn.isOpen) tn.open() else tn.close();
		}
                println("tn={tn} canOpen={tn.canOpen} children={tn.children.size()}");
		tv.selectionRow = tn.row;
		tv.onMouseDown(e);
	    });
    const onDrag = 
	internalContent.observeMouseDrag().subscribe(tv.onMouseDrag);
    const onUp = 
	internalContent.observeMouseUp().subscribe(tv.onMouseUp);

}

const MAX_DEPTH = 20;

class Content is Group, Scissored {
    override var contentBounds = bind scissorBounds;
}

public class Holder {
    public var cell is Treecell;
    public var n is Treenode;
}

public class Treeview is ResizableNode, Focusable, KeyboardInputHandler, Scrollable, Scissored {

    public var selectionBackground is Paint = 
	ColorPaint(Color.color(.4, .4, .4, 1));
    public var parentSelectionBackground is Paint = 
        ColorPaint(Color.color(.5, .5, .5, 1));
    public var selectionForeground is Paint = bind if focused then
	ColorPaint(Color.color(.9, .9, .9, 1)) else ColorPaint(Color.color(.77, .77, .77, 1));
    public var foreground is Paint = 
	ColorPaint(Color.color(.2, .2 , .2));
    
    const bgs = foreach (i in [0..<MAX_DEPTH]) ColorPaint(Color.gray(getBackgroundGray(i)));

    public var cellHeight is Number = 16;
    public readonly var cellWidth = bind width;

    public var indent = 6;

    const arrow is Polygon = Polygon {
	points: [-3.5, -4.5, -3.5, 4.5, 3.5, 0];
	fillPaint: ColorPaint(Color.WHITE);
    };

    public readonly var selectedTreenode is Treenode = bind rows[selectionRow];

    var nextSelection is Treenode;

    override function onKeyDown from (e is KeyboardEvent) to ()
    {
	if (e.keyCode == Keys.Down) {
	    selectionRow = Math.min(model.rowCount-1, selectionRow+1);
	} else if (e.keyCode == Keys.Up) {
	    selectionRow = Math.max(0, selectionRow-1);
	} else if (e.keyCode == Keys.Home) {
	    selectionRow = 0;
	} else if (e.keyCode == Keys.End) {
	    selectionRow = model.rowCount-1;
	} else if (e.keyCode == Keys.Left) {
	    if (selectedTreenode.isOpen) selectedTreenode.close();
	} else if (e.keyCode == Keys.Right) {
	    if (selectedTreenode.canOpen) selectedTreenode.open();
	}
    }

    public function pick from (y is Number) to Treenode 
    {
        const offset = y - (height/2 + scrollOffset * cellHeight);
        println("offset={offset}");
        const i = -(offset / cellHeight) as Integer;
        println("i={i}");
        return cells[i].cell.tn;
    }

    function scroll from (amount is Integer) to ()
    {
	scrollOffset = Math.max(0, Math.min(scrollOffset + amount, model.rowCount - visibleRows));
    }

    bound function closeArrow from (p is Paint) to Node { 
	TransformNode {
	    rz: -90;
	    content:
	    MeshNode {
		mesh: bind arrow.fillMesh.mesh;
		shader: bind effectLoader.loadPaintShader(p);
	    }
	}
    }

    bound function openArrow from (p is Paint) to Node { 
	MeshNode {
	    mesh: bind arrow.fillMesh.mesh;
	    shader: bind effectLoader.loadPaintShader(p);
	}
    }

    bound function getFg from (row is Integer) to Paint
    {
	if isSelected(row) then selectionForeground else foreground;
    }

    bound function getBg from (row is Integer, column is Integer) to Paint
    {
	if isSelected(row) then selectionBackground else getBackground(column);
    }

    bound function getBackground from (column is Integer) to Paint 
    {
	bgs[column]
    }

    bound function isSelected from (row is Integer) to Boolean
    {
	selectionRow == row
    }

    protected function getBackgroundGray
       from (indentLevel is Integer) 
       to Number
    {  
	const g = 0.8 - (2-(indentLevel mod 2)) * .1;
	return g;
    }	 

    var scrollOffset is Integer;
    var selectionRow is Integer on replace {
	if (nextSelection == null) {
	    model.selectionObserver.onNext(selectedTreenode);
	}
	if (selectionRow < scrollOffset) {
	    scrollOffset = selectionRow;
	} else if (selectionRow > scrollOffset+visibleRows) {
	    scrollOffset = selectionRow-visibleRows/2;
	}
    }

    public readonly var visibleRows = bind Math.max(1, (Math.round(height / cellHeight - 0.5) as Integer));

    var selectionListener is Disposable;
        
    public bound function isRowVisible from (row is Integer) to Boolean
    {
        checkVisible(row, scrollOffset, visibleRows);
    }

    public function select from (t is Treenode) to ()
    {
        println("SELECTING TREE NODE {t.label}");
        if (selectedTreenode <> t) {
            nextSelection = t;
        }
    }

    public var model is Treemodel on replace {
        selectionListener.dispose();
        selectionListener = model.selectionObserver.subscribe(function from (t is Treenode) to () {
                println("TREEVIEW SELECTION OBSERVER : {t}");
                select(t);
            });
    }

    protected var rows is Treenode[];

    protected var cells is Holder[] = bind foreach (i in [0..<rows.size()]) 
	Holder { 
          n: bind rows[i];
	  override var cell = bind createCell(n);
        }

    public readonly var selectedTreecell is Treecell = bind cells[selectionRow].cell;

    public function getDragCell to Treecell {
	Treecell { tv: this, tn: selectedTreenode, transform: Mat4.<<1>> };
    }
      
    protected function createCell from (tn is Treenode) to Treecell
    {
	Treecell { tv: this, tn: tn };
    }

    public function getView from (tn is Treenode) to Treecell {
	for (h in cells) {
	    if (h.cell.tn == tn) return h.cell
	}
	return null;
    }

    var modelSelection is Treenode on replace { model.selectionObserver.onNext(modelSelection) }

    override function preupdate {
	model.update();
	if (nextSelection <> null) {
	    const row = nextSelection.row;
	    nextSelection = null;
	    selectionRow = row;
            model.open(selectedTreenode);
            println("OPENING: {selectedTreenode.label}");
	}
        modelSelection = selectedTreenode;
	const i = scrollOffset;
	const j = scrollOffset + visibleRows;
	//const newRows = model.getRows(i, j+1);
	const newRows = model.getRows(0, model.rowCount);
	if (rows <> newRows) {
	    rows = newRows;
	}
	super.preupdate();
    }

    var treeBg is Paint = bind bgs[0];

    //override var contentBounds = bind Bounds.boundsFromRect(width, height);
    //override var scissorBounds = bind contentBounds;

    override var internalContent = Group {
	content:
	[Rectangle {
	    height: bind height;
	    width: bind width;
	    fillPaint: bind treeBg;
	 },
	 TransformNode {
	     ty: bind height/2 - cellHeight/2 + scrollOffset * cellHeight;
	     content: bind foreach (c in cells) c.cell;
	 }]
    };

	

    var font = bind layoutEngine.createFont("font-size:10;font-family:Lucida Grande;font-weight:bold");
	
    const onWheel = 
	internalContent.observeMouseWheel().subscribe(function from (event is MouseWheelEvent) to () {
		const y = event.scroll.y as Integer;
		scroll(y);
	    });

    public function onMouseDrag from (e is MouseEvent) to () {}
    public function onMouseUp from (e is MouseEvent) to () {}
    public function onMouseDown from (e is MouseEvent) to () {}

    override public bound function getTx to Number { 0.0 }
    override public bound function getSx to Number { 1.0 }
    override public bound function getTy to Number 
    { 
        scrollOffset / (model.rowCount as Number);
    }
    override public bound function getSy to Number 
    { 
        Math.min(visibleRows / ((model.rowCount) as Number), 1.0);
    }
    override public function setX from (tx is Number, sx is Number) to ()
    {
    }
    override public function setY from (ty is Number, sy is Number) to ()
    {
        scrollOffset = Math.round(ty * model.rowCount) as Integer;
    }
}