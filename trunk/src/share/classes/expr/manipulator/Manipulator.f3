package expr.manipulator;
import f3.media.scene.*;
import f3.media.input.*;
import f3.util.*;
import f3.util.Observer.DefaultObserver;
import f3.math.*;
import f3.math.LinearMath.*;
import java.lang.Math;
import expr.undo.*;

public class Manipulator is AbstractNode 
{
    const assetUrl = "{__DIR__}manipulator_full_v1.ma";
    const model is Ma.Model = Ma.Model { url: assetUrl };

    const undoList = UndoList {};

    public var target is TransformNode on replace old {

        if (old <> null) {
            undoList.removeTarget(&old.tx);
            undoList.removeTarget(&old.ty);
            undoList.removeTarget(&old.tz);
            
            undoList.removeTarget(&old.rx);
            undoList.removeTarget(&old.ry);
            undoList.removeTarget(&old.rz);
            
            undoList.removeTarget(&old.sx);
            undoList.removeTarget(&old.sy);
            undoList.removeTarget(&old.sz);

            undoList.removeTarget(&old.px);
            undoList.removeTarget(&old.py);
            undoList.removeTarget(&old.pz);
        } 

        if (target <> null) {
            undoList.addTarget("tx", &target.tx);
            undoList.addTarget("ty", &target.ty);
            undoList.addTarget("tz", &target.tz);

            undoList.addTarget("rx", &target.rx);
            undoList.addTarget("ry", &target.ry);
            undoList.addTarget("rz", &target.rz);
            
            undoList.addTarget("sx", &target.sx);
            undoList.addTarget("sy", &target.sy);
            undoList.addTarget("sz", &target.sz);
            
            undoList.addTarget("px", &target.px);
            undoList.addTarget("py", &target.py);
            undoList.addTarget("pz", &target.pz);
        }
    }

    public var viewer is ExaminerViewer; 
    
    public var scene is Scene;

    public var viewSize is Number = 1.0;

    public function expand to ()
    {
        viewSize *= 1.1;
    }

    public function shrink to ()
    {
        viewSize /= 1.1;
    }

    public readonly var viewScale = bind {
        var s = if (scene.camera is Camera2D) then 10.0 else centerDistance / 100;
        if (s <> 0) then s*viewSize else 1.0;
    }

    const modelGroup is Group = Group {
        transform: bind LinearMath.uniformScale(viewScale) 
        content: bind model.getSpatialRoot()
    };

    bound var t = translate(target.tx, target.ty, target.tz);
    bound var p = translate(target.px, target.py, target.pz);
    bound var r = rotate(target.rx, target.ry, target.rz);

    override var internalContent = Group {
        transform: bind if (target == null) then Mat4.<<1>> else target.parentToSceneTransform * t * p * r;
        content: bind modelGroup;
    };

    function doScaleAll from (event is MouseEvent) to ()
    {
        const s = 1.0 + event.screenDrag.x / scene.width * 0.7;
        applyScale(s, s, s);
    }

    function doScale from (event is MouseEvent, axis is Vec3) to ()
    {
        const m = event.picked.node.toSceneTransform;
        const scenePt = m.getTranslation();
        const off = Point3.<<0>> + axis;
        const p0 = scene.camera.toScreen(scenePt);
        const p1 = scene.camera.toScreen(m * off);
        const p2 = new Point3(event.screenx - event.screenDrag.x, 
                              event.screeny + event.screenDrag.y,
                              0);
        const p3 = new Point3(event.screenx, event.screeny, 0);
        const v0 = p1 - p0;
        const v1 = p2 - p0;
        const v2 = p3 - p0;
        const proj_s = Math.abs(v1.dot(v0) / v0.length());
        const proj_t = Math.abs(v2.dot(v0) / v0.length());
        const v = axis  * (proj_t / proj_s);
        applyScale(v.x, v.y, v.z);
    }
    
    function applyScale from (x is Number, y is Number, z is Number) to () 
    {
        if (x <> 0) target.sx *= x;
        if (y <> 0) target.sy *= y;
        if (z <> 0) target.sz *= z;
    }

    var lastMoveAllPoint is Point3[];
    var screenPlane is Plane;

    function doTranslateAll from (event is MouseEvent) to ()
    {
	const worldTransform = target.toSceneTransform;
        //const pt = (worldTransform * p).getTranslation();
        const pt = event.sceneLocation;
        const ray = scene.camera.getPickRay(event.screenx, event.screeny);
        var plane is Plane;
        if (lastMoveAllPoint == []) {
            screenPlane = plane = Plane {
                point: pt;
                normal: -ray.direction;
            } 
        } else {
            plane = screenPlane;
        }
        const hit = plane.intersectRay(ray);
        if (hit == null) {
            return;
        }
        const toLocal = target.parentToSceneTransform.inverse();
        const p1 = toLocal * hit.point;
        if (lastMoveAllPoint == []) {
            lastMoveAllPoint = [p1];
            return;
        }
        const p2 = lastMoveAllPoint[0];
        const d = p1 - p2;
        lastMoveAllPoint = [p1];
        applyTranslate(d);
    }

    function doTranslate 
        from (event is MouseEvent, 
              axis is Vec3,
              worldTransform is Mat4) 
        to ()
    {
        if (event.screenDrag == Vec2.<<0>>) {
            return;
        }
        const camera = scene.camera;
        var sceneStartPos = worldTransform.getTranslation();
        const startPos is Point3 = 
            camera.toScreen(sceneStartPos);
        const endPos is Point3 = 
            camera.toScreen(worldTransform * (Point3.<<0>> + axis));
        const screenDir = (endPos - startPos).normalize();
        const dragDir = new Vec3(event.screenDrag.x, -event.screenDrag.y, 0);
        const pt = startPos + (screenDir * dragDir.dot(screenDir));
        const sceneEndPos = camera.toScene(pt);
        const fromScene = target.parent.toSceneTransform.inverse();
        //        const d = (fromScene * sceneEndPos) - (fromScene * sceneStartPos);
        const v = sceneEndPos - sceneStartPos;
        const d = fromScene * v;
        applyTranslate(d);
    }

    function applyTranslate from (d is Tuple3) to ()
    {
        if (isPivotMode) {
            target.px += d.x;
            target.py += d.y;
            target.pz += d.z;
        } else {
            target.tx += d.x;
            target.ty += d.y;
            target.tz += d.z;
        }
    }

    var lastMouse is Ray3[];
    
    function doRotate from (event is MouseEvent, axis is Vec3) to ()
    {
        const worldTransform = target.getScalePivotInScene();
        const translation = worldTransform.getTranslation();
        const worldAxis = worldTransform * axis;
        const planeNormal = worldAxis;
        const plane = Plane {
            normal: planeNormal;
            point: translation;
        }
        const endRay = scene.camera.getPickRay(event.screenx, event.screeny);
        if (lastMouse == []) {
            lastMouse = [endRay];
            return;
        }
        const startRay = lastMouse[0];
        const hitStart = plane.intersectRay(startRay);
        const hitEnd = plane.intersectRay(endRay);
        if (hitStart == null or hitEnd == null) {
            return;
        }
        const startPos = hitStart.point;
        const endPos = hitEnd.point;
        const originToStart = (startPos - translation).normalize();
        const originToEnd = (endPos - translation).normalize();
        const rotCrossStart = worldAxis.cross(originToStart).normalize();
        const rotCrossEnd = worldAxis.cross(originToEnd).normalize();
        const startCrossEnd = rotCrossStart.cross(rotCrossEnd).normalize();
        const dot = Math.min(Math.max(originToStart.dot(originToEnd), 0),  1);
        const radians = Math.acos(dot);
        const angle = Math.toDegrees(radians * Math.signum(worldAxis.dot(startCrossEnd)));
        if (angle == 0) {
            return;
        }
        lastMouse = [endRay];
        const sceneToLocal = worldTransform.inverse();
        const localAxis = sceneToLocal * worldAxis;
        const currentRotation = quat(target.rx, target.ry, target.rz);
        const localRotation = quat(angle, localAxis.normalize());
        const angles = (currentRotation * localRotation).toAngles();
        target.rx = angles.x;
        target.ry = angles.y;
        target.rz = angles.z;
    }

    const onMouseUp = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            MasterUndoable.commit();
        }
    }

    const onMouseDownTranslate = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            lastMoveAllPoint = [];
            enterTranslate();
        }
    }

    const onMouseDownRotate = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            lastMouse = [];
            enterRotate();
        }
    }

    const onMouseDownScale = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            enterScale();
        }
    }

    const onScaleAll = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doScaleAll(event);
        }
    }

    const onScaleX = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doScale(event, Vec3.X_AXIS);
        }
    }

    const onScaleY = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doScale(event, Vec3.Y_AXIS);
        }
    }

    const onScaleZ = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doScale(event, Vec3.Z_AXIS);
        }
    }

    const onRotateX = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doRotate(event, Vec3.X_AXIS);
        }
    }

    const onRotateY = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doRotate(event, Vec3.Y_AXIS);
        }
    }

    const onRotateZ = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doRotate(event, Vec3.Z_AXIS);
        }
    }

    const onMoveAll = DefaultObserver of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doTranslateAll(event);
        }
    }

    const onMoveX = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doTranslate(event, Vec3.X_AXIS, moveX.toSceneTransform)
        }
    }

    const onMoveY = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doTranslate(event, Vec3.Y_AXIS, moveY.toSceneTransform)
        }
    }

    const onMoveZ = Observer of MouseEvent {
        override function onNext from (event is MouseEvent) to () 
        {
            doTranslate(event, Vec3.Z_AXIS, moveZ.toSceneTransform)
        }
    }

    var moveX is Node;
    var moveY is Node;
    var moveZ is Node;

    var rotateX is Node;
    var rotateY is Node;
    var rotateZ is Node;
    var rotateGuideX is Node;
    var rotateGuideY is Node;
    var rotateGuideZ is Node;
    var scaleX is Node;
    var scaleY is Node;
    var scaleZ is Node;
    var scaleAll is Node;
    var rotateAll is Node;
    var moveAll is Node;

    var allGadgets is Node[];

    function createHandlers 
    {
        moveX = internalContent.lookup("MoveX");
        moveX.blocksPointer = true;
        moveX.observeMouseDrag().subscribe(onMoveX);
        moveY = internalContent.lookup("MoveY");
        moveY.blocksPointer = true;
        moveY.observeMouseDrag().subscribe(onMoveY);
        moveZ = internalContent.lookup("MoveZ");
        moveZ.blocksPointer = true;
        moveZ.observeMouseDrag().subscribe(onMoveZ);
        moveAll = internalContent.lookup("MoveAll");
        moveAll.observeMouseDrag().subscribe(onMoveAll);

        const moveGuideX = internalContent.lookup("GuideMoveX");
        const moveGuideY = internalContent.lookup("GuideMoveY");
        const moveGuideZ = internalContent.lookup("GuideMoveZ");
        moveGuideX.observeMouseDrag().subscribe(onMoveX);
        moveGuideY.observeMouseDrag().subscribe(onMoveY);
        moveGuideZ.observeMouseDrag().subscribe(onMoveZ);

        for (i in [moveX, moveY, moveZ, moveAll, moveGuideX, moveGuideY, moveGuideZ]) {
            i.observeMouseDown().subscribe(onMouseDownTranslate)
        }

        rotateX = internalContent.lookup("RotateX");
        rotateY = internalContent.lookup("RotateY");
        rotateZ = internalContent.lookup("RotateZ");

        rotateGuideX = internalContent.lookup("GuideRotateX");
        rotateGuideY = internalContent.lookup("GuideRotateY");
        rotateGuideZ = internalContent.lookup("GuideRotateZ");

        rotateGuideX.observeMouseDrag().subscribe(onRotateX);
        rotateGuideY.observeMouseDrag().subscribe(onRotateY);
        rotateGuideZ.observeMouseDrag().subscribe(onRotateZ);
        rotateAll = internalContent.lookup("RotateAll");

        for (i in [rotateX, rotateY, rotateZ, rotateAll, rotateGuideX, rotateGuideY, rotateGuideZ]) {
            i.observeMouseDown().subscribe(onMouseDownRotate)
        }

        scaleX = internalContent.lookup("ScaleX");
        scaleY = internalContent.lookup("ScaleY");
        scaleZ = internalContent.lookup("ScaleZ");
        scaleAll = internalContent.lookup("ScaleAll");

        scaleX.observeMouseDrag().subscribe(onScaleX);
        scaleY.observeMouseDrag().subscribe(onScaleY);
        scaleZ.observeMouseDrag().subscribe(onScaleZ);
        scaleAll.observeMouseDrag().subscribe(onScaleAll);

        for (i in [scaleX, scaleY, scaleZ, scaleAll]) {
            i.observeMouseDown().subscribe(onMouseDownScale)
        }

        for (n in [moveX, moveY, moveZ, moveAll, rotateGuideX, rotateGuideY, rotateGuideZ, scaleX, scaleY, scaleZ]) {
            n.observeMouseUp().subscribe(onMouseUp);
        }
        allGadgets = [/*moveX, moveY, moveZ, rotateX, rotateY, rotateZ, */rotateGuideX, rotateGuideY, rotateGuideZ, rotateAll, moveAll, /*scaleX, scaleY, scaleZ,*/ scaleAll];
        enterTranslate();
        internalContent.foldLeft((), function from (_ is (), n is Node) to () {
                if (n.blocksPointer) {
                    n.cursor = Cursor.Default;
                }
            });
    }

    var centerDistance is Number = 1.0;

    override function update 
    {
        centerDistance = scene.camera.distanceTo(target.toSceneTransform.getTranslation());
        super.update();
        if (moveX == null) createHandlers();
        if (not (scene.camera is Camera2D)) {
            if (was2d) {
                was2d = false;
                rotateGuideY.visible = ry;
                rotateGuideX.visible = rx;
                rotateZ.visible = rz;
                scaleZ.visible = sz;
                moveZ.visible = tz;
            }
        } else if (scene.camera is Camera2D) {
            if (not was2d) {
                check2d();
            }
        }
    }   

    function hideAll 
    {
        for (i in allGadgets) i.visible = false;
    }

    var was2d is Boolean;
    var rx is Boolean;
    var ry is Boolean;
    var rz is Boolean;
    var sz is Boolean;
    var tz is Boolean;

    function check2d to ()
    {
        if (scene.camera is Camera2D) {
            was2d = true;
            rx = rotateGuideX.visible;
            ry = rotateGuideY.visible;
            rz = rotateZ.visible;
            sz = scaleZ.visible;
            tz = moveZ.visible;
            rotateGuideY.visible = false;
            rotateGuideX.visible = false;
            rotateZ.visible = false;
            scaleZ.visible = false;
            moveZ.visible = false;
        }
    }

    var isPivotMode = false;

    public function enterPivotMode 
    {
        enterTranslate();
        isPivotMode = true;
        for (i in [rotateX, rotateY, rotateZ, scaleX, scaleY, scaleZ]) i.visible = false;
        check2d()
    }

    public function exitPivotMode 
    {
        for (i in [rotateX, rotateY, rotateZ, scaleX, scaleY, scaleZ]) i.visible = true;
        isPivotMode = false;
        check2d()
    }

    function enterTranslate 
    {
        hideAll();
        for (i in [moveX, moveY, moveZ, moveAll]) i.visible = true;
        check2d()
    }

    function enterRotate 
    {
        hideAll();
        for (i in [rotateX, rotateY, rotateZ, rotateGuideX, rotateGuideY, rotateGuideZ, rotateAll]) i.visible = true;
        check2d()
    }

    function enterScale 
    {
        hideAll();
        for (i in [scaleX, scaleY, scaleZ, scaleAll]) i.visible = true;
        check2d()
    }
}


