package expr;
import expr.undo.*;
import expr.prog.Program;
import f3.media.scene.*;
import f3.media.scene.KeyFrame.*;

class KeyTarget of a {
    public var ch is Channel of a;
    public var k is Key of a;
}

public class ChannelBoxesGroup is TimeGroup {
    public const target is ResourceTarget;
    const undoList0 = UndoList {};
    postinit {
        undoList0.addTarget("content", &content);
    }
}

public class ChannelBoxGroup is TimeGroup, ChannelBox {
    public var n_id is Integer;
    public var $useLiteralId is Boolean;
    public const keyMap = new java.util.TreeMap of (Duration, java.util.List of (KeyTarget of Object));
    public var keyTimes is Duration[];

    public function resolveChannel from (id is String) to Channel of Number 
    {
        lookup(id) as Channel of Number;
    }

    public function moveKeyTo from (src is Duration, target is Duration) to Duration
    {
        const ks = keyMap.get(src);
        if (ks <> null) {
            for (k in ks) {
                k.k = k.ch.moveKey(k.k, target-src);
            }
            return target;
        }
        return src;
    }

    override function update from (sceneTime is Duration) to ()
    {
        super.update(sceneTime);
        updateKeyMap();
    }

    function updateKeyMap to () 
    {
        keyMap.clear();
        for (n in content) {
            if (n is Channel of Object) {
                const ch = n as Channel of Object;
                for (k in ch.keys) {
                    const j = ch.transform * k.position;
                    var list = keyMap.get(j);
                    if (list == null) {
                        list = new java.util.LinkedList of KeyTarget of Object();
                        keyMap.put(j, list);
                    }
                    list.add(KeyTarget of Object {k: k, ch: ch});
                }
            }
        }
        keyTimes = foreach (x in keyMap.keySet()) x;
    }
}


public interface ResourceTarget {
    public var url is String;
    public var programs is Program[];
    public var $useLiteralId is Boolean = false;
    public var displayName is String;

    //    public function getChannels to (Channel of Number)[] { [] }

    public function resolveChannel from (id is String) to Channel of Number
    {
        channelBoxes.lookup(id) as Channel of Number;
    }

    public const channelBoxes is ChannelBoxesGroup = ChannelBoxesGroup {
        target: this;
        id: bind "channelBox:{url}";
    }

    public function findTarget from (id is String) to Object 
    {
        if (id == "") then this else null;
    }

    var idCount = 1;

    public function createChannelBox from () to ChannelBoxGroup {
        createChannelBox(idCount);
    }

    public function createChannelBox from (n_id is Integer) to ChannelBoxGroup {
        idCount = n_id+1;
        var g = ChannelBoxGroup {
            n_id: n_id;
            override var id = bind "{channelBoxes.id} Clip {n_id}";
        }
        g.content = createChannels(g);
        return g;
    }

    protected function createChannels from (parent is ChannelBoxGroup) to (Channel of Number)[];

    public function addChannelBox to ChannelBoxGroup
    {
        var result = createChannelBox();
        insert result into channelBoxes.content;
        return result;
    }

    public function addChannelBox from (n_id is Integer) to ChannelBoxGroup
    {
        var result = createChannelBox(n_id);
        insert result into channelBoxes.content;
        return result;
    }

}

        
