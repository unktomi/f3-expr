package expr;
import f3.media.scene.*;
import expr.Treeview.*;
import expr.prog.Expression;
import expr.prog.Expression.Member;
import f3.reflect.*;
import expr.AssetTree.*;
import expr.Context.*;
import expr.Names.*;
import expr.undo.*;

public class Context {
    public var parent is Context;
    public readonly var name is String;
    public var contextType is F3Type;
    public bound function getContent to Context[]  { [] }
    public function updateParent to () {
        for (c in getContent()) {
            c.parent = this;
            c.updateParent();
        }
    }
    public function fullName to String 
    {
        var p = this;
        var r = "";
        while (p <> null) {
            r = "|{p.name}{r}";
            p = p.parent;
        }
        return r;
    }   

    public function resolve from (path is String) to Context 
    {
        null; // @TODO
    }

}

public abstract class GroupContext is Context {
    public var content is Context[];
    const undoList = UndoList {};
    init {
        undoList.addTarget("content", &content);
    }
    public override bound function getContent to Context[]  { content }

}

public class CallContext is Context {
    public var enclosingMethod is F3FunctionMember;
    public var localVars is LocalVarContext[];
    public override bound function getContent to Context[] { 
        [if enclosingMethod.isStatic() then null else ThisContext { call: this },
         foreach (i in [0..enclosingMethod.getType().minArgs()]) 
         { 
             ParameterContext {
                 call: this;
                 index: i;
             }
         },
         localVars];
    }
}

public abstract class ResourceObjectContext is Context {
    public bound function getTarget to ResourceTarget;
}

public class ResourceNodeContext is ResourceObjectContext {
    override bound function getTarget to ResourceTarget { resource }
    public var resource is ResourceNode;
    override var name = bind "{formatName(resource.id)} [Scene]";
    var members = bind Expression.introspect(Reflect.getType("f3.media.scene.TransformNode") as F3ClassType);
    public override bound function getContent to Context[] { 
        foreach (x in members) if (not x.name.startsWith("observe")) then null else MemberContext { member: x, parent: this }
    }
}

public class ResourceTimeNodeContext is ResourceObjectContext {
    override bound function getTarget to ResourceTarget { resource }
    public var resource is ResourceTimeNode;
    override var name = bind "{formatName(resource.id)} [Timeline]";
    var members = bind Expression.introspect(Reflect.getType("f3.media.scene.TimeNode") as F3ClassType);
    public override bound function getContent to Context[] { 
        foreach (x in members) if (not x.name.startsWith("observe")) then null else MemberContext { member: x, parent: this }
    }
}

public class AssetContext is Context {
    public var asset is Asset;
    override var name = bind asset.name;
    override public bound function getContent to Context[] { foreach (x in asset.containedAssets) AssetContext { asset: x, parent: this } }
}

public class ClosureVarContext is Context {
    public var varType is TypeAsset;
    public var varName is String = "variable";
    public var value is Object;
    public var isEvent is Boolean;
    override var name = bind "{varName} [{varType.name}]";
    override function fullName to String 
    {
        "{parent.fullName()}|{varName}";
    }
    function getMembers from (varType is F3Type) to Member[] {
        const result = if (varType is F3ClassType) then Expression.introspect(varType as F3ClassType) else [];
        println("members of {varType} => {result}");
        return result;
    }
    function getContentFromType(varType is F3Type) to Context[] 
    {
        const results = foreach (m in getMembers(varType) where m.name.startsWith("observe")) MemberContext { member: m, parent: this } 
        println("content from type of {varType} => {results}");
        return results;
    }
    override public bound function getContent to Context[] 
    { 
        getContentFromType(varType.t);
    }
}

public class VarContext is Context {
    public var call is CallContext;
    public var varType is F3Type;
    var members = bind getMembers(varType);
    function getMembers from (varType is F3Type) to Member[] {
        const result = if (varType is F3ClassType) then Expression.introspect(varType as F3ClassType) else [];
        println("members of {varType} => {result}");
        return result;
    }
    function getContentFromType(varType is F3Type) to Context[] 
    {
        const results = foreach (m in members) MemberContext { member: m, parent: this } 
        println("content from type of {varType} => {results}");
        return results;
    }
    override public bound function getContent to Context[] 
    { 
        getContentFromType(varType);
    }
}

public class ParameterContext is VarContext {
    public var index is Integer;
    override var contextType = bind call.enclosingMethod.getType().getArgumentType(index); 
}

public class ThisContext is VarContext {
    override var contextType = bind call.enclosingMethod.getDeclaringClass();
}

public class LocalVarContext is Context {
}

public class MemberContext is GroupContext {
    public var member is Member;
    override var name = bind Names.formatName(member.name);
    /*
    public override bound function getContent to Context[] { 
        [foreach (x in member.getMembers()) MemberContext { member: x }, content]
    }
    */
}

public class ContextTreemodel is Treemodel {
    public var rootContext is GroupContext;
    public var selectedContext is Context;
    public function reset to () 
    {
        rootContext.content = [];
        tn = root;
    }
    var tn is Treenode on replace {
        selectedContext = (tn as ContextTreenode).context;
        var p = tn;
        while (p <> null and not ((p as ContextTreenode).context is GroupContext)) {
            p = p.parent;
        }
        selectedGroupContext = (p as ContextTreenode).context as GroupContext;
        p = tn;
        var m is MemberContext = null;
        while (p <> null) {
            var j = (p as ContextTreenode).context;
            m = if (j is MemberContext) then (j as MemberContext) else null;
            if (m <> null) {
                break;
            }
            p = p.parent;
        }
        selectedMemberContext = m;
        println("selected context => {selectedContext}");
        p = tn;
        var o is ResourceObjectContext;
        while (p <> null) {
            var j = (p as ContextTreenode).context;
            o = if (j is ResourceObjectContext) then (j as ResourceObjectContext) else null;
            if (o <> null) {
                break;
            }
            p = p.parent;
        }
        selectedObjectContext = o;
        println("selected object context => {o}: {o.getTarget()}");
    }
    public var selectedObjectContext is ResourceObjectContext;
    public var selectedGroupContext is GroupContext;
    public var selectedMember is Member = bind selectedMemberContext.member;
    public var selectedMemberContext is MemberContext;
    override var root = ContextTreenode { context: bind rootContext };
    const disp = selectionObserver.subscribe(function from (tn is Treenode) to () {
            this.tn = tn;
        });
}

public class ContextTreenode is Treenode {
    public var context is Context;
    override var label = bind context.name;
    var content = bind context.getContent();
    override var canOpen = bind sizeof content > 0;
    override var children = bind foreach (c in content) ContextTreenode { context: bind c, parent: this }
}