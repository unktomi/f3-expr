package expr;
import f3.util.*;
import f3.lang.Ref;
import f3.lang.AbstractRef;
import f3.lang.AbstractObservableRef;
import f3.lang.ObservableRef;
import f3.media.scene.*;
import expr.Treeview.*;
import expr.prog.Expression;
import expr.prog.Program;
import expr.prog.Expression.Member;
import expr.prog.Expression.Function;
import f3.reflect.*;
import expr.AssetTree.*;
import expr.Context.*;
import expr.Names.*;
import expr.undo.*;
import org.f3.runtime.Foldable;


public interface ProgramContext {
    public var program is Program;
}

public class Context is Foldable of Context {
    public var selected is Boolean = true;
    public var parent is Context;
    public readonly var name is String;
    public readonly var label is String = bind name;
    public var contextType is F3Type;
    public bound function getContent to Context[]  { [] }

    public readonly var event is MemberContext = bind if this is MemberContext then this as MemberContext else parent.event;

    override function foldLeft of a from (z is a, f is function from (a, Context) to a) to a
    {
        var r = f(z, this);
        for (x in getContent()) {
            r = x.foldLeft(r, f);
        }
        return r;
    }

    override function foldRight of a from (z is a, f is function from (Context, a) to a) to a 
    {
        var r = z;
        const xs is Context[] = getContent().reverse();
        for (x in xs) {
            r = x.foldRight(r, f);
        }
        return f(this, r);
    }

    public function updateParent to () {
        for (c in getContent()) {
            c.parent = this;
            c.updateParent();
        }
    }
    public function fullName to String 
    {
        var p = this;
        var r = "";
        while (p <> null) {
            r = "|{p.name}{r}";
            p = p.parent;
        }
        return r;
    }   

    function getRoot to Context 
    {
        var p is Context = this;
        while (p.parent <> null) {
            p = p.parent;
        }
        return p;
    }

    public function resolve from (path0 is String) to Context 
    {
        const r = resolve0(path0);
        println("resolve {path0} in {name} => {r}");
        return r;
    }

    function resolve0 from (path0 is String) to Context 
    {
        var path = path0;
        if (parent == null) {
            if (path == name or path == "|{name}") {
                return this;
            }
            if (path.startsWith("|{name}|")) {
                path = path.substring(name.length()+2);
            }
        } else if (path.startsWith("|")) {
            return getRoot().resolve(path);
        }
        for (x in getContent()) {
            println("checking `{path}` against {x.name} in {name}");
            if (path == x.name) {
                return x;
            }
            if (path.startsWith("{x.name}|")) {
                return x.resolve(path.substring(x.name.length()+1));
            }
        }
        return null;
    }

    public function resolveNodeContext from (n is ResourceNode) to ResourceNodeContext
    {
        var result is ResourceNodeContext;
        foldLeft((), 
                 function from (_ is (), c is Context) to ()
                 {
                     if (c is ResourceNodeContext) {
                         const x = (c as ResourceNodeContext);
                         if (x.resource == n) {
                             result = x;
                         }
                     }
                 });
        return result;
    }
    public function resolveTimeNodeContext from (n is ResourceTimeNode) to ResourceTimeNodeContext
    {
        var unwrapped is TimeNode;
        if (n is ResourceTimeNodeWrapper) {
            unwrapped = (n as ResourceTimeNodeWrapper).wrapped;
        }
        println("resolve context {n.id}, unwrapped={unwrapped.id}");
        var result is ResourceTimeNodeContext;
        foldLeft((), 
                 function from (_ is (), c is Context) to ()
                 {
                     if (c is ResourceTimeNodeContext) {
                         const x = (c as ResourceTimeNodeContext);
                         if (x.resource.id == n.id) {
                             result = x;
                         } else if (x.resource is ResourceTimeNodeWrapper) {
                             const u = (x.resource as ResourceTimeNodeWrapper).wrapped;
                             if (u == unwrapped) {
                                 result = x;
                             }
                             println("x.unwrapped={u.id} {u == unwrapped}");
                         }
                     }
                 });
        return result;
    }
    override function toString to String {
        "{getClass()} {fullName()}";
    }
}

public abstract class GroupContext is Context {
    public var content is Context[];
    const undoList = UndoList {};
    init {
        undoList.addTarget("content", &content);
    }
    public override bound function getContent to Context[]  { content }

    public function deleteContent from (c is Context) to ()
    {
        delete c from content;
    }

}

public class CallContext is Context {
    public var enclosingMethod is F3FunctionMember;
    public var localVars is LocalVarContext[];
    public override bound function getContent to Context[] { 
        [if enclosingMethod.isStatic() then null else ThisContext { call: this },
         foreach (i in [0..enclosingMethod.getType().minArgs()]) 
         { 
             ParameterContext {
                 call: this;
                 index: i;
             }
         },
         localVars];
    }
}

public interface ResourceObjectContext {
    public bound function getTarget to ResourceTarget;
    public function createProgram from (member is Member) to MemberContext { null }
    public function getMembers to Member[] { [] }
}

// hack
function uniquify from (xs is Member[]) to Member[]
{
    const set = new java.util.HashSet of String;
    foreach (x in xs where set.add(x.name)) x
}

function createSubResourceNodeContext from (parent is Context, x is Node, r is ResourceNode) to SubResourceNodeContext
{
    if (x is MeshNode) then MeshNodeContext { parent: parent, mesh: x as MeshNode, resource: r }
    else SubResourceNodeContext { parent: parent, node: x, resource: r }
}

public class SubResourceNodeContext is ResourceNodeContext {
    public var node is Node;
    override var name = bind "{formatName(node.id)} [{if (node is MeshNode) then "Mesh" else "Node"}]";
    function asGroup from (n is Node) to Group 
    {
        if (n is Group) then n as Group else null
    }   
    override protected var members = bind uniquify(Expression.introspect(Reflect.getType("f3.media.scene.Node") as F3ClassType));
    override var containedNodes = bind foreach (x in asGroup(node).content) createSubResourceNodeContext(this, x, resource)
}

public class MeshNodeContext is SubResourceNodeContext {
    public var mesh is MeshNode;
    override var node = bind mesh;
    override var name = bind "{formatName(node.id)} [Mesh]";
    override protected var members = bind uniquify(Expression.introspect(Reflect.getType("materials.Cg$Material") as F3ClassType));
    override var containedNodes = [];
}

public class ResourceNodeContext is GroupContext, ResourceObjectContext {
    public var resource is ResourceNode;
    override bound function getTarget to ResourceNode { resource }
    protected function getTargetPath to String { "" }
    public override function deleteContent from (c is Context) to ()
    {
        if (c is MemberContext) {
            const pc = c as MemberContext;
            pc.program.reset();
            delete pc from programs;
            delete pc.program from getTarget().programs;
        }
        super.deleteContent(c);
        
    }

    public override function createProgram from (member is Member) to MemberContext
    {
        var result = MemberContext { member: member, parent: this };
        insert result into programs;
        println("created member => {programs} => {getContent()}");
        /*
        insert EventResourceNode {
            imageLoader: resource.imageLoader;
            pathFactory: resource.pathFactory;
            layoutEngine: resource.layoutEngine;
            movieLoader: resource.movieLoader;
            soundLoader: resource.soundLoader;
            effectLoader: resource.effectLoader;
            webBrowserFactory: resource.webBrowserFactory;
            id: bind "{resource.id}#{member.name}";
            event: result;
        } into resource.events;
        */
        return result;
    }

    public override function getMembers to Member[] 
    {
        return memberCtxs;
    }

    override var name = bind "{resource.displayName} [Scene]";
    protected var typeName = "expr.ResourceNode";
    protected var members = 
        bind uniquify(Expression.introspect(Reflect.getType(typeName) as F3ClassType));

    public readonly var memberCtxs = bind foreach (x in members) if (not x.name.startsWith("observe")) then null else x;
    protected var containedNodes = bind foreach (x in resource.content) if (x is ResourceNode) then null else createSubResourceNodeContext(this, x, resource);

    var programs is MemberContext[];

    public override bound function getContent to Context[] { 
        [programs, containedNodes, content]
    }
}

public class ResourceTextFieldContext is ResourceNodeContext {
    override var typeName = "expr.ResourceTextField";
    override var containedNodes = [];
    override var name = bind "{resource.displayName} [Text Input]";
    override var members = 
        bind foreach (m in uniquify(Expression.introspect(Reflect.getType(typeName) as F3ClassType))) 
    {
        if (m.m.getDeclaringClass().getName().equals(typeName)) then m else null
    }
}

public class ResourceLabelContext is ResourceNodeContext {
    override var typeName = "expr.ResourceLabel";
    override var containedNodes = [];
    override var name = bind "{resource.displayName} [Text Output]";
    override var members = 
        bind foreach (m in uniquify(Expression.introspect(Reflect.getType(typeName) as F3ClassType))) 
    {
        if (m.m.getDeclaringClass().getName().equals(typeName)) then m else null
    }
}

public class ResourceTimeNodeContext is GroupContext, ResourceObjectContext {
    override bound function getTarget to ResourceTimeNode { resource }
    bound var memberCtxs is Member[] = foreach (x in members) if (not x.name.startsWith("observe")) then null else x;
    override var name = bind "{resource.displayName} [Timeline]";
    var members = bind Expression.introspect(Reflect.getType("f3.media.scene.TimeNode") as F3ClassType);
    var myContent = bind [if (resource is ResourceTimeNodeWrapper) then { var w = resource as ResourceTimeNodeWrapper; foreach (g in w.unwrapContent()) if (g is ResourceTimeNode) then ResourceTimeNodeContext {  resource: g as ResourceTimeNode} else null } else null];

    var programs is MemberContext[];
    public var resource is ResourceTimeNode;
    public override function createProgram from (member is Member) to MemberContext
    {
        var result = MemberContext { member: member, parent: this };
        insert result into programs;
        println("created member => {programs} => {getContent()}");
        return result;
    }
    public override function getMembers to Member[] 
    {
        return memberCtxs;
    }

    public override bound function getContent to Context[] { 
        [programs, myContent, content];
    }

    public override function deleteContent from (c is Context) to ()
    {
        if (c is MemberContext) {
            const pc = c as MemberContext;
            pc.program.reset();
            delete pc from programs;
            delete pc.program from getTarget().programs;
        }
        super.deleteContent(c);
    }
}

public class AssetContext is Context {
    public var asset is Asset;
    override var name = bind asset.name;
    var myContent = bind foreach (x in asset.containedAssets) AssetContext { asset: x, parent: this };
    override public bound function getContent to Context[] { myContent }
}
/*
public class FunctionDefinitionContext is MemberContext, ResourceObjectContext {
    public var fun is Function;
    override var member = bind fun.funMember;
    override bound function getTarget to ResourceTarget { null }
}
*/

public class ClosureVarContext is GroupContext, ProgramContext {
    public var varType is TypeAsset;
    public var variableName is String = "variable";
    public var isShortcut is Boolean;
    public var isSubject is Boolean = false;
    public var isBound is Boolean;
    public var accessMode is VariableType = VariableType.Subject;
    override var name = bind variableName;
    override var label = bind "{variableName} [{varType.name}]";
    public var scope is GroupContext;

    // hack...
    var value is Number;
    var valueSubject = Subject of Number {};
    var disp2 is Disposable;

    public const ref = AbstractObservableRef of Number {
        override function get to Number
        {
            if (animationTarget == null) then value else value = (animationTarget as Ref of Number).get();
        }
        override function set from (x is Number) to ()
        {
            
            if (x <> get()) {
                (animationTarget as Ref of Number).set(value = x);
                valueSubject.onNext(x);
            }
        }
        override function subscribe from (f is function from java.lang.Float to ()) to (function from () to ())
        {
            const disp = valueSubject.subscribe(function from (x is Number) to () {
                    f(x)
                });
            function from () to () {
                disp.dispose();
            }
        }
    };

    public var animationClip is Channel of Number = bind if (not isShortcut and varType.t == Reflect.NUMBER_TYPE) then Channel of Number {
            id: bind "channelBox://{label}";
            targets: [ref];
    } else null;  

    public var timeline = Timeline {
        enabled: false;
        paused: true;
        content: bind [animationClip];
    }

    var animationTarget is ObservableRef of ?;

    var d is Disposable;

    override var program on replace {
        d = program.evalContext.observeVars().subscribe(function from (p is (String, ObservableRef of Object)) to () {
                println("observer var: {p.former} {p.latter}");
                if (p.former == variableName) {
                    animationTarget = p.latter;
                    if (varType.t == Reflect.NUMBER_TYPE) {
                        disp2.dispose();
                        const ob = Observables.observe(animationTarget as ObservableRef of Number);
                        ob.subscribe(function from (x is Number) to () {
                            ref.set(x)
                        });
                    }
                }
            });
    }

    override function fullName to String 
    {
        "{parent.fullName()}|{variableName}";
    }

    function getMembers from (varType is F3Type) to Member[] {
        const result = if (varType is F3ClassType) then Expression.introspect(varType as F3ClassType) else [];
        println("members of {varType} => {result}");
        return result;
    }

    function getContentFromType(varType is F3Type) to Context[] 
    {
        const results = foreach (m in getMembers(varType) where m.name.startsWith("observe")) MemberContext { member: m, parent: this } 
        println("content from type of {varType} => {results}");
        return results;
    }

    public const outputContext = VarOutputContext {parent: this};

    var myContent = bind [/*outputContext ,*/ content];

    override public bound function getContent to Context[] 
    { 
        myContent
    }

    public function addEvent to MemberContext
    {
        var r is MemberContext;
        insert r = MemberContext {
            parent: this;
            member: Member {
                name: "observeChange";
                t: varType.t;
                rt: varType.t;
                isObservable: yes;
                isObserver: no;
                override function equals from (obj is Object) to Boolean
                {
                    f3.lang.Builtins.isSameObject(this, obj);
                }
            }
        } into content;
        return r;
    }
}

public class VarInputContext is GroupContext {
    public function getVar to ClosureVarContext { parent as ClosureVarContext }
    override var name = "Input";
}

public class VarOutputContext is GroupContext {
    public function getVar to ClosureVarContext { parent as ClosureVarContext }
    override var name = "Observe Change";
}

public class VarContext is GroupContext {
    public var call is CallContext;
    public var varType is F3Type;
    var members = bind getMembers(varType);
    function getMembers from (varType is F3Type) to Member[] {
        const result = if (varType is F3ClassType) then Expression.introspect(varType as F3ClassType) else [];
        println("members of {varType} => {result}");
        return result;
    }
    function getContentFromType(varType is F3Type) to Context[] 
    {
        const results = foreach (m in members) MemberContext { member: m, parent: this } 
        println("content from type of {varType} => {results}");
        return results;
    }
    var myContent = bind         [getContentFromType(varType), content];
    override public bound function getContent to Context[] 
    { 
        myContent;
    }
}

public class ParameterContext is VarContext {
    public var index is Integer;
    override var contextType = bind call.enclosingMethod.getType().getArgumentType(index); 
}

public class ThisContext is VarContext {
    override var contextType = bind call.enclosingMethod.getDeclaringClass();
}

public class LocalVarContext is Context {
}

public class MemberContext is GroupContext, ProgramContext {
    public var member is Member;
    override var name = bind Names.formatName(member.name);
    override var label = bind "{name} [Event]";
    override function deleteContent from (c is Context) to ()
    {
        super.deleteContent(c);
        if (c is ClosureVarContext) {
            program.undefineVar(c as ClosureVarContext);
        }
    }
}

public class ContextTreemodel is Treemodel {
    var tfReparent is Disposable;
    public const transformHierarchy is TransformHierarchy on replace {
        tfReparent.dispose();
        tfReparent = 
            transformHierarchy.observeNodeMoved().subscribe(function from (x is TransformHierarchy.Reparent) to ()
                                                            {
                                                                println("REPARENT {x.node} from {x.fromParent} to {x.toParent}");
                                                                const ctx = rootContext.resolveNodeContext(x.node);
                                                                (ctx.parent as GroupContext).deleteContent(ctx);
                                                                if (x.toParent is GroupResourceNode) {
                                                                    const target = rootContext.resolveNodeContext(x.toParent as ResourceNode);
                                                                    insert ctx into (target as GroupContext).content;
                                                                } else {
                                                                    insert ctx into rootContext.content;
                                                                }
                                                            });
    }
    public const history is History of Context = History of Context {};
    const d = history.observeSelection().subscribe(function from (c is Context) to () {
            selectionObserver.onNext(toTreeNode(c));
    });
    public var rootContext is GroupContext;
    public var selectedContext is Context;
    public function reset from () to ()
    {
        tn = null;
        tn = root;
        history.reset();
    }
    var tn is Treenode on replace {
        selectedContext = (tn as ContextTreenode).context;
        var p = tn;
        while (p <> null and not ((p as ContextTreenode).context is GroupContext)) {
            p = p.parent;
        }
        selectedGroupContext = (p as ContextTreenode).context as GroupContext;
        p = tn;
        var m is MemberContext = null;
        var v is ClosureVarContext;
        while (p <> null) {
            var j = (p as ContextTreenode).context;
            if (m == null) {
                m = if (j is MemberContext) then (j as MemberContext) else null;
            }
            if (v == null) {
                v = if (j is ClosureVarContext) then j as ClosureVarContext else null;
            }
            p = p.parent;
        }
        selectedVarContext = if m.parent == v then null else v; // ugh: hack
        selectedMemberContext = m;
        println("selected context => {selectedContext}");
        p = tn;
        var o is ResourceObjectContext;
        while (p <> null) {
            var j = (p as ContextTreenode).context;
            o = if (j is ResourceObjectContext) then (j as ResourceObjectContext) else null;
            if (o <> null) {
                break;
            }
            p = p.parent;
        }
        selectedObjectContext = o;
        println("selected object context => {o}: {o.getTarget()}");
        history.go(selectedContext);
    }
    public var selectedVarInputContext is VarInputContext = bind if (selectedContext is VarInputContext) then selectedContext as VarInputContext else null;
    public var selectedObjectContext is ResourceObjectContext;
    public var selectedGroupContext is GroupContext;
    public var selectedMember is Member = bind selectedMemberContext.member;
    public var selectedMemberContext is MemberContext;
    public readonly var selectedVarContext is ClosureVarContext;
    override var root = bind createRoot(rootContext);
    function createRoot from (rootContext is Context) to ContextTreenode {
        ContextTreenode { context: rootContext };
    }
    const disp = selectionObserver.subscribe(function from (tn is Treenode) to () {
            this.tn = tn;
        });

    public function toTreeNode from (c is Context) to ContextTreenode 
    {
        var result is ContextTreenode;
        root.foldLeft((), function from (_ is (), tn is Treenode) to () {
                const x = tn as ContextTreenode;
                if (x.context == c) {
                    result = x;
                }
            });
        return result;
    }
}

public class ContextTreenode is Treenode {
    public var context is Context;
    override var label = bind context.label;
    var content = bind context.getContent();
    override var canOpen = bind sizeof content > 0;
    override var children = bind foreach (c in content) ContextTreenode { context: bind c, parent: this }
    override function toString to String {
        const n = context;
        if (n is Context.GroupContext) {
            const content = (n as Context.GroupContext).content;
            println("{n} n={n.label}, content={content}");
        }
        "Context TreeNode {n.name}, canOpen={canOpen}, content={n.getContent()}";
    }
}