package expr;
import f3.media.scene.*;
import f3.util.Observer.*;
import f3.util.Observable.*;
import f3.util.*;
import expr.prog.Program;

class ResourceChannel {
     public var channel is Channel of Number;
}

class InstanceNode extends TransformNode {
    public var subs is Disposable[];
}

public class ResourceNode is TransformNode, ResourceTarget {
    public const webBrowserFactory is AbstractWebBrowserFactory = the AbstractWebBrowserFactory;
    public const pathFactory is Shape2D.Path2DFactory = the Shape2D.Path2DFactory;
    public const layoutEngine is Text.LayoutEngine = the Text.LayoutEngine;
    public const effectLoader is CGEffectLoader = the CGEffectLoader;
    public const soundLoader is SoundLoader = the SoundLoader;
    public const movieLoader is MovieLoader = the MovieLoader;
    public const imageLoader is ImageLoader = the ImageLoader;
    public var url is String;
    override var id = bind url;
    public var temporal is ResourceTimeNode;

    function subscribe of a from (ob is Observable of a, sourceCode is String, target is Node) to Disposable {
        ob.subscribe(DefaultObserver of a {
                override function onNext from (x is a) to ()
                {
                    println("on next {x} for {sourceCode} of {target}");
                }
            });
    }

    public function instance from (id is String,
                                   lookupVar is function from String to Object,
                                   lookupSpatial is function from String to Node,
                                   lookupTemporal is function from String to TimeNode) to Node 
    {
        const x = this;
        const exprNode = ExprNode {
            url: x.url;
        };
        const target = InstanceNode {
            id: id;
            tx: x.tx;
            ty: x.ty;
            tz: x.tz;
            rx: x.rx;
            ry: x.ry;
            rz: x.rz;
            sx: x.sx;
            sy: x.sy;
            sz: x.sz;
            px: x.px;
            py: x.py;
            pz: x.pz;
            content: exprNode;
        }
        function localLookup from (name is String) to Node {
            var n = exprNode.spatialRoot.lookup(name);
            if (n == null) {
                n = lookupSpatial(name);
            }
            return n;
        }
        function localTemporalLookup from (name is String) to TimeNode {
            var n = exprNode.temporalRoot.lookup(name);
            if (n == null) {
                n = lookupTemporal(name);
            }
            return n;
        }
        for (prog in programs) { // @TODO
        }
        return target;
    }
}

public class MaResourceNode is ResourceNode {
    public const model is Ma.Model;
    override var url = bind model.url;
    override var content = bind model.getSpatialRoot();
}
