package expr;
import expr.undo.*;
import f3.media.scene.*;
import f3.util.*;
import f3.util.Observer.*;
import expr.Names.*;

public class Treenode is Treeview.Treenode {
    public var n is TimeNode;
    var label0 = bind if (n.parent is ResourceTimeNode) then "Main Timeline" else if (n.id <> "") then formatName(n.id) else "{n}";
    override var label = bind label0;
    function asTimeGroup from (n is TimeNode) to TimeGroup { if (n is TimeGroup) then n as TimeGroup else null }
    override var canOpen = bind { var g = asTimeGroup(n); g.content.size() > 0 }
    override var children = bind foreach (x in getChildren(n)) Treenode { n: bind x, parent: this};

    bound function getChildren from (t is TimeNode) to TimeNode[]
    {
	if (t is TimeGroup) {
	    readonly var g = t as TimeGroup;
	    g.content
	} else [];
    }   
    override function open to () {
	super.open();
	println("open {n} => {children.size()}");
    }
}

public class Model is Treeview.Treemodel {
    public const h is TemporalHierarchy;
    override var root = Treenode { n:  bind h.root };
    public var selection is Treenode on replace {
        selectionObserver.onNext(selection);
    }

    const selectionListener = 
	h.observeSelection().subscribe(function from (tn is TimeNode) to () 
				       {
                                           println("selection change => {tn}");
					   foldLeft((), 
						    function from (_ is (), t is Treeview.Treenode) to () {
							const ht = t as Treenode;
							const n = ht.n;
							if (n == tn) {
                                                            println("t={t} n={n}");
							    selection = ht;
							}
						    })
				       });

    function onSelectionChange from (tn is Treeview.Treenode) to ()
    {
	h.selectedTimeNode = (tn as Treenode).n
    }

    const disp = selectionObserver.subscribe(onSelectionChange);
}

public class TemporalHierarchy 
{
    public var selectedTimeNode is TimeNode on replace {
	var p = selectedTimeNode;
	while (p <> null and not (p is ResourceTimeNode)) {
	    p = p.parent;
	}
        if (selectedTransform <> p) {
            println("SELECTION => {p}");
            selectedTransform = p as ResourceTimeNode;
        }
        selection.onNext(selectedTimeNode);
    };

    public function clearSelection {
	selectedTimeNode = null;
    }

    const undoList = UndoList {};

    postinit {
	undoList.addTarget("selectedTimeNode", &selectedTimeNode);
    }

    public var selectedTransform is TimeNode;

    public var root is TimeNode;

    public function selectTimeNode from (n is TimeNode) to ()
    {
	selectedTimeNode = n;
    }

    public function deleteSelection {
	var old = selectedTransform;
	var prev is ResourceTimeNode = null;
	var next is ResourceTimeNode = null;
	var t is TimeNode;
	root.foldLeft((), 
		      function from (_ is (), n is TimeNode) to () {
			  if (n == old) {
			      if (prev == null) {
				  prev = n as ResourceTimeNode;
			      } else t = prev;
			  } else if (n is ResourceTimeNode) {
			      if (prev == t) {
				  next = n as ResourceTimeNode;
			      }
			      prev = n as ResourceTimeNode;
			  }
		      });
	if (t == null) {
	    t = next;
	}
	selectTimeNode(t);
    }

    public function move from (src is TimeNode, target is TimeNode) to ()
    {
	const srcParent = src.parent as TimeGroup;
	delete src from srcParent.content;
	var targetTimeGroup is TimeGroup;
	if (not (target is TimeGroup)) {
	    const parent = target.parent as TimeGroup;
	    const i = f3.util.Sequences.indexOf(parent.content, target);
	    insert src after parent.content[i];
	} else {
	    const parent = target as TimeGroup;
	    insert src into parent.content;
	}
    }

    const selection = Subject of TimeNode {}

    public function observeSelection to Observable of TimeNode {
	selection;
    }
	
}