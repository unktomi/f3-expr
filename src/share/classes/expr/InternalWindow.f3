package expr;
import f3.media.scene.*;
import f3.media.scene.Shape2D.*;
import f3.media.input.*;
import f3.math.*;
import f3.math.LinearMath.*;
import f3.util.*;
import f3.util.Observer.*;
import java.lang.Math;

class ContentHolder is Group, Scissored {
}

public class InternalWindow is ResizableNode {

    public var containerBounds is Bounds;
    public var cx is Number;
    public var cy is Number;

    var dirty = true;

    override function resize from (w0 is Number, h0 is Number) to ()
    {
	const w = Math.round(2*w0)/2;
	const h = Math.round(2*h0)/2;
	super.resize(w, h);
	content.resize(w-2-12, h-38-3);
    }

    override var transform = bind translate(cx, cy);
    const self = this;

    const titleBar is Node = Rectangle {
	override var transform = bind translate(0, self.height / 2 - 5);
	height: 12;
	override var width = bind self.width;
	fillPaint: ColorPaint(Color.color(.2, .2, .2));
    };

    const line is Node = Rectangle {
	transform: bind translate(0, self.height / 2 - 9.5);
	height: 1.0;
	width: bind self.width;
	fillPaint: ColorPaint(Color.color(.44, .44, .44));
    }

    const buttonBar is Node = Rectangle {
	override var transform = bind translate(0, self.height / 2 - 9 - 10);
	height: 18;
	override var width = bind self.width;
	fillPaint: ColorPaint(Color.color(.3, .3, .3));
    };

    const resizeCorner is Node = Rectangle {
	override var transform = bind translate(self.width/2 -6, -self.height/2 + 6);
	height: 12;
	width: 12
	fillPaint: ColorPaint(Color.color(.65, .65, .65));
    };

    const leftSide is Node = Rectangle {
	override var transform = bind translate(-self.width/2, 0);
	override var height = bind self.height;
	width: 1;
	fillPaint: ColorPaint(Color.color(.18, .18, .18));
    }

    const rightSide is Node = Rectangle {
	override var transform = bind translate(self.width/2, 0);
	override var height = bind self.height;
	width: 1;
	fillPaint: ColorPaint(Color.color(.18, .18, .18));
    }

    public var content is ResizableNode;

    const contentHolder = ContentHolder {
        transform: translate(-6, 0);
	scissorBounds: bind Bounds.boundsFromRect(content.width+1, content.height+1);
	content: bind content;
    }

    override var internalContent = Group {
	content: bind [titleBar, buttonBar, line, TransformNode { ty: -7, content: bind contentHolder}, resizeCorner, leftSide, rightSide];
    } 
    
    override function update {
	if (dirty) {
	    dirty = false;
	    resize(width, height);
	}
	super.update();
    }
       

    var dx = 0.0;
    var dy = 0.0;

    const onDown = DefaultObserver of MouseEvent {
	override function onNext from (event is MouseEvent) to ()
	{
	    dx = cx;
	    dy = cy;
	    toFront()
	}
    };

    const onUp = DefaultObserver of MouseEvent {
	override function onNext from (event is MouseEvent) to ()
	{
	    gridFit()
	}
    };

    function gridFit {
	cx = cx as Integer;
	cy = cy as Integer;
    }

    const onMove = DefaultObserver of MouseEvent {
	override function onNext from (event is MouseEvent) to ()
	{     	       		
	    const v = event.picked.dragPoint1 - event.picked.dragPoint0;
	    dx += v.x;
	    dy += v.y;
	    const p0 = toSceneTransform.getTranslation().xy() - new Tuple2(cx, cy);
	    const p1 = p0 + new Vec2(dx, dy);
	    const clamp = new Point2(Math.max(p1.x, width/2), 
				     Math.min(p1.y, containerBounds.top()-height/2));
				     //	    println("p0={p0}, p1={p1}, clamp={clamp}");
	    cx = dx + clamp.x - p1.x;
	    cy = dy + clamp.y - p1.y;
	    //	    println("cx={cx} cy={cy}");
	    gridFit()
	}
    };

    const onResize = DefaultObserver of MouseEvent {
	override function onNext from (event is MouseEvent) to ()
	{     	       		
	    const v = event.picked.dragPoint1 - event.picked.dragPoint0;
	    width += v.x;
	    height -= v.y;
	    resize(width, height);
	    cx += v.x/2;
	    cy += v.y/2;
	}
    };

    postinit {
	titleBar.observeMouseDown().subscribe(onDown);
	titleBar.observeMouseUp().subscribe(onUp);
	titleBar.observeMouseDrag().subscribe(onMove);
    	resizeCorner.observeMouseDrag().subscribe(onResize);
	resizeCorner.observeMouseUp().subscribe(onUp);
    }
}