package expr;
import f3.util.*;
import f3.media.scene.*;
import f3.media.scene.Shape2D.*;
import f3.media.input.*;

public class VectorButton is ResizableNode {
    override var height = 16;
    override var width = 28;
    public var enabled is Boolean = true;
    public var shape is Shape2D;
    public var disabledForeground is Paint = ColorPaint(Color.color(.65, .65, .65));
    public var foreground is Paint = ColorPaint(Color.color(.8, .8, .8));
    public var hoverForeground is Paint = ColorPaint(Color.color(.9, .9, .9));
    public var selectedForeground is Paint = ColorPaint(Color.color(.9, .9, .9));
    public var background is Paint = ColorPaint(Color.color(.3, .3, .3));
    public var selectedBackground is Paint = ColorPaint(Color.color(.5, .5, .5));
    var pressed is Boolean;
    override var internalContent = Group {
	content: bind 
	[Rectangle { 
                height: bind height;
                width: bind width;
                fillPaint: bind if (pressed and containsPointer) then selectedBackground else background;
        },
        MeshNode2D {
            path: bind shape.path;
            paint: bind if not enabled then disabledForeground else if pressed and containsPointer then selectedForeground else if containsPointer then hoverForeground else foreground;
        }]
    }
    const down = observeMouseDown().subscribe(function from (event is MouseEvent) to () {
	    println("pressed");
	    if (enabled) pressed = true
	});
    const up = observeMouseUp().subscribe(function from (event is MouseEvent) to () {
	    println("released");
            if (enabled) {
                pressed = false;
                if (containsPointer) {
                    onPress();
                    subject.onNext(());
                }
            }
	});
    const subject = Subject of (()) {};
    public function observePress to Observable of (()) { subject }
    public var onPress is function from () to ();
}