package expr;
import f3.media.scene.*;
import f3.media.scene.Shape2D.*;
import f3.media.input.*;
import java.lang.Math;
import f3.util.*;

public abstract class Listmodel of a {
    public var size is Integer;
    public abstract function getValue from (i is Integer) to a;
}

public class Element of a {
    public var value is a;
    public var index is Integer;
}

public abstract class Listview of a is ResizableNode, Focusable, KeyboardInputHandler, Scrollable {
    public var background is Paint = 
	ColorPaint(Color.color(.6, .6, .6, 1));
    public var selectionBackground is Paint = 
	ColorPaint(Color.color(.4, .4, .4, 1));
    public var selectionForeground is Paint = bind if focused then
	ColorPaint(Color.color(.9, .9, .9, 1)) else ColorPaint(Color.color(.77, .77, .77, 1));
    public var foreground is Paint = 
	ColorPaint(Color.color(.2, .2 , .2));

    public var model is Listmodel of a;

    public var cellHeight = 15;

    public var selectedRow = 0;

    var scrollOffset is Integer;
    var values is a[];
    function makeElement of a from (v is a) to Element of a 
    {
        Element of a {
            value: v
        }
    };
    var elements is (Element of a)[] = bind foreach (v in values) makeElement(v);
    var views is Node[] = bind foreach (v in elements) render(v);
    var txs = bind foreach (v in views) TransformNode { content: bind v };

    abstract function render from (value is Element of a) to Node;

    public var selectedValue is a = bind values[selectedRow];

    var visibleRows is Integer;
    
    override function update {
        super.update();
        var y = height/2;
        var i = scrollOffset;
        var j = 0;
        while (y < height and i < model.size) {
            var v = model.getValue(i);
            if (i == values.size()) {
                insert v into values;
            } else {
                values[i] = v;
            }
            if (j == 0) {
                y -= views[i].contentBounds.extent.y;
            }
            elements[i].index = i;
            //println("v={views[i]}, i={i}, y={y}");
            txs[i].ty = y;
            if (cellHeight > 0) {
                y -= cellHeight;
            } else {
                y -= views[i].contentBounds.height();
            }
            j++;
            i++;
        }
        visibleRows = j;
        delete values[j..];
    }

    override var internalContent = Group {
        content: 
        [Rectangle {
                width: bind width;
                height: bind height;
                fillPaint: bind background;
        },
        TransformNode {
            content: bind txs;
        }]
    }

    override function onKeyDown from (e is KeyboardEvent) to ()
    {
	if (e.keyCode == Keys.Down) {
	    selectedRow = Math.min(model.size-1, selectedRow+1);
	} else if (e.keyCode == Keys.Up) {
	    selectedRow = Math.max(0, selectedRow-1);
	} else if (e.keyCode == Keys.Home) {
	    selectedRow = 0;
	} else if (e.keyCode == Keys.End) {
	    selectedRow = model.size-1;
	} else if (e.keyCode == Keys.Enter) {
            apply();
	} else if (e.keyCode == Keys.Esc) {
            cancel();
	}
    }

    // Scrollable

    override public bound function getTx to Number { 0.0 }
    override public bound function getSx to Number { 1.0 }

    override public bound function getTy to Number 
    { 
        scrollOffset / (model.size as Number);
    }

    override public bound function getSy to Number 
    { 
        Math.min(visibleRows / ((model.size) as Number), 1.0);
    }

    override public function setX from (tx is Number, sx is Number) to ()
    {
    }

    override public function setY from (ty is Number, sy is Number) to ()
    {
        scrollOffset = Math.round(ty * model.size) as Integer;
    }

    const onClick = 
	internalContent.observeMouseDown().subscribe(function from (e is MouseEvent) to () {
                selectedRow = (scrollOffset + (height-(e.location.y + height / 2)) / cellHeight) as Integer;
                if (e.clickCount > 1) {
                    apply();
                }
	    });

    function apply from () to () 
    {
        applySubject.onNext(selectedValue)
    }

    function cancel from () to () {
        applySubject.onNext(null) /// hack
    }

    var applySubject = Subject of a {};

    public function observeApply to Observable of a {
        applySubject
    }
}
