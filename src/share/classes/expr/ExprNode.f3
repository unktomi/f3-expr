package expr;
import f3.util.*;
import expr.Resources.*;
import expr.prog.Program;
import f3.media.scene.*;

public class ModelContent {
    public var spatialRoot is Node;
    public var temporalRoot is TimeNode;
}

public const Start is Subject of (()) = Subject of (()) {};
public const Console is Subject of Object = Subject of Object {};

public function printLine from (obj is Object) to ()
{
     Console.onNext(obj);
}

public class ExprNode is AbstractNode {
    public const soundLoader is SoundLoader = the SoundLoader;
    public const movieLoader is MovieLoader = the MovieLoader;
    public const webBrowserFactory is AbstractWebBrowserFactory = the AbstractWebBrowserFactory;
    public var url is String;
    override var id = bind url;
    public var spatialRoot is Node = bind modelContent.spatialRoot;
    public var temporalRoot is TimeNode = bind modelContent.temporalRoot;
    public var modelContent is ModelContent = bind if url.endsWith(".expr") then loadExpr(url) else loadResource(url);
    var instanceSpace is Group = Group {};
    public var programs is Program[];
    public var isInteractive is Boolean = true;
    public var debugger is ObservableDebugger = ObservableDebugger {
        override function debug of a from (xs is Observable of a, obj is Object) to Observable of a { 
            println("debugger: {xs}");
            xs
        }
    }
    public var standalone is Boolean = true;
    public var dynamicsWorld is DynamicsWorld;

    bound function findNodeTarget from (id is String) to Node
    {
        spatialRoot.lookup(id)
    }

    var firstTime = true;

    override function update to () {
        super.update();
        if (firstTime) {
            firstTime = false;
            for (prog in programs) prog.evaluate();
            timeline.setPlayhead(0s);
        }
    }

    const channelBox = TimeGroup {
    };

    var timeline is Timeline = bind if (standalone) then Timeline {
        paused: bind not isInteractive;
        content: TimeGroup {
            content: bind [temporalRoot, channelBox];
        } 
    } else null;

    function loadExpr from (url is String) to ModelContent {
        var r is SceneResource = Resources.open(url);
        var allPrograms is Program[];
        var ns is ExprNode[] = foreach (x in r.spatialResources) {
            const currentTransform = ExprNode {
                isInteractive: bind isInteractive;
                url: x.url
            }
            currentTransform.programs = 
            foreach (prog in x.programs) {
                const targetPath = prog.targetPath;
                const p = Program {
                    event: prog.event.deserialize();
                    code: prog.code;
                    sourceCode: prog.compiled;
                    targetPath: targetPath;
                    evalContext: Program.EvalContext {
                        interactive: function to Boolean { isInteractive }
                        debugger: bind debugger;
                        targetNode: bind currentTransform.findNodeTarget(targetPath);
                        instanceSpace: instanceSpace;
                        lookupSpatial: function from (n is String) to Node { 
                            const r = currentTransform.spatialRoot.lookup(n);
                            println("lookupSpatial in {url} {n} => {r}");
                            return r;
                        }
                        targetTimeline: timeline;
                        lookupTemporal: function from (n is String) to TimeNode { 
                            const r = currentTransform.temporalRoot.lookup(n);
                            println("lookupTemporal in {url} {n} => {r}");
                            return r;
                        }
                    }
                }
                println("creating program in {x.url} on {p.event} as {p.sourceCode}");
                p;
            }
            currentTransform;
        }
        const spatialRoot = Group {
            id: "Main Scene";
            content: foreach (x in r.spatialResources) {
                const n = ns[indexof x];
                const tn = TransformNode {
                    id: "transform"
                    tx: x.tx;
                    ty: x.ty;
                    tz: x.tz;
                    rx: x.rx;
                    ry: x.ry;
                    rz: x.rz;
                    sx: x.sx;
                    sy: x.sy;
                    sz: x.sz;
                    px: x.px;
                    py: x.py;
                    pz: x.pz;
                    content: n;
                }
                if (x.colliderResource <> null) {
                    const cr = x.colliderResource;
                    const c = dynamicsWorld.createCollider(tn);
                    c.mass = cr.mass;
                    c.friction = cr.friction;
                    c.restitution = cr.restitution;
                    c.bodyType = 
                        if (cr.colliderType == "Dynamic") then RigidBodyType.Dynamic
                            else if (cr.colliderType == "Kinematic") then RigidBodyType.Kinematic 
                                else RigidBodyType.Static;
                    tn.collider = c;
                }
                tn
            }
        }
        for (j in r.spatialResources, anim in j.animation) {
            // @TODO handle layers
            if (anim is Resources.ChannelBoxResource) {
                const box = anim as Resources.ChannelBoxResource;
                const channelBox = ns[indexof j].addChannelBox(spatialRoot.content[indexof j] as TransformNode);
                channelBox.playTime = box.playTime;
                channelBox.playRate = box.playRate;
                channelBox.playCount = box.playCount;
                channelBox.blendWeight = 1.0;//i.animation.blendWeight;
                foreach (y in box.channels) {
                    const c = channelBox.lookup(y.target) as Channel of Number;
                    println("LOOKUP {y.target} => {c}");
                    c.playTime = y.playTime;
                    c.playCount = y.playCount;
                    c.playRate = y.playRate;
                    c.blendWeight = y.blendWeight;
                    c.keys = foreach (k in y.keys) {
                        c.createKey(k.keyTime, k.keyValue, f3.media.scene.KeyFrame.Linear);
                    }
                }
            }
        }

        const temporalRoot = TimeGroup {
            content: foreach (n in ns) n.temporalRoot;
        }

        function convertTimeResource from (i is Resources.TemporalResource) to TimeNode {
            var t is TimeNode;
            if (i.url.startsWith("timenode://TransitionLayer")) {
                t = TransitionLayer {
                    id: i.url;
                    content: foreach (j in i.content) {
                        convertTimeResource(j)
                    }
                }
                const rtn = ResourceTimeNodeWrapper {
                    blendWeight: i.blendWeight;
                    playTime: i.playTime;
                    playRate: i.playRate;
                    playCount: i.playCount;
                    url: i.url;
                    wrapped: t as TimeGroup;
                };
                t = rtn;
                insert t into temporalRoot.content;
            } else if (i.url.startsWith("timenode://BlendLayer")) {
                t = BlendLayer {
                    id: i.url;
                    content: foreach (j in i.content) {
                        convertTimeResource(j)
                    }
                }
                const rtn = ResourceTimeNodeWrapper {
                    url: i.url;
                    blendWeight: i.blendWeight;
                    playTime: i.playTime;
                    playRate: i.playRate;
                    playCount: i.playCount;
                    wrapped: t as TimeGroup;
                };
                t = rtn;
                insert t into temporalRoot.content;
            } else if (i.url.startsWith("timenode://Layer")) {
                t = TimeGroup {
                    id: i.url;
                    content: foreach (j in i.content) {
                        convertTimeResource(j)
                    }
                }
                const rtn = ResourceTimeNodeWrapper {
                    blendWeight: i.blendWeight;
                    playTime: i.playTime;
                    playRate: i.playRate;
                    playCount: i.playCount;
                    url: i.url;
                    wrapped: t as TimeGroup;
                };
                t = rtn;
                insert t into temporalRoot.content;
            } else {
                t = temporalRoot.lookup(i.url);
                t.playTime = i.playTime;
                t.playRate = i.playRate;
                t.playCount = i.playCount;
                t.blendWeight = i.blendWeight;
            }
            println("CONVERT TIME RESOURCE : {i.url} => {t}");
            t;
        }
        const temps = foreach (x in r.temporalResources) {
            convertTimeResource(x)
        };
        ModelContent {
            spatialRoot: if (spatialRoot.content.size() == 1) then spatialRoot.content[0] else spatialRoot;
            temporalRoot: if (temps.size() == 1) then temps[0] else TimeGroup { content: temps };
        }
    }

    function loadResource from (url is String) to ModelContent 
    {
        const loweredUrl = url.toLowerCase();
        if (loweredUrl.endsWith(".ma")) {
	    const model = Ma.Model {
		url: url;
	    }
            ModelContent {
                spatialRoot: bind model.getSpatialRoot();
                temporalRoot: ResourceTimeNode.MaResourceTimeNode { 
                    model: model;
                }
            }
	} else if (loweredUrl.endsWith(".fbx") or 
                   loweredUrl.endsWith(".blend") or
                   loweredUrl.endsWith(".dae") or
                   loweredUrl.endsWith(".3ds") or
                   loweredUrl.endsWith(".ase") or
                   loweredUrl.endsWith(".obj") or
                   loweredUrl.endsWith(".ifc") or
                   loweredUrl.endsWith(".xgl") or
                   loweredUrl.endsWith(".zgl") or
                   loweredUrl.endsWith(".ply") or
                   loweredUrl.endsWith(".dxf") or
                   loweredUrl.endsWith(".lwo") or
                   loweredUrl.endsWith(".lws") or
                   loweredUrl.endsWith(".lxo") or
                   loweredUrl.endsWith(".stl") or
                   loweredUrl.endsWith(".x") or
                   loweredUrl.endsWith(".ac") or
                   loweredUrl.endsWith(".ms3d") or
                   loweredUrl.endsWith(".cob") or
                   loweredUrl.endsWith(".scn") or
                   loweredUrl.endsWith(".bvh") or
                   loweredUrl.endsWith(".csm") or
                   loweredUrl.endsWith(".mdl") or
                   loweredUrl.endsWith(".md2") or
                   loweredUrl.endsWith(".md3") or
                   loweredUrl.endsWith(".pk3") or
                   loweredUrl.endsWith(".md5") or
                   loweredUrl.endsWith(".smd") or
                   loweredUrl.endsWith(".vta") or
                   loweredUrl.endsWith(".m3") or
                   loweredUrl.endsWith(".3d") or
                   loweredUrl.endsWith(".b3d") or
                   loweredUrl.endsWith(".q3d") or
                   loweredUrl.endsWith(".q3o") or
                   loweredUrl.endsWith(".q3s") or
                   loweredUrl.endsWith(".nff") or
                   loweredUrl.endsWith(".raw") or
                   loweredUrl.endsWith(".ter") or
                   loweredUrl.endsWith(".hmp") or
                   loweredUrl.endsWith(".ndo")
                   ) {
            const model = F3Assimp {
                url: url;
            }
            ModelContent {
                spatialRoot: bind model.getSpatialRoot();
                temporalRoot: bind model.getTemporalRoot();
            }
	} else if (loweredUrl.endsWith(".mp4") or 
                   loweredUrl.endsWith(".mov")) {
            const movie = Movie {
                url: url;
                paused: true;
            }
            const clip = Movie.Clip { id: url, movie: movie };
            ModelContent {
                spatialRoot: movie;
                temporalRoot: clip;
            }
	} else if (loweredUrl.endsWith(".aif") or 
                   loweredUrl.endsWith(".aiff") or 
                   loweredUrl.endsWith(".asf") or 
                   loweredUrl.endsWith(".asx") or
                   loweredUrl.endsWith(".dls") or
                   loweredUrl.endsWith(".flac") or
                   loweredUrl.endsWith(".fsb") or
                   loweredUrl.endsWith(".it") or
                   loweredUrl.endsWith(".m3u") or
                   loweredUrl.endsWith(".mid") or
                   loweredUrl.endsWith(".midi") or
                   loweredUrl.endsWith(".mod") or
                   loweredUrl.endsWith(".mp2") or
                   loweredUrl.endsWith(".mp3") or
                   loweredUrl.endsWith(".pls") or
                   loweredUrl.endsWith(".pls") or
                   loweredUrl.endsWith(".s3m") or
                   loweredUrl.endsWith(".vag") or
                   loweredUrl.endsWith(".wav") or
                   loweredUrl.endsWith(".wax") or
                   loweredUrl.endsWith(".wma") or
                   loweredUrl.endsWith(".xm") or
                   loweredUrl.endsWith(".xma")){
            const sound = Sound.Sample {
                url: url;
                paused: true
            }
            const clip = Sound.Clip { sound: sound };
            ModelContent {
                spatialRoot: sound;
                temporalRoot: clip;
            }
        } else if (loweredUrl.endsWith(".expr")) {
            loadExpr(url);
	} else if (loweredUrl.endsWith(".png") or 
                   loweredUrl.endsWith(".jpg") or 
                   loweredUrl.endsWith(".tif") or 
                   loweredUrl.endsWith(".tiff") or 
                   loweredUrl.endsWith(".bmp") or 
                   loweredUrl.endsWith(".dcx") or 
                   loweredUrl.endsWith(".gif") or 
                   loweredUrl.endsWith(".icns") or 
                   loweredUrl.endsWith(".ico") or 
                   loweredUrl.endsWith(".pcx") or 
                   loweredUrl.endsWith(".psd") or 
                   loweredUrl.endsWith(".rgbe") or 
                   loweredUrl.endsWith(".wbmp") or 
                   loweredUrl.endsWith(".xbm") or 
                   loweredUrl.endsWith(".xpm") or 
                   loweredUrl.endsWith(".tga")) {
	    const image = Image { 
		url: url;
	    }
            ModelContent {
                spatialRoot: image;
            }
        } else {
            ModelContent {
                spatialRoot: WebBrowser {
                    url: url;
                }
            }
        }
    }
    override var internalContent = Group {
        content: bind [instanceSpace, spatialRoot]
    };

    function addChannelBox from (t is TransformNode) to TimeGroup {
        println("ADD CHANNEL BOX :  {t}");
        const names = ["tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz", "px", "py", "pz"];
        const ptrs = [&t.tx, &t.ty, &t.tz, &t.rx, &t.ry, &t.rz, &t.sx, &t.sy, &t.sz, &t.px, &t.py, &t.pz];
        const tg = TimeGroup {
            content:
            foreach (i in [0..<names.size()]) {
                Channel of Number {
                    id: names[i];
                    targets: ptrs[i];
                }
            }
            override function lookup from (id is String) to Channel of Number {
                const p = id.lastIndexOf("#");
                if (p > 0) {
                    const id1 = id.substring(p+1);
                    for (x in content) {
                        if (x.id == id1) {
                            return x as Channel of Number;
                        }
                    }
                }
                return null;
            }
        }
        insert tg into channelBox.content;
        return tg;
    }
}


