package expr.undo;

package var undoables = new java.util.WeakHashMap of (UndoList, ());

public function getUndoables to UndoList[] 
{
    foreach (x in undoables.keySet()) x;
}

public function canUndo to Boolean {
    for (x in undoables.keySet()) {
	if (x.canUndo()) return true;
    }
    return false;
}

public var commits is Integer;
public var now is Integer = -1;

public function canRedo to Boolean {
    for (x in undoables.keySet()) {
	if (x.canRedo()) return true;
    }
    return false;
}

public function reset from () to () {
    for (x in undoables.keySet()) x.reset();
    commits = 0;
    now = -1;
}

var in_undo = 0;
public function undo to ()
{   
    in_undo++;
    if (in_undo == 1) {
        if (now > 0) now--;
        for (t in getUndoables()) t.undo();
    }
    in_undo--;
}

public function redo to ()
{
    in_undo++;
    if (in_undo == 1) {
        if (now < commits-1) now++;
        for (t in getUndoables()) t.redo();
    }
    in_undo--;
}

public function commit to ()
{
    //java.lang.Thread.currentThread().dumpStack();
    if (in_undo == 0) {
        commits++;
        now++;
        for (t in getUndoables()) t.commit();
    }
}
