package expr.undo;
import f3.lang.Ref;

class UndoableList  
{
    var todo is (Undoable of ?)[];
    override function toString to String {
	"{foreach (u in todo) "{u.tag}: todo: {u.value}, target: {u.target.get()}\n"}"
    }
}


public class UndoList 
{
    init {
	MasterUndoable.undoables.put(this, ());
    }

    public function dispose {
	MasterUndoable.undoables.remove(this);
	history = [];
	targets = [];
	tags = [];
    }

    var now is Integer = -1;
    var history is UndoableList[];

    public function undo 
    {
//    println("undo {history[now-1]}");
	if (now > 0) for (u in history[--now].todo) {
	    u.apply();
	}
    }

    public function redo 
    {
//    println("redo {history[now+1]}");
	if (now < history.size()-1) for (u in history[++now].todo) {
	    u.apply();
	}
    }

    var targets is (Ref of ?)[];
    var tags is String[];

    public function addTarget of a from (tag is String, ptr is Ref of a) to () 
    {
	removeTarget(ptr);
	insert Undoable.make(tag, ptr) into history[now].todo;
	insert tag into tags;
	insert ptr into targets;
    }

    public function removeTarget of a from (ptr is Ref of a) to () 
    {
	for (t in targets) {
	    if (t == ptr) {
		const i = indexof t;
		delete targets[i];
		delete tags[i];
		break;
	    }
	}
    }

    public function commit 
    {
        delete history[now+1..];
	var list = history[now];
	var dirty = list == null;
	for (x in list.todo) {
	    if (x.isDirty()) {
		dirty = true;
		break;
	    }
	}
	if (dirty) {
	    list = UndoableList {
		todo: foreach (t in targets) Undoable.make(tags[indexof t], t)
	    }
	}
	insert list into history;
	now++;
//	println("commit {history[now]}");
    }

    public function canUndo to Boolean {
	now > 0
    }

    public function canRedo to Boolean {
	now < history.size()-1;
    }

    public function reset from () to () {
	history = [];
	now = -1
    }
}

