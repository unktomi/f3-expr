package expr;
import f3.reflect.*;
import com.google.common.reflect.TypeToken;
public const jdk_paranamer = 
    new com.thoughtworks.paranamer.JavadocParanamer(new java.net.URL("http://docs.oracle.com/javase/6/docs/api/"));

public const paranamer = 
       new com.thoughtworks.paranamer.CachingParanamer(
       new com.thoughtworks.paranamer.AdaptiveParanamer(jdk_paranamer, new com.thoughtworks.paranamer.BytecodeReadingParanamer()));

public const ctx = F3Local.getContext();

public const TYPE_CONS is F3ClassType[] = foreach (i in [1..5]) Reflect.findClass("org.f3.runtime.TypeCons{i}") as F3ClassType;

public const STRING_TYPE = Reflect.findClass("java.lang.String");
public const BOXED_NUMBER_TYPE = Reflect.findClass("java.lang.Float");
public const NUMBER_TYPE = ctx.getNumberType();
public const BOXED_INTEGER_TYPE = Reflect.findClass("java.lang.Integer");
public const INTEGER_TYPE = ctx.getIntegerType();
public const BOXED_BOOLEAN_TYPE = Reflect.findClass("java.lang.Boolean");
public const BOOLEAN_TYPE = ctx.getBooleanType();
public const DURATION_TYPE = Reflect.findClass("f3.lang.Duration");
public const UNIT_TYPE = ctx.getVoidType();
public const BOXED_UNIT_TYPE = Reflect.findClass("java.lang.Void");
public const OBJECT_TYPE = Reflect.findClass("java.lang.Object");
public const OBSERVER_TYPE = Reflect.findClass("f3.util.Observer");
public const OBSERVABLE_TYPE = Reflect.findClass("f3.util.Observable");
public const SUBJECT_TYPE = Reflect.findClass("f3.util.Subject");
public const MONAD_TYPE = Reflect.findClass("org.f3.runtime.Monad");
public const COLOR_TYPE = Reflect.findClass("f3.lang.Color");
public const ENUM_TYPE = Reflect.findClass("java.lang.Enum");

public const INSPECTED_ELEMENT_TYPE = Reflect.findClass("expr.InspectedElement");
//public const INSPECTED_GROUP_TYPE = Reflect.findClass("expr.InspectedElement.InspectedGroup");
//public const INSPECTED_NUMBER_TYPE = Reflect.findClass("expr.InspectedElement.InspectedNumberValue");
//public const INSPECTED_VALUE_TYPE = Reflect.findClass("expr.InspectedElement.InspectedValue");

public const classMap = new java.util.HashMap of (F3ClassType, java.util.Map of (String, F3VarMember));
public const funMap = new java.util.HashMap of (F3ClassType, F3FunctionMember[]);
public const classes = new java.util.HashMap of (String, F3ClassType);

public function isObservableType from (t is F3Type) to Boolean {
    return OBSERVABLE_TYPE.isAssignableFrom(t);
}

public function getParameterNames from (fun is F3FunctionMember) to String[] 
{
    if (fun is F3Local.MethodFunctionMember) {
        const j = fun as F3Local.MethodFunctionMember;
        try {
            return paranamer.lookupParameterNames(j.getUnderlying());
        } catch (e is java.lang.Exception) {
            e.printStackTrace();
        }
    }
    return [];
}

public function getTypeParameters from (t is F3ClassType) to F3Type[] {
    const parms is F3Type[] = t.getTypeParameters();
    foreach (x in parms) {
        const y = classes.get(x.getName());
        if y == null then { if x is F3ClassType then classes.put(x.getName(), x as F3ClassType) else x } else y;
    }
}
/*
public function getTypeArguments from (t is F3ClassType) to F3Type[] {
    const parms is F3Type[] = t.getTypeArguments();
    foreach (x in parms) {
        const y = classes.get(x.getName());
        if y == null then { if x is F3ClassType then classes.put(x.getName(), x as F3ClassType) else x } else y;
    }
}
*/
public function findClass from (name is String) to F3ClassType
{
    if (name == null) return null;
    var r = classes.get(name);
    if (r == null) {
        classes.put(name, r = ctx.findClass(name));
    }
    if (r == null) {
        println("CLASS NOT FOUND: {name}");
    }
    return r;
}

public function getFunctions from (clazz0 is F3ClassType, all is Boolean) to F3FunctionMember[] 
{
    var clazz = clazz0;
    if (clazz == null) {
        return [];
    }
    if (clazz <> clazz0) {
        println("HUH? {clazz0} {clazz}");
        //clazz = clazz0;
    }
    var funs is F3FunctionMember[];
    try {
        funs = foreach (c in clazz.getFunctions(true)) c;
    } catch (exc is java.lang.Throwable) {
        exc.printStackTrace();
    }
    if (not funMap.containsKey(clazz)) {
        funMap.put(clazz, funs);
    } else {
        funs = funMap.get(clazz);
    }
    if (not all) then funs[f | f.getDeclaringClass() == clazz] else funs;
}

public function getFunction from (c is F3ClassType, name is String, params is F3Type[]) to F3FunctionMember 
{
    const f0 = c.getFunction(name, params);
    const fs = getFunctions(c, true);
    const i = f0 as F3Local.FunctionMember;
    for (f in fs) {
       const j = f as F3Local.FunctionMember;
       if (i.getUnderlying() == j.getUnderlying()) {
            return f;
        }
    }
    println("not found: {c.getName()}.{name}({params})");
    return null;
}

public function getFunction from (clas is String, name is String, params is String[]) to F3FunctionMember 
{
    const ps = foreach (p in params) getType(p);
    const c = getType(clas) as F3ClassType;
    return getFunction(c, name, ps);
}

public function getTypeArguments from (c is F3Type) to F3Type[]
{
    if (c is F3Local.ClassType) {
	const t = (c as F3Local.ClassType).getType();
        println("get Type Arguments {c} => {t}");
	if (t is java.lang.reflect.ParameterizedType) {
	    const p = t as java.lang.reflect.ParameterizedType;
	    const targs is java.lang.reflect.Type[] = p.getActualTypeArguments();
	    return foreach (x in targs) getType(x);
	}
    }
    return [];
}

public function isSameTypeVariable (x is F3Type, y is F3Type) to Boolean 
{
    if (x.isTypeVariable() and y.isTypeVariable()) {
        if (x is F3Local.ClassType and y is F3Local.ClassType) {
            const x1 = x as F3Local.ClassType;
            const y1 = y as F3Local.ClassType;
            return x1.getType().equals(y1.getType());
        }
    }
    return false;
}

public function getType from (t is java.lang.reflect.Type) to F3Type {
    ctx.makeTypeRef(t);
}

public function getFunctionType from (params is String[], returnType is String) to F3FunctionType
{
    const inputTypes = foreach (p in params) getType(p);
    ctx.makeFunctionType(inputTypes, if (returnType == "") then UNIT_TYPE else getType(returnType));
}

public function getType from (name is String) to F3Type 
{
    if (name == "Integer") then INTEGER_TYPE 
	else if (name == "Number") then NUMBER_TYPE 
	    else if (name == "Boolean") then BOOLEAN_TYPE 
		else if (name == "String") then STRING_TYPE 
		    else if (name == "Object") then OBJECT_TYPE 
			else { 
                            var cls is F3ClassType; 
                            try { 
                                cls = Reflect.findClass(name); 
                            } catch (e is java.lang.Throwable) {
                                e.printStackTrace();
                                cls = null
                            } 
                            cls;
                        }
}

public function getVar from (classType is F3ClassType, name is String) to F3VarMember 
{
    var varMap = classMap[classType];
    if (varMap == null) {
        const vars = classType.getVariables(true);
	println("vars={vars}");
        varMap = new java.util.TreeMap of (String, F3VarMember)(String.CASE_INSENSITIVE_ORDER);
        for (varMember in vars) {
	    varMap.put(varMember.getName(), varMember);
        }
        classMap.put(classType, varMap);
    }
    return varMap[name];
}

public function getVars from (classType is F3ClassType) to F3VarMember[]
{
    var varMap = classMap[classType];
    if (varMap == null) {
        const vars = classType.getVariables(true);
	println("{classType} vars=>{vars}");
        varMap = new java.util.TreeMap of (String, F3VarMember)(String.CASE_INSENSITIVE_ORDER);
        for (varMember in vars where not varMember.getName().startsWith("f3debug")) {
	    varMap.put(varMember.getName(), varMember);
        }
        classMap.put(classType, varMap);
    }
    foreach (k in varMap.values()) k
}

public function run from (args is String[]) to () {
}
