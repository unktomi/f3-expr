package expr;
import expr.undo.*;
import f3.media.scene.*;
import f3.util.*;
import f3.util.Observer.*;
import expr.Names.*;
import org.htmlcleaner.*;
import org.f3.media.web.awesomium.Browser;

public class Reparent {
    public const node is ResourceNode;
    public const fromParent is Object;
    public const toParent is Object;
}

bound function makeTreeNode from (parent is Treeview.Treenode, n is Node) to Treenode {
    if (n is WebBrowser) {
        WebBrowserTreenode {
            parent: parent;
            n: n;
        }
    } else {
        Treenode {
            parent: parent;
            n: bind n;
        }
    }
}

function shouldFormat from (n is Node) to Boolean {
    not (n is ResourceNode and (n as ResourceNode).$useLiteralId);
}

bound function formatRN from (n is ResourceNode) to String
{
    if (n.ctx.event.parent == null) then n.ctx.event.label else "{n.ctx.event.label} of {n.ctx.event.parent.label}";
}

public class Treenode is Treeview.Treenode {
    public var n is Node;
    override var label = bind if (n.parent is ResourceNode and not (n.parent is GroupResourceNode)) then "Main Scene" else if (n is ResourceNode) then "{(n as ResourceNode).displayName} [{formatRN(n as ResourceNode)}]" else if shouldFormat(n) then formatName(n.id) else n.id;
    function asGroup from (n is Node) to Group { if (n is Group and not (n is ResourceLeafNode)) then n as Group else null }
    override var canOpen = bind { var g = asGroup(n); g.content.size() > 0 }
    override var children = bind foreach (x in asGroup(n).content) makeTreeNode(this, x);
    override function open to () {
	super.open();
	println("open {n} => {children.size()}");
    }
}

public class WebBrowserTreenode is Treenode {
    override var canOpen = true;
    override var label = bind (n as WebBrowser).url;
    var doc is TagNode;
    override function open to () {
        doc = ((n as WebBrowser).getImplementation() as Browser).getStaticDocument();
        super.open();
    }
    override var children = HtmlContentTreenode {
        n: bind n;
        tagNode: bind doc;
    };
}

public class HtmlContentTreenode is Treenode {

    public var tagNode is TagNode;

    override var label = bind getLabel(tagNode);

    function getLabel from (tagNode is TagNode) to String 
    {
        const idAttrs = ["id", "class", "type", "name", "href", "src"];
        var result = tagNode.getName();
        for (attr in idAttrs) {
            const id = tagNode.getAttributeByName(attr);
            if (id <> null) {
                result = "{result} {attr}={id}";
            }
        }
        return result;
    }

    override var canOpen = bind { tagNode.getChildren().size() > 0 }
    function convertChildren from (list is java.util.List of TagNode) to Treeview.Treenode[] 
    {
        if (list == null) then [] else foreach (x in list) HtmlContentTreenode {
            n: bind n;
            parent: this;
            tagNode: x;
        }
    }
    override var children = bind convertChildren(tagNode.getChildren());
}

public class SceneTreenode is Treenode {
    public var scene is ResourceScene;
    override var n = bind scene.currentResource;
    override var label = bind scene.id;
    override var canOpen = bind scene.currentResource.content.size() > 0;
}

public class Model is Treeview.Treemodel {

    public var h is TransformHierarchy;

    override var root = Treenode { 
        label: "Spatial Hierarchy";
        override var canOpen = true;
        override var children = bind foreach (x in h.scenes) {
            SceneTreenode {
                parent: this;
                scene: bind x;
            }
        }
    }

    public var selection is Treenode on replace {
	//if (h.selectedNode <> selection.n) {
	    selectionObserver.onNext(selection);
	//}
    }

    function findSelection from (tn is TransformNode, t is Treeview.Treenode) to Treenode {
        const ht = t as Treenode;
        if (ht.n <> null and ht.n == tn) {
            return ht;
        }
        for (c in t.getAllChildren()) {
            const r = findSelection(tn, c);
            if (r <> null) return r;
        }
        return null;
    }

    const selectionListener = 
	h.observeSelection().subscribe(function from (tn is TransformNode) to () 
				       {
                                           const found is Treenode = findSelection(tn, root);
                                           if (found <> null) {
                                               selection = found;
                                               open(selection);
                                           }
				       });
    const sceneSelectionListener = 
    	h.observeSceneSelection().subscribe(function from (s is ResourceScene) to () {
                foldLeft((), 
                         function from (_ is (), t is Treeview.Treenode) to () {
                             const ht = t as Treenode;
                             if (t is SceneTreenode) {
                                 const st = (t as SceneTreenode);
                                 if (st.scene == s) {
                                     if (selection == null) {
                                         selection = ht;
                                     }
                                 }
                             }
                         })
        });



    function onSelectionChange from (tn is Treeview.Treenode) to ()
    {
        println("SELECTION CHANGE scenes={h.scenes} sel={h.selectedScene}");
        var x = tn;
        if (x.parent == null) {
            update();
        }
        while (x <> null and not (x is SceneTreenode)) {
            x = x.parent;
        }
	h.selectedNode = (tn as Treenode).n;
        if (x == null) {
            println("ERROR scene is null");
        } else {
            h.selectedScene = (x as SceneTreenode).scene;
        }
    }
    const disp = selectionObserver.subscribe(onSelectionChange);
}

public class TransformHierarchy 
{

    public var effectLoader is CGEffectLoader = the CGEffectLoader;
    public var outlineShader is Shader = bind effectLoader.loadPaintShader(Shape2D.ColorPaint(Color.ORANGE));
    

    public function selectScene from (scene is ResourceScene) to ()
    {
        if (selectedScene <> scene) {
            selectedScene = scene;
            selectNode(scene.selectedResource);
        }
    }

    public var selectedScene is ResourceScene on replace {
	sceneSelection.onNext(selectedScene);
    }

    public var selectedNode is Node on replace {
	var p = selectedNode;
	while (p <> null and not (p is ResourceNode)) {
	    p = p.parent;
	}
        const rn = p as ResourceNode;
        selectedTransform = rn;
        println("selectedNode => {selectedNode}");
        println("selectedTransform => {selectedTransform}");
        selectedScene.selectedResource = rn;
	selection.onNext(selectedTransform);
    };

    public function clearSelection {
	selectedNode = null;
    }

    const undoList = UndoList {};

    postinit {
	undoList.addTarget("selectedNode", &selectedNode);
    }

    public var selectedTransform is TransformNode;

    public var scenes is ResourceScene[] on replace {
        disps;
    }

    var disps = bind foreach (scene in scenes) scene.observeSelection().subscribe(function from (n is ResourceNode) to () {
            println("SCENE {scene.id} => {n.id}");
            selectedScene = scene;
            selectNode(n);
    });

    public function selectNode from (n is Node) to ()
    {
	selectedNode = n;
    }

    public function deleteSelection to () 
    {
	var old = selectedTransform;
	var prev is Node = null;
	var next is Node = null;
	var t is Node;
        for (scene in scenes) {
            var root = scene.root;
            root.foldLeft((), 
                          function from (_ is (), n is Node) to () {
                              if (n == old) {
                                  t = prev;
                              } else {
                                  if (prev == t) {
                                      next = n; 
                                  }
                                  prev = n;
                              }
		      });
            if (t <> null) {
                break;
            }
        }
        println("deleting : {old}");
        println("t={t}");
        println("next={next}");
        if (t == null) {
            t = next;   
        } 
        selectNode(t);
    }

    const reparentSubject = Subject of Reparent {}

    public function observeNodeMoved to Observable of Reparent { reparentSubject }

    public function move from (src is Node, target is Node) to ()
    {
	const srcParent = src.parent as Group;
        var fromParent is Node = srcParent;
        var toParent is Node;
        if (srcParent is ResourceGroup) {
            delete src as ResourceNode from (srcParent as ResourceGroup).resources;
        } else if (src is SceneAPI) {
            //println("src={src}, target={target}");
            if (target is SceneAPI) {
                const x = src as SceneAPI;
                const y = target as SceneAPI;
                const i = f3.util.Sequences.indexOf(scenes, y.scene);
                delete (x.scene as ResourceScene) from scenes;
                insert (x.scene as ResourceScene) before scenes[i];
            }
            return;
        } else {
            delete src from srcParent.content;
        }
	var targetGroup is Group;
	if (not (target is Group) or (target is ResourceNode and not (target is GroupResourceNode))) {
	    const parent = target.parent as Group;
	    const i = f3.util.Sequences.indexOf(parent.content, target);
            println("inserting into: {parent} at {i}");
            if (parent is ResourceGroup) {
                const g = parent as ResourceGroup;
                insert src as ResourceNode after g.resources[i];
            } else {
                insert src after parent.content[i];
            }
            toParent = parent;
	} else {
	    const parent = target as Group;
            println("inserting into: {parent}");
            if (parent is ResourceGroup) {
                const g = (parent as ResourceGroup);
                insert src as ResourceNode before g.resources[0];
            } else {
                insert src before parent.content[0];
            }
            toParent = parent;
	}
        if (src is ResourceNode) {
            println("notifying reparent: {src}");
            reparentSubject.onNext(Reparent 
                                   {
                                       node: src as ResourceNode;
                                       fromParent: fromParent;
                                       toParent: toParent;
                                   });
        }
    }

    const selection = Subject of TransformNode {};
    const sceneSelection = Subject of ResourceScene {};

    public function observeSelection to Observable of TransformNode {
	selection;
    }

    public function observeSceneSelection to Observable of ResourceScene {
	sceneSelection;
    }
	
}