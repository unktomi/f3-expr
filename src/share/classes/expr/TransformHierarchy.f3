package expr;
import expr.undo.*;
import f3.media.scene.*;
import f3.util.*;
import f3.util.Observer.*;
import expr.Names.*;

public class Treenode is Treeview.Treenode {
    public var n is Node;
    override var label = bind if (n.parent is ResourceNode) then "Main Scene" else if (n.id <> "") then formatName(n.id) else "{n}";
    function asGroup from (n is Node) to Group { if (n is Group) then n as Group else null }
    override var canOpen = bind { var g = asGroup(n); g.content.size() > 0 }
    override var children = bind foreach (x in (n as Group).content) Treenode { n: bind x };
    override function open to () {
	super.open();
	println("open {n} => {children.size()}");
    }
}

public class Model is Treeview.Treemodel {
    public const h is TransformHierarchy;
    override var root = Treenode { n:  bind h.root };
    public var selection is Treenode on replace {
	if (h.selectedNode <> selection.n) {
	    selectionObserver.onNext(selection);
	}
    }
    const selectionListener = 
	h.observeSelection().subscribe(function from (tn is TransformNode) to () 
				       {
					   foldLeft((), 
						    function from (_ is (), t is Treeview.Treenode) to () {
							const ht = t as Treenode;
							const n = ht.n;
							if (n == tn) {
							    selection = ht;
							}
						    })
				       });
    function onSelectionChange from (tn is Treeview.Treenode) to ()
    {
	h.selectedNode = (tn as Treenode).n
    }
    const disp = selectionObserver.subscribe(onSelectionChange);
}

public class TransformHierarchy 
{
    public var selectedNode is Node on replace {
	var p = selectedNode;
	while (p <> null and not (p is ResourceNode)) {
	    p = p.parent;
	}
	selectedTransform = p as ResourceNode;
	selection.onNext(selectedTransform);
    };

    public function clearSelection {
	selectedNode = null;
    }

    const undoList = UndoList {};

    postinit {
	undoList.addTarget("selectedNode", &selectedNode);
    }

    public var selectedTransform is TransformNode;

    public var root is Node;

    public function selectNode from (n is Node) to ()
    {
	selectedNode = n;
    }

    public function deleteSelection {
	var old = selectedTransform;
	var prev is ResourceNode = null;
	var next is ResourceNode = null;
	var t is Node;
	root.foldLeft((), 
		      function from (_ is (), n is Node) to () {
			  if (n == old) {
			      if (prev == null) {
				  prev = n as ResourceNode;
			      } else t = prev;
			  } else if (n is ResourceNode) {
			      if (prev == t) {
				  next = n as ResourceNode;
			      }
			      prev = n as ResourceNode;
			  }
		      });
	if (t == null) {
	    t = next;
	}
	selectNode(t);
    }

    public function move from (src is Node, target is Node) to ()
    {
	const srcParent = src.parent as Group;
	delete src from srcParent.content;
	var targetGroup is Group;
	if (not (target is Group)) {
	    const parent = target.parent as Group;
	    const i = f3.util.Sequences.indexOf(parent.content, target);
	    insert src after parent.content[i];
	} else {
	    const parent = target as Group;
	    insert src into parent.content;
	}
    }

    const selection = Subject of TransformNode {};

    public function observeSelection to Observable of TransformNode {
	selection;
    }
	
}