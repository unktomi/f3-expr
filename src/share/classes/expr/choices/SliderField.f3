package expr.choices;
import f3.media.scene.*;
import f3.media.scene.Shape2D.*;
import f3.media.scene.Text.Font;
import f3.media.input.*;
import f3.math.*;
import f3.math.LinearMath.*;
import f3.util.*;
import f3.util.Observer.*;
import java.lang.Math;
import expr.*;

function clamp from (n is Number, lo is Number, hi is Number) to Number
{
    Math.min(Math.max(n, lo), hi);
}

const FG = ColorPaint(Color.color(.2, .2, .2));
const BG = ColorPaint(Color.color(.85, .85, .85, 1));

public class SliderField is AbstractNode
{
    public var font is Font;
    public var height is Number = bind textArea.font.height();
    public var width is Number = 64;

    public var t is Number on replace {
	setText(getText(t));
    }

    postinit {
	setText(getText(t))
    }

    protected function getText from (t is Number) to String
    {
	"{t}"
    }

    public function setText from (text is String) to ()
    {
	textArea.setText(text);
    }

    public var textInputEnabled = true;

    var textAreaEnabled = false;

    public const textArea is Text.Field = Text.Field {
	foreground: FG;
        background: null;
	width: bind width+4;
        height: bind height;
        font: bind if (font == null) then layoutEngine.createFont(Names.DEFAULT_FONT) else font;
	transform: translate(0, 1);
	rightJustified: true;
        pickable: bind textAreaEnabled and textInputEnabled;
        editable: bind textInputEnabled;
        override function onKeyInput from (event is KeyboardEvent) to ()
        {
            if (filterKeyInput(event)) {
                super.onKeyInput(event);
            }
        }
    };

    public function filterKeyInput from (event is KeyboardEvent) to Boolean
    {
        true
    }

    var textAreaCommit = textArea.observeCommit().subscribe(function from (text is String) to () {
            textAreaEnabled = false;
            onCommit(text);
        });

    const dark = Color.color(0.77, 0.77, 0.77, 0.77);
    const light = Color.color(0.85, 0.85, 0.85);
    const border = Color.color(.5, .5, .5);

    const lightRect is Rectangle = Rectangle {
	fillPaint: bind ColorPaint(light);
	height: bind height;
	width: bind width
    }

    const self = this;
    bound var w = runWidth * t;

    var dragw is Number;
    var runWidth = bind width + dragw;

    const darkRect is Rectangle = Rectangle {
	fillPaint: bind ColorPaint(dark);
	transform: bind translate(-runWidth/2 + w/2, 0);
	height: bind height;
	width: bind w;
        pickable: false;
    }

    const borderRect is Rectangle = Rectangle {
	fillPaint: bind ColorPaint(border);
	transform: bind translate(-runWidth/2 + runWidth * t - 0.5, 0, 0)
	height: bind height;
	width: 1
    }

    override var internalContent = Group {
        cursor: Cursor.Default;
	content: bind
	[lightRect,
        darkRect,
	textArea,
	borderRect]
    } 

    public function setT from (t is Number) to ()
    {
        this.t = t;
    }     
    
    const onFocus = (textArea as Focusable).observeFocused().subscribe(handleTextFocus);

    function handleTextFocus from (isFocused is Boolean) to ()
    {
        println("HANDLE TEXT FOCUS => {isFocused}");
        if (not isFocused) {
            textAreaEnabled = false;
        }
    }

    const onDown = DefaultObserver of MouseEvent {
        override function onNext from (event is MouseEvent) to ()
        {
            println("text area enabled: {textAreaEnabled}");
            if (event.clickCount > 1) {
                textAreaEnabled = true;
                event.scene.setFocus(textArea);
                textArea.selectAll();
                event.stopPropagation();
            }
        }
    };

    const onDrag = DefaultObserver of MouseEvent {
        override function onNext from (event is MouseEvent) to ()
        {     	       		
            setT((event.location.x + width / 2) / width);
        }
    };

    const onUp = DefaultObserver of MouseEvent {
        override function onNext from (event is MouseEvent) to ()
        {     	       		
            if (not textAreaEnabled) {
                onCommit();
            }
        }
    };

    public function onCommit to () {
    }

    public function onCommit from (text is String) to () {
    }

    var disp1 = lightRect.observeMouseDrag().subscribe(onDrag);
    var disp2 = lightRect.observeMouseUp().subscribe(onUp);
    var disp3 = lightRect.observeMouseDown().subscribe(onDown);

    const subject = Subject of Number {};
    public function observeAlpha to Observable of Number { subject }

}