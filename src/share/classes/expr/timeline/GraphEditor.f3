package expr.timeline;
import f3.media.scene.*;
import f3.media.scene.KeyFrame.*;
import expr.*;

public class GraphEditor is Trax {

    public const mainTrax is Trax;
    override var frameRateN = bind this.mainTrax.frameRateN with inverse;
    override var graph = true;
    public var resourceTargets is ResourceTarget[];
    override var clips = bind getChannelBoxes(resourceTargets);

    bound function getChannelBoxes from (targets is ResourceTarget[]) to TimeNode[]
    {
        foreach(x in targets) x.channelBoxes;
    }

    var playheadPos is Duration;

    override protected function handleDelete to ()
    {
        deleteKeys();
    }

    function deleteKeys to () 
    {
        foreach (resourceTarget in resourceTargets, box in resourceTarget.channelBoxes.content, clip in (box as TimeGroup).content) {
            const ch = clip as Channel of ?;
            ch.deleteKey();
        }
    }

    override public function setKeys to () 
    {
        for (resourceTarget in resourceTargets, box in resourceTarget.channelBoxes.content, clip in (box as TimeGroup).content where clip.pickableInScene) {
            const ch = clip as Channel of Number;
            const k = ch.pickKey(ch.localTime);
            if (k <> null) {
                ch.setKey(k.interpolator);
            } else {
                ch.setKey(KeyFrame.Linear);
            }
        }
        super.setKeys();
    }

    override protected function onPlayheadChange from (event is Duration) to ()
    {
        super.onPlayheadChange(event);
        if (playheadPos <> event) {
            //println("playhead change {playheadPos} => {event}");
            playheadPos = event;
            for (resourceTarget in resourceTargets) {
                const rn = (resourceTarget as ResourceNode);
                rn.timeline.enabled = true;
                rn.timeline.setPlayhead(event);
                rn.timeline.enabled = false;
            }
        }
    }
    
    override function refreshPlayhead to () 
    {
        super.refreshPlayhead();
        /*
        const rn = (resourceTarget as ResourceNode);
        rn.timeline.enabled = true;
        rn.timeline.setPlayhead(playheadPos);
        rn.timeline.enabled = false;
        */
    }
}