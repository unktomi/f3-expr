package expr;
import f3.media.scene.*;

public class MaResourceTimeNode is ResourceTimeNode {
    override var url = bind model.url;
    public var model is Ma.Model;
    override var content = bind model.getTemporalRoot();
    var mapped = new java.util.HashMap of (String, TimeNode);
    override function lookup from (n is String) to TimeNode {
        var rtn = mapped.get(n);
        if (rtn <> null) return rtn;
        var r = super.lookup(n);
        println("Ma Resource Time Node {url} lookup: {n} => {r}");
        if (r == null) {
            const sharp2 = n.lastIndexOf("#");
            var clipName = n;
            if (sharp2 > 0) {
                const sharp1 = n.lastIndexOf("#", sharp2-1);
                if (sharp1 > 0) {
                    clipName = n.substring(sharp2+1);
                    const libName = n.substring(sharp1+1, sharp2);
                    println("clipLibs: {model.getClipLibraries()}");
                    for (clipLib in model.getClipLibraries() where clipLib.id == libName) {
                        const clip = clipLib.lookup(clipName);
                        if (clip <> null) {
                            if (rtn == null) {
                                rtn = 
                                    if (clip is ResourceTimeNode) 
                                        then clip as ResourceTimeNode 
                                        else ResourceTimeNodeWrapper {
                                                url: n;
                                                wrapped: clip as TimeGroup;
                                            };
                                mapped.put(n, rtn);
                            }
                            r = rtn;
                            break;
                        }
                    }
                } 
            } else { // hack...
                for (clipLib in model.getClipLibraries()) {
                    var j = clipLib.lookup(clipName);
                    if (j <> null) {
                        r = j;
                        break;
                    }
                }
            }
        }
        return r;
    }
}

public class ResourceTimeNode is TimeGroup, ResourceTarget {
    override function createChannels from (parent is ChannelBoxGroup) to (Channel of Number)[]
    {
        []
    }
    override public function findTarget from (id is String) to Object 
    {
        if (id == "") then this else lookup(id);
    }
    override var id = bind url;
    public var spatial is ResourceNode;

    public function unwrapContent to TimeNode[] {
         content
    }
}


