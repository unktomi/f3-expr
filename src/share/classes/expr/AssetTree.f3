package expr;
import expr.Treeview.*;
import f3.media.scene.*;
import expr.ResourceNode.*;
import expr.prog.Expression;
import expr.prog.Expression.Member;
import expr.prog.Expression.FunctionMember;
import expr.inspector.Inspector;
import f3.math.*;
import f3.reflect.*;

public abstract class Asset {
    public var url is String;
    public var name = bind { var slash = url.lastIndexOf("/"); url.substring(slash+1) };
    public readonly var containedAssets is Asset[];
}

public class AssetGroup is Asset {
    public var content is Asset[];
    override var containedAssets = bind content;
}

public class MaAsset is Asset {
    public const model is Ma.Model;
    override var url = bind model.url;
    public var temporalRoot is TimeNode;
    override var containedAssets = bind 
	[foreach (cam in model.getCameras()) CameraAsset { 
		url: "{url}#{cam.id}";
		name: cam.id; 
		camera: cam;
	 },
	 foreach (clipLib in model.getClipLibraries()) ClipLibraryAsset { 
	     url: "{url}#{clipLib.id}";
	     name: clipLib.id;
	     clipLibrary: clipLib;
             temporalRoot: bind temporalRoot;
	 }];
}

public class SceneAsset is Asset {
    override var name = "Scene";
    protected var count = 1;
    public function getScene to ResourceScene {
	ResourceScene {
            background: null;
            camera: PerspectiveCamera {};
	    id: "Scene {count++}";
	}
    }
}

public class Scene2DAsset is SceneAsset {
    override var name = "2D Scene";
    override public function getScene to ResourceScene {
	ResourceScene {
            background: null;
            camera: Camera2D { near: -1000, far: 1000, tz: 900 };
	    id: "2D Scene {count++}";
	}
    }
}

public class TextFieldAsset is Asset {
    override var name = "Text Input";
    var count = 1;
    public const webBrowserFactory is AbstractWebBrowserFactory = the AbstractWebBrowserFactory;
    public const pathFactory is Shape2D.Path2DFactory = the Shape2D.Path2DFactory;
    public const layoutEngine is Text.LayoutEngine = the Text.LayoutEngine;
    public const effectLoader is CGEffectLoader = the CGEffectLoader;
    public const soundLoader is SoundLoader = the SoundLoader;
    public const movieLoader is MovieLoader = the MovieLoader;
    public const imageLoader is ImageLoader = the ImageLoader;
    public function getTextField 
        to ResourceTextField 
    {
	ResourceTextField {
            override var url = bind "text-input://{id}"
	    id: "Text Input {count++}";
	}
    }
}

public class CameraAsset is Asset {
    public const camera is Camera;
}

public class ClipAsset is Asset {
    public function getClip to TimeNode { null }
}

public class ClipLibraryAsset is Asset {
    public const clipLibrary is TimeGroup;
    override var containedAssets = bind foreach (c in clipLibrary.content) makeClipAsset(c);
    public var temporalRoot is TimeNode;
    function makeClipAsset from (c is TimeNode) to ClipAsset {
	ClipAsset { 
	    url: "{url}#{c.id}";
	    name: c.id; 
	    override function getClip to TimeNode { const j = temporalRoot.lookup(c.id); if (j == null) then c else j }
	}
    }
}

public class TimeLayerAsset is ClipAsset {
    override var name = "Time Layer";
    override var url = "timenode://Layer";
    var count = 1;
    override public function getClip to TimeNode {
	TimeGroup {
	    id: "Time Layer {count++}";
	}
    }
}

public class TransitionLayerAsset is ClipAsset {
    override var name = "Transition Layer";
    override var url = "timenode://TransitionLayer";
    var count = 1;
    override public function getClip to TimeNode {
	TransitionLayer {
	    id: "Transition Layer {count++}";
	}
    }
}

public class BlendLayerAsset is ClipAsset {
    override var name = "Blend Layer";
    override var url = "timenode://BlendLayer";
    var count = 1;
    override public function getClip to TimeNode {
	BlendLayer {
	    id: "Blend Layer {count++}";
	}
    }
}


public class ImageAsset is Asset {
}

public class WebAsset is Asset {
}

public class SVGAsset is Asset {
}

public class ExprAsset is Asset {
}

public class AssetTreenode is Treenode {
    public var asset is Asset;
    override var canOpen = bind { var n = asset.containedAssets.size(); n > 0 };
    override var children = bind foreach (x in asset.containedAssets) AssetTreenode {asset: x};
    override var label = bind asset.name;
    override function open {
	children;
	super.open();
    }
}

public class ResourceNodeAsset is Asset {
    override var url = bind rn.url;
    public const rn is ResourceNode;
}

public function makeAsset from (r is ResourceNode) to Asset {
    if (r is MaResourceNode) {
	MaAsset {
	    model: (r as MaResourceNode).model;
            temporalRoot: r.temporal;
	}
    } else {
        ResourceNodeAsset {
            rn: r;
        }
    }
}

public class PackageAsset is Asset {
    public var packages is PackageAsset[];
    public var classes is ClassAsset[];
    override var containedAssets = bind [packages, classes]
}

public class RootPackageAsset is PackageAsset {
    const println = MemberAsset {
          name: "Print Line"
          member: FunctionMember {m: Reflect.getFunction("expr.ExprNode", "printLine", ["Object"]) }
    };
    public const primitives is TypeAsset[] = 
        [PrimitiveTypeAsset {
                name: "Boolean";
                t: Reflect.BOOLEAN_TYPE;
                containedAssets: foreach (m in Expression.BOOL_MEMBERS) {
                    MemberAsset {
                        member: m;
                    }
                }
        },
        PrimitiveTypeAsset {
                name: "Integer";
                t: Reflect.INTEGER_TYPE;
                containedAssets: foreach (m in Expression.INT_MEMBERS) {
                    MemberAsset {
                        member: m;
                    }
                }
        },
        PrimitiveTypeAsset {
                name: "Number";
                t: Reflect.NUMBER_TYPE;
                containedAssets: foreach (m in Expression.NUM_MEMBERS) {
                    MemberAsset {
                        member: m;
                    }
                }
        },
        ClassAsset {
                className: "String";
                clazz: Reflect.STRING_TYPE;
        }/*,
        PrimitiveTypeAsset {
                name: "Events";
                t: Reflect.OBSERVABLE_TYPE;
                containedAssets: foreach (m in Expression.OBSVB_MEMBERS) {
                    MemberAsset {
                        member: m;
                    }
                }
        }*/];
    override var containedAssets = bind [println, primitives, packages, classes]
}

public class TypeAsset is Asset {
    public var t is F3Type;
    override var name = bind t.getName();
}

public class PrimitiveTypeAsset is TypeAsset {
}

public class ClassAsset is TypeAsset {
    public const className is String;
    public var classes is ClassAsset[];
    override var name = bind Names.formatClassName(className);
    public var clazz is F3ClassType = bind getClassType();
    function getClassType to F3ClassType {
        const t = Reflect.getType(className.replace("/", "."));
        if (t is F3ClassType) {
            return t;
        }
        println("NOT a class: {className}");
        return null;
    }
    override var t = bind clazz;
    override var containedAssets = bind [classes, foreach (m in Expression.introspect(clazz, true)) MemberAsset {
        member: m;
        }];
}

public class MemberAsset is Asset {
    public const member is Member;
    override var name = bind member.name;
    //bind Names.formatName(member.name);
}

const packMap = new java.util.HashMap of (String, PackageAsset);

function findPackage from (str is String) to PackageAsset {
    var r = packMap.get(str);
    if (r == null) {
        println("FIND PACK: {str}");
        if (str == "") {
            r = RootPackageAsset {
                name: "Eventual";
            }
            packMap.put(str, r);
            return r;
        }
        const slash = str.lastIndexOf("/");
        const parentName = if (slash < 0) then "" else str.substring(0, slash);
        const name = str.substring(slash + 1);
        const p = findPackage(parentName);
        r = PackageAsset {
            name: name;
        }
        insert r into p.packages;
        packMap.put(str, r);
    }
    return r;
}

const java_included = [
"java/io",
"java/lang",
"java/lang/annotation",
"java/lang/ref",
"java/lang/reflect",
"java/math",
"java/net",
"java/nio",
"java/nio/channels",
"java/nio/channels/spi",
"java/nio/charset",
"java/nio/charset/spi",
"java/security",
"java/security/spec",
"java/sql",
"java/text",
"java/util",
"java/util/concurrent",
"java/util/concurrent/atomic",
"java/util/concurrent/locks",
"java/util/jar",
"java/util/logging",
"java/util/prefs",
"java/util/regex",
"java/util/zip",
"javax/crypto",
"javax/crypto/interfaces",
"javax/crypto/spec",
"javax/net",
"javax/net/ssl",
"javax/security/auth",
"javax/security/auth/callback",
"javax/security/auth/login",
"javax/security/auth/x500",
"javax/security/cert",
"javax/xml",
"javax/xml/datatype",
"javax/xml/namespace",
"javax/xml/parsers",
"javax/xml/transform",
"javax/xml/transform/dom",
"javax/xml/transform/sax",
"javax/xml/transform/stream",
"javax/xml/validation",
"javax/xml/xpath"];


const excluded = ["jogamp", "com/sun", "com/jogamp", "org/", "jogl", "f3/jogl", "f3/animation", "f3/date", "f3/reflect", "f3/f3unit", "f3/lang", "javax", "expr", "com"];


function getPackageAssets to PackageAsset {
    const bcp = java.lang.System.getProperty("boot.class.path");
    const cp = java.lang.System.getProperty("java.class.path");
    const u = new java.net.URL("{__DIR__}classlist.txt");
    const reader = new java.io.BufferedReader(new java.io.InputStreamReader(u.openStream()));
    var line is Object;
    while ((line = reader.readLine()) <> null) {
        const name = line.toString();
        const slash = name.lastIndexOf("/");
        if (slash < 0) continue;
        const parentName = name.substring(0, slash);
        var bad = true;
        println("classname=>{name}.");
        println("parentName=>{parentName}.");
        for (i in java_included) {
            if (i == parentName) {
                bad = false;
                break;
            }
        }
        if (bad) continue;
        const pack = findPackage(parentName);
        var className = name;
        const dollar = className.lastIndexOf("$");
        var containedClassName is String;
        if (dollar > 0) {
            containedClassName = className;
            className = className.substring(0, dollar);
            continue; // screw it...
        }
        var target is ClassAsset = null;
        for (clazz in pack.classes) {
            if (clazz.className == className) {
                target = clazz;
                break;
            }
        }
        if (target == null) {
            insert (target = ClassAsset { className: className }) into pack.classes;
        }
        if (dollar > 0) {
            insert ClassAsset { className: containedClassName} into target.classes;
        }
    }
    for (x in [bcp.split(java.io.File.pathSeparator), cp.split(java.io.File.pathSeparator)]) {
        println("CLASSPATH: {x}");
        const f = new java.io.File(x);
        if (f.isDirectory()) {
            for (file in f.listFiles()) {
                const name = file.getName();
                if (not name.endsWith(".class")) {
                    continue;
                }
                const slash = name.lastIndexOf("/");
                if (slash < 0) continue;
                const parentName = name.substring(0, slash);
                const pack = findPackage(parentName);
                // @TODO
            }
        } else if (f.exists()) {
            const jar = new java.util.jar.JarFile(f.getAbsolutePath());
            const e = jar.entries();
            while (e.hasMoreElements()) {
                const entry = e.nextElement();
                const name = entry.getName();
                if (not name.endsWith(".class")) {
                    continue;
                }

                if (name.contains("$Mixin") or name.contains("BFunc$") or name.contains("$ObjLit") or name.contains("Local$") or name.contains("$Script")) {
                    continue;
                }
                println("class asset: {name}");
                var bad = false;
                for (i in [0..9]) {
                    if (name.contains("${i}")) {
                        bad = true;
                        break;
                    }
                }
                if (bad) continue;
                if (name.startsWith("java/")) {
                    bad = true;
                    for (i in java_included) {
                        if (name == i) {
                            bad = false;
                            break;
                        }
                    }
                } else {
                    for (i in excluded) {
                        if (name.startsWith(i)) {
                            bad = true;
                            break;
                        }
                    }
                }
                if (bad) continue;
                const slash = name.lastIndexOf("/");
                if (slash < 0) continue;
                const parentName = name.substring(0, slash);
                const pack = findPackage(parentName);
                var target is ClassAsset = null;
                var className = name.substring(0, name.length()-6);
                var dollar = className.lastIndexOf("$");
                var containedClassName is String;
                if (dollar > 0) {
                    containedClassName = className;
                    className = className.substring(0, dollar);
                }
                for (clazz in pack.classes) {
                    if (clazz.className == className) {
                        target = clazz;
                        break;
                    }
                }
                if (target == null) {
                    insert (target = ClassAsset { className: className }) into pack.classes;
                }
                if (dollar > 0) {
                    insert ClassAsset { className: containedClassName} into target.classes;
                }
            }
        }
    }
    return packMap.get("");
}

public class AssetModel is Treemodel {
    public const webBrowserFactory is AbstractWebBrowserFactory = the AbstractWebBrowserFactory;
    public const pathFactory is Shape2D.Path2DFactory = the Shape2D.Path2DFactory;
    public const layoutEngine is Text.LayoutEngine = the Text.LayoutEngine;
    public const effectLoader is CGEffectLoader = the CGEffectLoader;
    public const soundLoader is SoundLoader = the SoundLoader;
    public const movieLoader is MovieLoader = the MovieLoader;
    public const imageLoader is ImageLoader = the ImageLoader;

    public var resources is ResourceGroup;
    public bound var packageAssets = getPackageAssets();
    public function getCodeModel to Treemodel {
        Treemodel {
            root: AssetTreenode {
                asset: packageAssets;
            }
        }
    }
    const textFieldAsset = TextFieldAsset {
        pathFactory: bind pathFactory;
        layoutEngine: bind layoutEngine;
        imageLoader: bind imageLoader;
        effectLoader: bind effectLoader;
        soundLoader: bind soundLoader; 
        movieLoader: bind movieLoader;
    };

    const temporal = AssetGroup {
        name: "Temporal";
        content: [TimeLayerAsset {}, TransitionLayerAsset{}, BlendLayerAsset {}];
    };

    const spatial = AssetGroup { 
        name: "Spatial", 
        content: [Scene2DAsset {}, textFieldAsset];
    } 

    override var root = AssetTreenode {
	asset: Asset {
	    name: "Assets";
	    containedAssets: bind 
	    [packageAssets,
             temporal,
             spatial, 
             foreach (r in resources.resources) makeAsset(r)]
	}
    }

    public function findTypeAsset from (t is String) to TypeAsset 
    {
        const comps is String[] = t.split("[.]");
        const slashName = t.replace(".", "/");
        function applyPath from (comps is String[], tn is Treenode) to TypeAsset
        {
            const n = tn as AssetTreenode;
            if (comps == []) {
                if (n.asset is TypeAsset) {
                    return n.asset as TypeAsset;
                }
                return null;
            }
            println("comps=>{comps}");
            for (c in n.children) {
                const cn = c as AssetTreenode;
                println("asset: {cn.asset.name} = {cn.asset}");
                if (cn.asset is PackageAsset) {
                    if (cn.asset.name == comps[0]) {
                        return applyPath(comps[1..], c);
                    }
                } else if (cn.asset is ClassAsset) {
                    const clazzAsset = cn.asset as ClassAsset;
                    if (clazzAsset.className == slashName) {
                        return clazzAsset;
                    }
                } else if (cn.asset is PrimitiveTypeAsset) {
                    const prim = cn.asset as PrimitiveTypeAsset;
                    if  (prim.t.getName() == t) {
                        return prim;
                    }
                }
            }
            return null;
        }
        return applyPath(["Eventual", comps], root);
    }
}