package expr.prog;
import java.lang.Math;
import f3.math.*;
import f3.math.LinearMath.*;
import expr.*;
import expr.Treeview.*;
import f3.reflect.*;
import expr.Reflect.*;
import f3.util.*;
import f3.util.Observer.*;
import f3.lang.*;
import f3.media.input.*;
import f3.media.scene.*;
import f3.media.scene.Shape2D.*;
import expr.Names.*;


var exprMap = new java.util.HashMap of (F3ClassType, Member[]);

const MAT4_TYPE = ctx.findClass("f3.math.Mat4");

function makeFunMember from (name is String, params is F3Type[], ret is F3Type) to Member 
{
    FunctionMember {
	ft: ctx.makeFunctionType(params, ret);
	name: name;
	t: ret;
    }
}

const NUM_MEMBERS = 
    foreach (op in ["+", "-", "*", "/", "remainder"]) {
	makeFunMember(op, [NUMBER_TYPE, NUMBER_TYPE], NUMBER_TYPE)
    };
const INT_MEMBERS = 
    foreach (op in ["+", "-", "*", "/", "remainder"]) {
	makeFunMember(op, [INTEGER_TYPE, INTEGER_TYPE], INTEGER_TYPE)
    };
const BOOL_MEMBERS = 
    [foreach (op in ["and", "or"]) {
	makeFunMember(op, [BOOLEAN_TYPE, BOOLEAN_TYPE], BOOLEAN_TYPE)
	}, makeFunMember("not", [BOOLEAN_TYPE], BOOLEAN_TYPE)];

public function introspect from (t is F3Type) to Member[]
{
    if (t.getName() == "org.f3.runtime.F3Object" or
	t.getName() == "org.f3.runtime.F3Base" or
	t.getName() == "java.lang.Object") {
	return []
    }
    if (t is F3ClassType) then introspect(t as F3ClassType) else if (true) [] else {
	    if (t == NUMBER_TYPE) 
		then NUM_MEMBERS
		else if (t == INTEGER_TYPE)
		    then INT_MEMBERS 
		    else if (t == BOOLEAN_TYPE)
			then BOOL_MEMBERS
			else []
    }
}

public function introspect from (clazz is F3ClassType) to Member[]
{
    if (clazz == null) return [];
    if (exprMap.containsKey(clazz)) {
	return exprMap.get(clazz);
    }
    var result is Member[];
    const funs = clazz.getFunctions(true);
    for (f in funs where f.isPublic() and not f.getName().contains("$") and 
	     OBJECT_TYPE <> f.getDeclaringClass() 
	 ) { 
	const ft = f.getType();
	var rt = ft.getReturnType();
	var toInsert is Member;
	if (ft.minArgs() == 0) {
	    var rt_t = rt;
	    if (SUBJECT_TYPE.isAssignableFrom(rt) or OBSERVABLE_TYPE.isAssignableFrom(rt) or OBSERVER_TYPE.isAssignableFrom(rt)) {
		rt_t = getTypeArguments(rt)[0];
	    } else {
	    }	
	    if (SUBJECT_TYPE.isAssignableFrom(rt)) {
		toInsert = Member {
		    m: f;
		    t: rt_t
                    rt: rt;
		    isObservable: true, isObserver: true;
		}
		println("Subject of ({getTypeArguments(rt)})");
	    }  else if (OBSERVABLE_TYPE.isAssignableFrom(rt)) {
		toInsert = Member {
		    m: f;
		    t: rt_t
                    rt: rt;
		    isObservable: true;
		}
		println("Observable of ({getTypeArguments(rt)})");
	    } else if (OBSERVER_TYPE.isAssignableFrom(rt)) {
		toInsert = Member {
		    m: f;
		    t: rt_t
                    rt: rt;
		    isObserver: true;
		}
		println("Observer of ({getTypeArguments(rt)})");
	    } else {
		if (UNIT_TYPE == rt) {
		    toInsert = Member {
			m: f;
			t: UNIT_TYPE;
                        rt: rt;
			isObservable: false, isObserver: true;
		    }
		}
	    }
	} else {
	    if (UNIT_TYPE <> rt) {
		continue;
	    }
	    if (ft.minArgs() == 0) {
		// observer of ()
		rt = UNIT_TYPE;
		toInsert = Member {
		    m: f;
		    t: rt;
                    rt: rt;
		    isObserver: true;
		}
	    } else if (ft.minArgs() == 1) {
		// observer of ft.getArgumentType(0)
		//println("{f.getName()} => Observer of ({ft.getArgumentType(0)})");
		toInsert = Member {
		    m: f;
		    t: ft.getArgumentType(0);
                    rt: rt;
		    isObserver: true;
                    isObservable: false;
		}
	    } else {
		// observer of (ft.getArgumentType(0), ft.getArgumentType(1))
		continue;
	    }
	}
	if (toInsert <> null) {
	    insert toInsert into result;
	}
    }
    const vars = clazz.getVariables(true);
    for (v in vars where not v.getName().contains("$") and not v.getName().startsWith("bnds") and not v.isStatic()) {
	var toInsert is Member;
	if (true or not v.isPublicInit() and not v.isDef()) {
	    var rt = v.getType();
	    var isObs = SUBJECT_TYPE.isAssignableFrom(rt) or OBSERVABLE_TYPE.isAssignableFrom(rt);
	    if (isObs or OBSERVER_TYPE.isAssignableFrom(rt)) {
		rt = getTypeArguments(rt)[0];
	    }	
	    if ((not v.isPublicRead() and not v.isPublicInit() and not v.isDef()) and v.isPublic()) {
		println("{v.getName()} => Subject of ({rt})");
		toInsert = Member {
		    m: v;
		    t: rt
		    isObserver: true;
		    isObservable: true;
		}
	    } else if (v.isPublic() or v.isPublicRead() or v.isPublicInit()) {
		println("{v.getName()} => Observable of ({rt})");
		toInsert = Member {
		    m: v;
		    t: rt
		    isObservable: isObs or v.isPublic();
		}
	    }
	}
	if (toInsert <> null) {
	    insert toInsert into result;
	}
    }
    result = foreach (x in result where not x.t.isAssignableFrom(MAT4_TYPE)) x;
    exprMap.put(clazz, result);
    return result;
}

public class Member {
    public function serialize to MemberNode {
        MemberNode {
            declaringClass: m.getDeclaringClass().getName();
            name: m.getName();
            outputType: t.getName();
        }
    }
    public const rt is F3Type;
    public const m is F3Member; 
    public const t is F3Type;
    public const name = m.getName();
    public var isObservable is Boolean;
    public var isObserver is Boolean;
    public function getMembers to Member[]
    {
	Expression.introspect(t);
    }

    function toObservable to String {
        const app = toApply();
        if (OBSERVABLE_TYPE.isAssignableFrom(t)) {
            return app;
        }
        return "f3.util.Observables.observe(&{app})";
    }

    function toApply to String {
        toApply("");
    }

    function toApply from (arg is String) to String {
	if (m is F3FunctionMember) then "{if (m.isStatic()) then m.getName() else name}({arg})" else "{name}";
    }

    override function toString to String
    {
	"m={m},t={t},name={name},isObserver={isObserver},isObservable={isObservable}";
    }
}

public class FunctionMember is Member {
    public const ft is F3FunctionType;
    override public function serialize to MemberNode {
        FunctionMemberNode {
            declaringClass: m.getDeclaringClass().getName();
            name: m.getName();
            outputType: t.getName();
            inputTypes: foreach (i in [0..<ft.minArgs()]) ft.getArgumentType(i).getName();
        }
    }
}

function argName from (ft is F3FunctionType, i is Integer) to String {
    const t = ft.getArgumentType(i);
    const n = t.getName();
    const dot = n.lastIndexOf(".");
    return n.substring(dot+1);
}

function resultName from (ft is F3FunctionType) to String {
    ft.getReturnType().getName();
}

public interface Expression {
    public bound function getName to String;
    public function getType to F3Type;
    override function toString { "{getClass()}: {getName()} / {getType()}" }
    public function toSource to String { "" }
}

public abstract class ObjectExpression is Expression {
    public var inputMembers is Member[];
    public var outputMembers is Member[];
    public var inputs is InputMemberExpression[] = bind foreach (p in inputMembers) 
        InputMemberExpression {
        target: this;
        member: p;
    }
    public var outputs is OutputMemberExpression[] = bind foreach (p in outputMembers) 
        OutputMemberExpression {
        source: this;
        member: p;
    }
}

abstract class VarContextExpression is ObjectExpression {
    public var varContext is Context.ClosureVarContext;
    override bound function getName to String { varContext.varName }
    override function toSource { "(getVar(\"{varContext.varName}\") as {getType().getName()})" }
}

abstract class TimeNodeExpression is ObjectExpression {
    public var timeNode is TimeNode;
    override bound function getName to String { timeNode.id }
    override function toSource { "(getClip(\"{timeNode.id}\") as {getType().getName()})" }
}

abstract class NodeExpression is ObjectExpression {
    public var node is Node;
    override bound function getName to String { node.id }
    override function toSource { "(getNode(\"{node.id}\") as {getType().getName()})" }
}

public interface MemberExpression is Expression {
    public var member is Member;
    override bound function getName to String { member.name }
}

public interface ObservableExpression is Expression {
    public var observers is ObserverExpression[];
}

public interface ObserverExpression is Expression {
    public var observable is ObservableExpression;
}

public interface VarExpression is MemberExpression {
    override function getType to F3Type { member.t }
}

function getIVar from (ob is ObserverExpression) to String {
    var depth = 0;
    var obs = ob;
    while (true) {
	var b = obs.observable;
	if (b is Result) {
	    b = (b as Result).source.inputs[0].observable;
	} 
	if (b is ObserverExpression) {
	    obs = b as ObserverExpression;
	    depth++;
	} else {
	    break;
	}
    }
    if (depth == 0) then "i" else "i{depth}";
}

public class GetVar is VarExpression, ObservableExpression, ObserverExpression {
    override public function toSource to String {
	if (observers == []) {
	    return "";
	}
	const i = getIVar(this);
	if (observable is MemberExpression and (observable as MemberExpression).member.isObservable) {

	    "(foreach ({i} in {observable.toSource()}) {i}.{member.toApply()})";
	} else {
	    if (observable == null) {
		if (OBSERVABLE_TYPE.isAssignableFrom(member.rt)) 
		    then "{i}.{member.toApply()}"
		    else "f3.util.Observables.observe(&{i}.{member.toApply()})";
	    } else {
		"(foreach ({i} in {observable.toSource()}) {i}.{member.toApply()})";
		//"{observable.toSource()}.{member.toApply()}";
	    }
	}
    }
}

public class SetVar is VarExpression, ObserverExpression {
}

public class Function is MemberExpression {
    public const fun is F3FunctionMember;
    const ft = fun.getType();
    postinit {
	member = Member {
	    m: fun;
	    t: ft;
	}
    }
    override function getType { ft }
    public var inputs is Parameter[] =
	bind foreach (i in [0..<ft.minArgs()]) {
	Parameter {
	    name: argName(ft, i);
	    target: this;
	    t: ft.getArgumentType(i)
	}
    }
    public var output is Result = Result {
	t: ft.getReturnType()
    }

    override public function toSource to String {
	const observable = inputs[0].observable;
	if (observable is MemberExpression) {
	    const m = observable as MemberExpression;
	    if (true or m.member.isObservable) {
		const i = getIVar(inputs[0]);
		if (fun.isStatic()) {
		    "(foreach ({i} in {observable.toSource()}) {fun.getDeclaringClass().getName()}.{fun.getName()}({i}))";
		} else {
		    "(foreach ({i} in {observable.toSource()}) {i}.{fun.getName()}()";
		}
	    } else {
		if (fun.isStatic()) {
		    "{fun.getName()}({observable.toSource()})";
		} else {
		    "{observable.toSource()}.{fun.getName()}()";
		}
	    }
	} else "";
    }
}

public class Parameter is ObserverExpression {
    public var name is String;
    public var t is F3Type;
    public var target is Function;
    override bound function getName to String { name }
    override function getType to F3Type { t }
}

public class Result is ObservableExpression {
    override bound function getName to String { "return" }
    public var t is F3Type;
    public var source is Function;
    override function getType to F3Type { t }
}

class DataArrow is MeshNode.Instance {
}

class ControlArrow is MeshNode.Instance {
}

public abstract class ExpressionView is AbstractNode {
    public function unlink from () to () {}
    override function toString { "{super.toString()}: {expression}" }
    public const canvas is Canvas;
    public var expression is Expression;
    public bound function getPos to Point3 { getWorldPos() }
    bound function getWorldPos to Point3 { (toSceneTransform * canvas.toLocal).getTranslation() }
    public var pos is Point3;
    public var cellWidth is Number = 150;
    public var cellHeight is Number = bind canvas.cellHeight;
    public var font is Text.Font = bind canvas.font;
    var selected is Boolean = bind canvas.selectedExpr == this;
    public var label is Text.Label = bind Text.Label {
	text: bind formatName(expression.getName());
	height: bind cellHeight;
	width: bind cellWidth;
	font: bind font;
	foreground: bind canvas.textFg;
	background: bind if (selected) then canvas.cellSelectedBg else canvas.cellBg;
	pickable: true;
        indent: 4;
    };
    public var title is Node = bind Group {
           content: bind
           [label,
           Rectangle {
                height: 1;
                width: bind cellWidth;
                fillPaint: bind canvas.textFg;
                pickable: false;
                cy: bind -cellHeight/2;
            }];
    };
    function onDown from (e is MouseEvent) to () 
    {
        canvas.selectedExpr = this;
    }
    function onDrag from (e is MouseEvent) to () 
    {
	println("dragging {label.text}");
	pos += e.picked.dragPoint1 - e.picked.dragPoint0;
    }
    function onUp from (e is MouseEvent) to () 
    {
    }
    var d1;
    var d2;
    var d3;
    postinit {
	d1 = label.observeMouseDown().subscribe(onDown);
	d2 = label.observeMouseUp().subscribe(onUp);
	d3 = label.observeMouseDrag().subscribe(onDrag);
    }

    public abstract function serialize to ExprNode; 
}


class FunctionView is ExpressionView {
    public override function serialize to ExprNode {
        const n = FunNode {
            x: pos.x;
            y: pos.y;
            member: fun.member.serialize();
        }
        canvas.serializationMap.put(this, n);
        n.inputs = foreach (i in inputs) canvas.serialize(i);
        n.output = canvas.serialize(output);
        return n;
    } 
    public var fun is Function;
    override var transform = bind translate(pos);
    override var expression = bind fun;
    var inputs is ParameterView[] = bind foreach (p in fun.inputs) ParameterView {
	canvas: bind canvas;
	parameter: p;
	cellWidth: bind cellWidth;
    };
    var output = ResultView {
	canvas: bind canvas;
	result: bind fun.output;
    };
    const io = Group {
	transform: bind translate(0, -cellHeight);
	content: 
	[
	 Group {
	     content: bind inputs
	 }
	 Group {
	     transform: bind translate(0, -inputs.size() * cellHeight);
	     content: bind output;
	 }]
    };
    override var internalContent = Group {
	content: bind [title, io];
    }

    override function update {
	super.update();
	for (i in inputs) {
	    i.index = indexof i;
	}
    }
}

public class InputMemberExpression is MemberExpression, ObserverExpression {
    override function getType to F3Type { member.t }
    public var target is ObjectExpression;
    override public function toSource to String {
	const i = getIVar(this);
        println("INPUT MEMBER EXPR {this}");
        println("INPUT MEMBER EXPR i={i}");
        var res = 
        if (member.m is F3FunctionMember and (member.m as F3FunctionMember).getType().minArgs() > 0) {
            "(foreach ({i} in {observable.toSource()}) {target.toSource()}.{member.toApply(i)})";
	} else if (observable is MemberExpression and (observable as MemberExpression).member.isObservable) {
	    
	    "(foreach ({i} in {observable.toSource()}) {target.toSource()}.{member.toApply()})";
	} else {
	    if (observable == null) {
		if (true or member.isObservable) 
		    then "{target.toSource()}.{member.toApply()}"
		    else "f3.util.Observables.observe(&{target.toSource()}.{member.toApply()})";
	    } else {
		"(foreach ({i} in {observable.toSource()}) {target.toSource()}.{member.toApply()})";
		//"{observable.toSource()}.{member.toApply()}";
	    }
	}
        println("INPUT MEMBER EXPR res={res}");
        return res;
    }
}

public class OutputMemberExpression is MemberExpression, ObservableExpression {
    override function getType to F3Type { member.t }
    public var source is ObjectExpression;
    override public function toSource to String {
	""
    }
}


public class ObjectView is ExpressionView {

    override var transform = bind translate(pos);

    public var objectExpr is ObjectExpression;
    override var expression = bind objectExpr;

    override function unlink from () to () {
        for (i in inputViews) i.unlink();
        for (i in outputViews) i.unlink();
    }

    public override function serialize to ExprNode {
        const n = ObjNode {
            x: pos.x;
            y: pos.y;
        }
        canvas.serializationMap.put(this, n);
        n.inputs = foreach (i in inputViews) canvas.serialize(i);
        n.outputs = foreach (i in outputViews) canvas.serialize(i);
        return n;
    }

    var inputViews is InputView[] = bind foreach (p in objectExpr.inputs) InputView {
	canvas: bind canvas;
	cellWidth: bind cellWidth;
	expression: p;
	override function getInputType to F3Type { this.expression.getType() }
    };

    var outputViews is OutputView[] = bind foreach (p in objectExpr.outputs) OutputView {
	canvas: bind canvas;
	cellWidth: bind cellWidth;
	expression: p;
	override var resultType = bind this.expression.getType();
    };
    //    var outputViews = bind foreach (r in outputs) OutputView {
    //	canvas: bind canvas;
    //    };
    const io = Group {
	transform: bind translate(0, -cellHeight);
	content: 
	[
	 Group {
	     content: bind inputViews
	 }
	 Group {
	     transform: bind translate(0, -objectExpr.inputs.size() * cellHeight);
	     content: bind outputViews
	 }]
    };

    override var internalContent = Group {
	content: bind [title, io];
    }

    override function update {
	super.update();
	for (i in inputViews) {
	    i.index = indexof i;
	}
	for (i in outputViews) {
	    i.index = indexof i;
	}
    }
}


class GetVarView is LinkedView {
    public override function serialize to ExprNode {
        const n = GetNode {
            x: pos.x;
            y: pos.y;
            member: get.member.serialize();
        }
        canvas.serializationMap.put(this, n);
        foreach (link in tv.getLinks()) canvas.serialize(link);
        return n;
    }
    
    public var get is GetVar;
    const tv is GetTreeview = GetTreeview {
        canvas: bind canvas;
        width: 150;
        height: 200;
        get: bind get;
    }
    override var transform = bind translate(pos);
    override var expression = bind get;
    override var internalContent = Group {
	content: bind tv;
    };
    override bound function getLinkPos to Point3 { getWorldPos() }
}

class LinkView is ExpressionView {
    override public function serialize to ExprNode {
        const n = LinkNode {}
        canvas.serializationMap.put(this, n);
        n.source = canvas.serialize(source);
        n.target = canvas.serialize(target);
        return n;
    }
    public var target is LinkedView;
    public var source is LinkedView;
    function link from () to () {
	insert this into target.links;
	insert this into source.links;
	insert this into canvas.links;
	const obsvr = target.expression as ObserverExpression;
	const obsvb = source.expression as ObservableExpression;
	insert obsvr into obsvb.observers;
	obsvr.observable = obsvb;
	println("LINKING {source} to {target}");
    }

    override function unlink from () to () {
	delete this from target.links;
	delete this from source.links;
	delete this from canvas.links;
	const obsvr = target.expression as ObserverExpression;
	const obsvb = source.expression as ObservableExpression;
	if (obsvr.observable == obsvb) {
	    obsvr.observable = null;
	}
	delete obsvr from obsvb.observers;
	println("UNLINKING {source} from {target}");
    }

    override var internalContent = Group {
	override var transform = bind translate(target.getLinkPos())
	content: bind canvas.makeArrow(canvas.ARROW_COLOR);
    }
}

abstract class LinkedView is ExpressionView {
    var links is LinkView[];
    override function unlink from () to () {
	for (link in links) {
	    link.unlink();
	}
    }
    function link from () to () {
	for (link in links) {
	    link.link();
	}
    }
    public bound function getLinkPos to Point3 { pos }
}

public class InputView is LinkedView {
    public override function serialize to ExprNode {
        const pt = getWorldPos();
        var n = ParamNode {
            index: index;
            x: pt.x;
            y: pt.y;
        }
        canvas.serializationMap.put(this, n);
        for (link in links) {
            canvas.serialize(link);
        }
        return n;
    }
    var index is Integer;
    public function getInputType to F3Type { null };
    override var transform = bind translate(0, index * -cellHeight);
    override var internalContent = bind label;
    override function onDown from (e is MouseEvent) to () 
    {
    }
    override function onDrag from (e is MouseEvent) to () 
    {
    }
    override function onUp from (e is MouseEvent) to () 
    {
    }
    override bound function getLinkPos to Point3 { getWorldPos() - new Vec3(cellWidth/2, 0, 0) }
}

public class ParameterView is InputView {
    const parameter is Parameter;
    override var expression = bind parameter;    
    override public function getInputType to F3Type {
	parameter.getType();
    }
}

public class OutputView is LinkedView {
    public override function serialize to ExprNode {
        const pt = getWorldPos();
        const n = ResultNode {
            index: index;
            x: pt.x;
            y: pt.y;
        }
        canvas.serializationMap.put(this, n);
        for (link in links) {
            canvas.serialize(link);
        }
        return n;
    }
    public var resultType is F3Type;
    public var index is Integer;
    override var transform = bind translate(0, index * -cellHeight);
    override var internalContent = Group 
    {
	content: GetTreeview {
	    canvas: bind canvas;
	    width: 150;
	    height: 200;
	    get: GetVar {
		member: Member {
		    m: null;
		    t: bind resultType;
		    name: bind expression.getName();
		}
	    }
	}

    }
    override function onDrag from (e is MouseEvent) to () 
    {
	//targetPos = e.location;
	//const source = canvas.pickInput(e, result.getType());
    }
    override function onDown from (e is MouseEvent) to () 
    {
    }
    override function onUp from (e is MouseEvent) to () 
    {
    }
    override bound function getLinkPos to Point3 { getWorldPos() + new Vec3(cellWidth/2, 0, 0) }
}

class ResultView is OutputView {
    public var result is Result;
    override var expression = bind result;
    override var resultType = bind result.getType();
}

class MemberTreenode is Treenode {
    public var m is Member;
    public var get = bind GetVar { member: m }
    override var label = bind m.name;
    readonly var members = bind m.getMembers();
    override var canOpen = bind { var n = members.size(); n > 0 };
    override var children = bind foreach (x in members) makeTreeNode(x);
    function makeTreeNode from (x is Member) to MemberTreenode {
	const m = MemberTreenode {
	    m: x;
	}
	insert m.get into get.observers;
	m.get.observable = get;
	return m;
    };
    override function open {
    	children;
	super.open();
    }
}

public class MemberTreemodel is Treemodel {
    public var member is Member;
    override var root = MemberTreenode { m: bind member };
}

public class MemberTreecell is Treeview.Treecell 
{
    public var canvas is Canvas;
    const self = this;

    var parentLink is LinkView;

    function link from () to ()
    {
	var n = (tn as MemberTreenode);
	var p = (n.parent as MemberTreenode);
	const pv = tv.getView(p) as MemberTreecell;
	if (pv <> null) {
	    if (parentLink == null) {
		parentLink = LinkView {
		    visible: false;
		    canvas: canvas;
		    source: pv.linkedView;
		    target: linkedView;
		}
	    }
	    parentLink.link();
	}
    }

    function unlink from () to ()
    {
	parentLink.unlink();
    }

    const linkedView is GetVarView = GetVarView {
	get: bind (tn as MemberTreenode).get;
	override bound function getLinkPos to Point3 
	{
	    var me = self.canvas.toLocal * self.boundsInScene;
	    var container = self.canvas.toLocal * self.tv.boundsInScene;
	    new Point3(me.right(), 
		       Math.min(Math.max(container.bottom(), me.center.y), me.extent.y),
		       0);
	}
    };
}

class GetTreeview is ResizableNode {
    public var event is Member;
    public var canvas is Canvas;
    public var cellHeight = bind canvas.cellHeight;
    public var get is GetVar;
    const treeModel = MemberTreemodel {
	root: MemberTreenode {
	    get: bind get;
	    m: bind get.member;
	}
    };
    public function getLinks to LinkView[]
    {
        foreach (x in cellMap.values() where x.parentLink.target.visible) {
            x.parentLink
        }
    }
    var treeHeight = bind Math.min(treeModel.rowCount, 8)*cellHeight;
    const self = this;
    const cellMap is java.util.Map of (MemberTreenode, MemberTreecell) =
	java.util.HashMap of (MemberTreenode, MemberTreecell) {};

    function getCell from (tn is MemberTreenode) to MemberTreecell {
	var r = cellMap.get(tn);
	if (r == null) {
	    r = MemberTreecell {
		canvas: canvas;
		tn: tn;
		tv: tv;
	    }
	    cellMap.put(tn, r);
	}
	return r;
    }

    const tv is Treeview = Treeview {
	transform: bind translate(0, -treeHeight/2+cellHeight/2);
	height: bind treeHeight;
	width: bind width;
	model: bind treeModel;
	override bound function createCell from (tn is Treenode) to Treecell 
	{
	    self.getCell(tn as MemberTreenode)
	}      
    };
    override var internalContent = bind tv;

    // fix me: move this stuff to canvas

    const linkStart is LinkedView = LinkedView {
        override function serialize to ExprNode { null }
	override var toSceneTransform = bind translate(pos);
    };
    const linkEnd is LinkedView = LinkedView {
        override function serialize to ExprNode { null }
	override var toSceneTransform = bind translate(pos);
    };
    const link is LinkView = LinkView {
	canvas: bind canvas;
	source: linkStart;
	target: linkEnd;
    };
    var tmpLink is LinkView = null;
    var dx = 0.0;
    var dy = 0.0;
    var arrowVis is Boolean;
    var startPos is Point3;
    const onDown = tv.observeMouseDown().subscribe(function from (e is MouseEvent) to () {
	    if (e.location.x >= 0) {
		const cell = tv.selectedTreecell as MemberTreecell;
		const tn = tv.selectedTreenode as MemberTreenode;
		const toLocal = canvas.toLocal;
		tmpLink = link;
		println("CREATING LINK {e} ");
		dx = 0; dy = 0;
	    }
	} );
    const onDrag = tv.observeMouseDrag().subscribe(function from (e is MouseEvent) to () {
	    if (tmpLink == null) return;
	    const cell = tv.selectedTreecell as MemberTreecell;
	    if (not arrowVis) {
		cell.linkedView.unlink();
		startPos = canvas.toLocal * e.picked.dragPoint0;
		insert canvas.targetArrow into canvas.arrows;
		arrowVis = true;
		link.link();
	    }
	    const tn = tv.selectedTreenode as MemberTreenode;
	    const toLocal = canvas.toLocal;
	    const sourcePos = toLocal * cell.toSceneTransform.getTranslation();
	    dx += e.screenDrag.x;
	    dy += e.screenDrag.y;
	    linkStart.pos = sourcePos + new Vec3(cell.bounds.extent.x, 0, 0);
	    linkEnd.pos = startPos + new Vec3(dx-7, dy, 0);
	    canvas.targetArrow.tx = linkEnd.pos.x;
	    canvas.targetArrow.ty = linkEnd.pos.y;
	});
    const onUp = tv.observeMouseUp().subscribe(function from (e is MouseEvent) to () {
	    if (tmpLink == null) return;
	    const tn = tv.selectedTreenode as MemberTreenode;
	    const cell = tv.selectedTreecell as MemberTreecell;
	    const found = canvas.pickInput(e, tn.m.t);
	    arrowVis = false;
	    tmpLink = null;
	    link.unlink();
	    delete canvas.targetArrow from canvas.arrows;
	    if (found <> null) {
		cell.link();
		const newlink = LinkView { 
		    canvas: canvas;
		    source: cell.linkedView; 
		    target: found;
		};
		newlink.link();
	    } 
	    canvas.dumpSrc();
	});

}

public class LinkInfo {
    override function toString {
	"source: {source}, {sourceIndex}, {sourcePos}; target: {target}, {targetIndex}, {targetPos}";
    }
    public var link is LinkView;
    public var source is Object;
    public var sourcePos is Point3;
    public var sourceIndex is Integer;
    public var target is Object;
    public var targetPos is Point3;
    public var targetIndex is Integer;
    override function equals from (obj is Object) to Boolean {
	if (obj is LinkInfo) then {
	    const x = obj as LinkInfo;
	    link == x.link and source == x.source and
		sourcePos == x.sourcePos and
		sourceIndex == x.sourceIndex and
		target == x.target and
		targetPos == x.targetPos and
		targetIndex == x.targetIndex;
	} else false
    }
}


class Holder is Group, Scissored {
}

public class Canvas is ResizableNode, Focusable, KeyboardInputHandler, Scrollable, MouseInputHandler {

    var prog is Program;

    var selectedExpr is ExpressionView;

    override public bound function getTx to Number { 1.0-(cx + width/2.0) / width }
    override public bound function getSx to Number { 
        //Math.max(width / localSpace.contentBounds.width(), 1.0);
        0.1
    }    

    override public bound function getTy to Number { (cy + height/2.0) / height }

    override public bound function getSy to Number { 
        //Math.max(height / localSpace.contentBounds.height(), 1.0);
        0.2
    }

    override public function setX from (tx is Number, sx is Number) to ()
    {
        cx = (0.5-tx) * width;
    }

    override public function setY from (ty is Number, sy is Number) to ()
    {
        cy = ty * height - height/2.0;
    }

    public function onDrop from (where is Pick, clip is Context) to ()
    {
        if (clip is Context.ClosureVarContext) {
            var c = clip as Context.ClosureVarContext;
            const typ = c.varType.t;
            var names = new java.util.HashSet of String;
            const members = foreach (m in introspect(typ) where not m.name.contains("pdate") and names.add(m.name)) m;
            insert ObjectView {
                pos: toLocal * where.scenePoint;
                objectExpr: VarContextExpression { 
                    varContext: c, override function getType to F3Type { typ }
                    inputMembers: foreach (m in members where not m.isObservable and m.isObserver and m.rt == UNIT_TYPE) m;
                    //outputMembers: foreach (m in members where m.isObservable and m.m is F3FunctionMember) m;
                }
                canvas: this;
            } into views;
        }
    }

    public function onDrop from (where is Pick, clip is Node) to ()
    {
	println("ON DROP {where.scenePoint}, {where.dragPoint1} {clip}");
	const typ = Reflect.getType(clip.getClass().getName());
        var names = new java.util.HashSet of String;
	const members = foreach (m in introspect(typ) where not m.name.contains("pdate") and names.add(m.name)) m;
	insert ObjectView {
	    pos: toLocal * where.scenePoint;
	    objectExpr: NodeExpression { 
                node: clip, override function getType to F3Type { typ }
                inputMembers: foreach (m in members where not m.isObservable and m.isObserver and m.rt == UNIT_TYPE) m;
                //outputMembers: foreach (m in members where m.isObservable and m.m is F3FunctionMember) m;
            }
	    canvas: this;
	} into views;
    }

    public function onDrop from (where is Pick, clip is TimeNode) to ()
    {
	println("ON DROP {where.scenePoint}, {where.dragPoint1} {clip}");
	const typ = Reflect.getType("f3.media.scene.TimeNode");
	const members = introspect(typ);
	for (m in members where not m.isObservable and m.isObserver) {
	    println(m);
	}
	insert ObjectView {
	    pos: toLocal * where.scenePoint;
	    objectExpr: TimeNodeExpression { 
                timeNode: clip, override function getType to F3Type { typ }
                inputMembers: foreach (m in members where not m.isObservable and m.isObserver and m.t == UNIT_TYPE) m;
                outputMembers: foreach (m in members where m.isObservable and m.m is F3FunctionMember) m;
            }
	    canvas: this;
	} into views;
    }

    readonly var font = bind layoutEngine.createFont("font-size:10;font-family:Lucida Grande;font-weight:bold");

    var portPaint is Paint;

    var localSpace is Node;

    public var toLocal is Mat4 = bind localSpace.toSceneTransform.inverse();

    var BG = ColorPaint(Color.color(.9, .9, .9));
    const cellSelectedBg = ColorPaint(Color.color(.80, .80, .80));
    const cellBg = ColorPaint(Color.color(.7, .7, .7));
    const textFg = ColorPaint(Color.color(.2, .2, .2));
    const titleBg = ColorPaint(Color.color(.9, .9, .9));

    var ARROW_COLOR = Color.color(.2, .2, .2);

    var cellHeight = 16;

    const portArrow is Polygon = Polygon {
	points: [-3.5, -4.5, -3.5, 4.5, 3.5, 0];
	fillPaint: ColorPaint(Color.WHITE);
    };

    function makeArrow from (c is Color) to MeshNode 
    {
	MeshNode {
	    mesh: bind portArrow.fillMesh.mesh;
	    shader: bind effectLoader.loadPaintShader(ColorPaint(c));
	}
    }

    var targetArrow is TransformNode = TransformNode {
	px: 3.5
	content: bind makeArrow(ARROW_COLOR);
    }

    public var event is Member;
    public var eventContext is Context.MemberContext;

    public var targetNode is ResourceNode;

    public var targetSpace is Node;
    public var targetTime is TimeNode;
    public var targetTimeline is Timeline;
    public var instanceSpace is Group;

    public function lookupVar from (id is String) to Object {
        return null;
    }

    public function lookupSpatial from (id is String) to Node {
	var r = targetSpace.lookup(id);
	println("lookup {id} => {r}");
	return r;
    }

    public function lookupTemporal from (id is String) to TimeNode {
	var r = targetTime.lookup(id);
	println("lookup {id} => {r}");
	return r;
    }

    function reset {
	for (link in links) {
	    link.unlink();
	}
	links = [];
	unsubscribe();
    }

    var rootView is Node = TransformNode { tx: bind -width / 2.0 + 120, content: bind rootExprView };

    var rootExprView is GetVarView = bind makeGetter(event);

    var varRoot is GetVar;

    function makeGetter from (event is Member) to GetVarView {
	if (event == null) then null else {
		var r = GetVarView {
		    parent: rootView;
		    canvas: this;
		    get: varRoot = GetVar {
			member: event;
		    }
		}
		r.updateParent();
		r;
	    }
    }

    var prevLinkInfo is LinkInfo[];

    override function preupdate {
	const curLinkInfo = getLinkInfo();
	if (curLinkInfo <> prevLinkInfo) {
	    prevLinkInfo = curLinkInfo;
	    linkMesh = genLines(curLinkInfo);
	}
	super.preupdate();
    }

    var cx is Number;
    var cy is Number;

    const canvas = this;

    const bgRect = Rectangle {
        factory: canvas.pathFactory;
        id: "canvas.bg"
        debug: true;
        width: bind width;
        height: bind height;
        fillPaint: bind ColorPaint(Color.color(.9, .9, .9));
        override function onMouseDrag from (e is MouseEvent) to ()
        {
            const d = (e.picked.dragPoint1-e.picked.dragPoint0);
            println("drag={e.drag}, sceneDrag={e.sceneDrag}");
            canvas.cx += d.x;
            canvas.cy += d.y;
        } 	
    };

    override var internalContent = Holder { 
	scissorBounds: bind Bounds.boundsFromRect(width, height);
	content:
	Group {
	    content:
           [Group { content: bind bgRect },
	   localSpace = Group 
           { 
	       transform: bind translate(cx, cy) * scale(zoomx, zoomy);
	       content: [Group { content: bind rootView }, Group { content: bind views }, Group { content: bind arrows},
                         MeshNode {
                             id: "lines"
                                 pickable: false;
                             override var mesh = bind linkMesh;
                             shader: effectLoader.loadPaintShader(ColorPaint(Color.color(.25, .25, .25)));
                         }]
           }]
        };
    };

    var zoomx = 1.0;
    var zoomy = 1.0;

    function deleteSelection to () {
        var n = selectedExpr;
        selectedExpr = null;
        n.unlink();
        delete n from views;
    }

    override function onKeyDown from (e is KeyboardEvent) to () {
        if (e.keyCode == Keys.Delete or e.keyCode == Keys.Backspace) {
            deleteSelection();
        }
    }

    override function onMouseWheel from (e is MouseWheelEvent) to ()
    {
        if (e.metaKey) {
            zoomy *= 1+e.scroll.y*.1;
            zoomx = zoomy;
        }
    }

    const printlnFun = Function {
	fun: getFunction("expr.Console", "println", ["Object"]);
    };

    public var views is ExpressionView[] = [];
    /*
     = FunctionView {
	pos: new Point3(100, 0, 0);
	canvas: this;
	fun: printlnFun;
    };
    */

    var arrows is TransformNode[];

    var links is LinkView[];

    var lines = LineMesh {};

    var linkMesh is AbstractMesh;

    function getLinkInfo {
	foreach (link in links where link.visible) {
	    var source = link.source;
	    var sourcePos = source.getLinkPos();
	    var target = link.target;
	    var targetPos = target.getLinkPos();
	    makeLinkInfo(link, 
			 source,
			 Sequences.indexOf(source.links, link),
			 sourcePos,
			 target,
			 Sequences.indexOf(target.links, link),
			 targetPos);
	}
    }

    function makeLinkInfo 
	from (link is LinkView,
	      source is Object,
	      sourceIndex is Integer,
	      sourcePos is Point3,
	      target is Object,
	      targetIndex is Integer,
	      targetPos is Point3) 
	to LinkInfo
    {
	LinkInfo {
	    link: link;
	    source: source;
	    sourceIndex: sourceIndex;
	    sourcePos: sourcePos;
	    target: target;
	    targetIndex: targetIndex;
	    targetPos: targetPos;
	}
    }

    const lineOff is Vec3 = new Vec3(15, 0, 0);
    const lineOff1 is Vec3 = new Vec3(18.5, 0, 0);

    function genLines from (links is LinkInfo[]) to AbstractMesh {
	lines.reset();
	delete arrows[links.size()..];
	while (arrows.size() < links.size()) {
	    insert TransformNode { content: makeArrow(ARROW_COLOR) } into arrows; 
	}
	for (i in links) {
	    const p0 = i.sourcePos;
	    const sourceOff = lineOff*(i.sourceIndex+1);
	    const p1 = p0 + sourceOff;
	    const p5 = i.targetPos-lineOff1*(i.targetIndex);
	    const targetOff = lineOff*(i.targetIndex+1);
	    const p4 = i.targetPos - targetOff;
	    const mid = p1.lerp(0.5, p4);
	    const p2 = new Point3(p1.x, mid.y, 0);
	    const p3 = new Point3(p4.x, mid.y, 0);
	    lines.moveTo(p0);
	    lines.lineTo(p1);
	    lines.lineTo(p2);
	    lines.lineTo(p3);
	    lines.lineTo(p4);
	    lines.lineTo(p5);
	    lines.lineTo(p5);
	    arrows[indexof i].tx = p5.x;
	    arrows[indexof i].ty = p5.y;
	    println("gen lines {p0} {p1} {p2} {p3} {p4} {p5}");
	}
	const mesh = lines.getMesh();
	mesh.updateBounds();
	return mesh;
    }

    function pickOutput from (e is MouseEvent, t is F3Type) to ExpressionView 
    {
	for (p in e.scene.underMouse) {
	    const n = p.node;
	    if (n is ResultView) {
		const rv = n as ResultView;
		if (rv.result.getType().isConvertibleFrom(t)) {
		    return rv;
		}
	    }
	}
	null;
    }

    function pickInput 
	from (e is MouseEvent, 
	      t is F3Type) 
	to LinkedView 
    {
	for (p in e.scene.underMouse) {
	    const n = p.node;
	    if (n is InputView) {
		const pv = n as InputView;
		if (pv.getInputType() == UNIT_TYPE or pv.getInputType().isConvertibleFrom(t)) {
		    return pv;
		} else {
		    println("NOT ASSIGNABLE {pv.getInputType()} <- {t}");
		}
	    }
	}
	null;
    }

    function dumpSrc {
	println("DUMP SRC:");
	unsubscribe();
	println(visit(varRoot));
    }

    function getObservers from (e is Expression) to ObserverExpression[]
    {
        var result = 
	if (e is Parameter) 
	    then (e as Parameter).target.output.observers 
            else if (e is InputMemberExpression) then {
               const outs = (e as InputMemberExpression).target.outputs;
               foreach (x in outs) {
                   println("OUT {x} => {x.observers}");
                   x.observers
               }
            }
	    else if (e is ObservableExpression) 
		then (e as ObservableExpression).observers 
		else [];
        println("GET PARAMETERS {e} => {result}");
        return result;
    }
    
    function getTerminals from (e is Expression, 
				result is function from Expression to ()) to ()
    {
	const obsvrs = getObservers(e);
	println("observers for {e} => {obsvrs}");
	if (obsvrs == []) {
	    if (not (e is GetVar)) {
		result(e);
	    }
	} else {
	    for (x in obsvrs) {
		getTerminals(x, result)
	    }
	}
    }

    const serializationMap = new java.util.IdentityHashMap of (ExpressionView, ExprNode);

    function serialize from (e is ExpressionView) to ExprNode {
        if (e == null) return null;
        var r = serializationMap.get(e);
        println("serializing: { e } => { r }");
        if (r <> null) return r;
        return e.serialize();
    }
    
    function visit from (e is Expression) to String
    {
        serializationMap.clear();
        serialize(rootExprView);
        const w = new java.io.StringWriter();
        println("root={rootExprView} => {serializationMap.get(rootExprView)}");


        foreach (obj in views) {
            var x = serialize(obj);
            println("serialize {obj} => {x}");
        }
        var todo = ExprScene {};
        foreach (j in serializationMap.values()) {
            insert j into todo.views;
        }
        IO.writeObject(w, todo);
        println("serialize => {w}");
        var des = IO.readObject(new java.io.StringReader(w.toString()));
        prog.code = todo;

        println("deserialized to {des}");

	var terms is Expression[];
	getTerminals(e, 
		     function from (x is Expression) to ()
		     {
			 println("adding {x}");
			 insert x into terms;
		     });
	var itype = (e as MemberExpression).member.m.getDeclaringClass();
        if (itype == null) return "";
	var result = "var _ = function from (i is {itype.getName()}, getVar is function from String to Object, getNode is function from String to f3.media.scene.Node, getClip is function from String to f3.media.scene.TimeNode) to f3.util.Observable of ? \{";
        if (terms == []) {
            var rs = foreach (x in eventContext.content) {
                if (x is Context.ResourceNodeContext) {
                    (x as Context.ResourceNodeContext).resource;
                } else null;
            }
            if (rs <> []) {
                terms = [varRoot];
            }
        }
        for (x in terms) {
	    var src is String;
	    if (x is Parameter) {
		src = (x as Parameter).target.toSource();
	    } else {
		src = x.toSource();
	    }
	    try {
		const toCompile = "{result}{src}\}";
		println("compiling: {toCompile}");
		const r = evaluator.compileAndRun(toCompile);
		println("{r.getClass()} => {r}");
		const f = r as function from (Node, function from String to Object, function from String to Node, function from String to TimeNode) to Observable of ?;
		var obs is Observable of ?;
		obs = f(targetNode, lookupVar, lookupSpatial, lookupTemporal);
		subscribe(obs, toCompile);
                prog.compiled = f;
                prog.sourceCode = toCompile;
	    } catch (thr is java.lang.Throwable) {
		thr.printStackTrace();
	    }
	    result = "{result}{src};";
	    if (true) {
		break;
	    }
	}
	result;
    }

    const evaluator = 
	new org.f3.tools.script.ScriptShell(java.lang.Thread.currentThread().getContextClassLoader());

    function visit1 from (e is Expression) to String 
    {
	// Observable of a -> function from a to b; // map 
	// Observable of a -> read var member // map 
	// Observable of a -> Observer of a; // subscribe
	// Observable of a -> Observer of a; // subscribe
	// Observable of a -> write var member; // subscribe
	// function from a to b -> function from b to c; // compose
	println("VISIT {e} -> {e.getName()} is {e.getType()}");
	var result = "_";
	if (e is Function) {
	    const f = e as Function;
	    println(f.inputs.size());
	    if (f.fun.isStatic()) {
		"{f.fun.getName()}()";
	    } else {
		"{f.fun.getName()}()";
	    }
	} else if (e is GetVar) {
	    const g = e as GetVar;
	    const m = g.member;
	    for (x in g.observers) {
		var y is Expression = x;
		if (x is Parameter) {
		    var qg is GetVar = g;
		    var prefix2 is String;
		    while (qg <> null) {
			const qm = qg.member;
			prefix2 = 
			    if (qm.m is F3FunctionMember) then {
				    "{qm.name}()";
				} else {
				"{qm.name}";
			    };
			if (qm.isObservable) {
			    prefix2 = "foreach (i in {prefix2}) i";
			} 
			if (result <> "") {
			    result = "{result}.";
			}
			prefix2 = "{result}{prefix2}";
			if (qg.observable is GetVar) {
			    qg = qg.observable as GetVar;
			} else {
			    break;
			}
		    }
		    var prefix = prefix2;
		    const f is Function = (x as Parameter).target;
		    if (f.fun.isStatic()) {
			result = "\{ foreach (i in {result}) {f.getName()}(i{prefix}) \}";
		    } else {
			result = "\{ foreach (i in {result}) i{prefix}{f.getName()}() \}";
		    }
		} else {
		    var huh = visit(y);
		    println("huh? {huh}");
		    if (huh <> "_") {
			result = huh;
		    }
		}
	    }
	    return result;
	} else if (e is ObservableExpression) {
	} else {
	}
	"";
    }

    /*
    function genReflect from (e is Expression) to function from (function from F3Value to F3Value) to F3Value;
    {
	// Observable of a -> function from a to b; // map 
	// Observable of a -> read var member // map 
	// Observable of a -> Observer of a; // subscribe
	// Observable of a -> Observer of a; // subscribe
	// Observable of a -> write var member; // subscribe
	// function from a to b -> function from b to c; // compose
	if (e is Function) {
	    const f = e as Function;
	    var isMap = f.inputs.size() == 1 and f.inputs[0].observable is ObservableExpression;
	    if (isMap) {
		const mapFun = getFunction(f.inputs[0].observable.getType(), "map");
		const k0 = genReflect(f.inputs[0].observable);
		function from (k is function from F3Value to F3Value) to F3Value 
		{
		    k0(function from (target is F3Value) to F3Value {
			    const obj = target as F3ObjectValue;
			    k1(function from (arg is F3Value) to F3Value {
				    k(fun.asFunction(obj).invoke())
				});
			});
		}
	    } else {
		const k0 = genReflect(f.inputs[0].observable);
		const k1 = genReflect(f.inputs[1].observable);
		function from (k is function from F3Value to F3Value) to F3Value 
		{
		    k0(function from (target is F3Value) to F3Value {
			    const obj = target as F3ObjectValue;
			    k1(function from (arg is F3Value) to F3Value {
				    k(fun.asFunction(obj).invoke())
				});
			});
		}
	    }
	} else if (e is ObservableExpression) {
	    const o = e as ObservableExpression;
	    for (x in o.observers) {
	    }
	}
    }
    */


    function unsubscribe {
	const xs = subs;
	subs = [];
	for (x in xs) x.dispose();
    }

    var subs is Disposable[];

    function subscribe of a from (obsvb is Observable of a, src is String) to ()
    {
	println("SUBSCRIBE {obsvb}");
        var count = 0;
        var rs = foreach (x in eventContext.content) {
            if (x is Context.ResourceNodeContext) {
                (x as Context.ResourceNodeContext).resource;
            } else null;
        }
	insert obsvb.subscribe(DefaultObserver of a {
		override function onNext from (x is a) to ()
		{
                    for (r in rs) {
                        var n = r.instance(r.id, lookupVar, lookupSpatial, lookupTemporal);
                        println("INSERTING {n} into {instanceSpace} at {targetTimeline.playhead}");
                        insert EventLayer.EventNode {
                            timestamp: targetTimeline.playhead;
                            event: n;
                        } into instanceSpace.content;
                    }
                    count++;
		    println("on next {src} {x}");
		}
	}) into subs;	
    }
}

public class MemberNode {
    public var name is String;
    public var declaringClass is String;
    public var outputType is String;
    public function deserialize to Member {
        const members = introspect(Reflect.getType(declaringClass) as F3ClassType);
        for (m in members) {
            if (m.name == name) {
                return m;
            }
        }
        return null;
    }
}

public class VarMemberNode is MemberNode {
}

public class FunctionMemberNode is MemberNode {
    public var inputTypes is String[];
}

public class ExprNode {
    public var id is String;
    public var x is Number;
    public var y is Number;
    public var member is MemberNode;
    public function createView from (canvas is Canvas) to ExpressionView {
        println("implement me!: {this}");
        return null;
    }
}

public class ExprScene {
    public var views is ExprNode[];
}

public class FunNode is ExprNode {
    public var inputs is ExprNode[];
    public var output is ExprNode;
}

public class LinkNode is ExprNode {
    public var source is ExprNode;
    public var target is ExprNode;
}

public class ObjNode is ExprNode {
    public var inputs is ExprNode[];
    public var outputs is ExprNode[];
}

public class GetNode is ExprNode {
    public override function createView from (canvas is Canvas) to GetVarView {
        GetVarView {
            pathFactory: canvas.pathFactory;
            layoutEngine: canvas.layoutEngine;
            imageLoader: canvas.imageLoader;
            effectLoader: canvas.effectLoader;
            canvas: canvas;
            pos: new Point3(x, y, 0);
            get: GetVar {
                member: member.deserialize();
            }
        }
    }
}

public class ParamNode is ExprNode {
    public var index is Integer;
}

public class ResultNode is ExprNode {
    public var index is Integer;
}

public class Editor is ResizableNode, Focuser {

    override public function getTargetOfFocus to Focusable { canvas }

    public var targetNode is ResourceNode;
    public var eventContext is Context.MemberContext;
    public var event is Member = bind eventContext.member;

    public var targetSpace is Node;
    public var targetTime is TimeNode;
    public var targetTimeline is Timeline;
    public var instanceSpace is Group;

    function getTargetNode from (c is Context) to ResourceNode {
        var ctx = c;
        while (ctx <> null and not (ctx is Context.ResourceNodeContext)) {
            ctx = ctx.parent;
        }
        return (ctx as Context.ResourceNodeContext).resource;
    }

    var canvas is Canvas = bind getCanvas(getTargetNode(eventContext), eventContext);

    override var internalContent = bind sp;

    const sp = Scrollpane {
        width: bind width;
        height: bind height;
        content: bind canvas;
    }

    function getCanvas from (target is ResourceNode, eventContext is Context.MemberContext) to Canvas
    {
	var prog is Program;
	for (x in target.programs) {
	    if (x.event == eventContext.member) {
		prog = x;
		break;
	    }
	}
	if (prog == null) {
	    prog = Program {event: event};
	    insert prog into target.programs;
	}
	if (prog.canvas == null) {
            println("creating canvas with {pathFactory}");
	    prog.canvas = Canvas {
                pathFactory: pathFactory;
                width: width;
                height: height;
		targetNode: target,
		event: event;
                eventContext: eventContext;
		targetSpace: targetSpace;
		targetTime: targetTime;
		targetTimeline: targetTimeline;
                instanceSpace: instanceSpace;
	    }
            for (v in prog.code.views) {
                const j = v.createView(canvas);
                if (j <> null) {
                    insert j into canvas.views;
                }
            }
            prog.canvas.prog = prog;
            prog.canvas.dumpSrc()
	}
	return prog.canvas;
    }
    
}




 
