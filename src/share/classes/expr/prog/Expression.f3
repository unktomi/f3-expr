package expr.prog;
import java.lang.Math;
import f3.math.*;
import f3.math.LinearMath.*;
import expr.*;
import expr.Treeview.*;
import f3.reflect.*;
import expr.Reflect.*;
import f3.util.*;
import f3.lang.*;
import f3.media.input.*;
import f3.media.scene.*;
import f3.media.scene.Shape2D.*;

var exprMap = new java.util.HashMap of (F3ClassType, Member[]);

const MAT4_TYPE = ctx.findClass("f3.math.Mat4");

function makeFunMember from (name is String, params is F3Type[], ret is F3Type) to Member 
{
    FunctionMember {
	ft: ctx.makeFunctionType(params, ret);
	name: name;
	t: ret;
    }
}

const NUM_MEMBERS = 
    foreach (op in ["+", "-", "*", "/", "remainder"]) {
	makeFunMember(op, [NUMBER_TYPE, NUMBER_TYPE], NUMBER_TYPE)
    };
const INT_MEMBERS = 
    foreach (op in ["+", "-", "*", "/", "remainder"]) {
	makeFunMember(op, [INTEGER_TYPE, INTEGER_TYPE], INTEGER_TYPE)
    };
const BOOL_MEMBERS = 
    [foreach (op in ["and", "or"]) {
	makeFunMember(op, [BOOLEAN_TYPE, BOOLEAN_TYPE], BOOLEAN_TYPE)
	}, makeFunMember("not", [BOOLEAN_TYPE], BOOLEAN_TYPE)];

public function introspect from (t is F3Type) to Member[]
{
    if (t.getName() == "org.f3.runtime.F3Object" or
	t.getName() == "org.f3.runtime.F3Base" or
	t.getName() == "java.lang.Object") {
	return []
    }
    if (t is F3ClassType) then introspect(t as F3ClassType) else if (true) [] else {
	    if (t == NUMBER_TYPE) 
		then NUM_MEMBERS
		else if (t == INTEGER_TYPE)
		    then INT_MEMBERS 
		    else if (t == BOOLEAN_TYPE)
			then BOOL_MEMBERS
			else []
    }
}

public function introspect from (clazz is F3ClassType) to Member[]
{
    if (exprMap.containsKey(clazz)) {
	return exprMap.get(clazz);
    }
    var result is Member[];
    const funs = clazz.getFunctions(true);
    for (f in funs where f.isPublic() and not f.getName().contains("$") and 
	     OBJECT_TYPE <> f.getDeclaringClass() 
	 ) { 
	const ft = f.getType();
	var rt = ft.getReturnType();
	var toInsert is Member;
	if (ft.minArgs() == 0) {
	    if (SUBJECT_TYPE.isAssignableFrom(rt) or OBSERVABLE_TYPE.isAssignableFrom(rt) or OBSERVER_TYPE.isAssignableFrom(rt)) {
		rt = getTypeArguments(rt)[0];
	    } else {
		continue;
	    }	
	    if (SUBJECT_TYPE.isAssignableFrom(rt)) {
		toInsert = Member {
		    m: f;
		    t: rt
		    isObservable: true, isObserver: true;
		}
		println("Subject of ({getTypeArguments(rt)})");
	    }  else if (OBSERVABLE_TYPE.isAssignableFrom(rt)) {
		toInsert = Member {
		    m: f;
		    t: rt
		    isObservable: true;
		}
		println("Observable of ({getTypeArguments(rt)})");
	    } else if (OBSERVER_TYPE.isAssignableFrom(rt)) {
		toInsert = Member {
		    m: f;
		    t: rt
		    isObserver: true;
		}
		println("Observer of ({getTypeArguments(rt)})");
	    } else {
		continue;
	    }
	} else {
	    if (UNIT_TYPE <> rt) {
		continue;
	    }
	    if (ft.minArgs() == 0) {
		// observer of ()
		rt = UNIT_TYPE;
	    } else if (ft.minArgs() == 1) {
		// observer of ft.getArgumentType(0)
		//println("{f.getName()} => Observer of ({ft.getArgumentType(0)})");
	    } else if (ft.minArgs() == 1) {
		// observer of (ft.getArgumentType(0), ft.getArgumentType(1))
		continue;
	    }
	    toInsert = Member {
		m: f;
		t: rt;
		isObserver: true;
	    }
	}
	if (toInsert <> null) {
	    insert toInsert into result;
	}
    }
    const vars = clazz.getVariables(true);
    for (v in vars where not v.getName().contains("$") and not v.getName().startsWith("bnds") and not v.isStatic()) {
	var toInsert is Member;
	if (true or not v.isPublicInit() and not v.isDef()) {
	    var rt = v.getType();
	    if (SUBJECT_TYPE.isAssignableFrom(rt) or OBSERVABLE_TYPE.isAssignableFrom(rt) or OBSERVER_TYPE.isAssignableFrom(rt)) {
		rt = getTypeArguments(rt)[0];
	    }	
	    if (not v.isPublicRead() and not v.isPublicInit() and not v.isDef()) {
		println("{v.getName()} => Subject of ({rt})");
		toInsert = Member {
		    m: v;
		    t: rt
		    isObserver: true;
		    isObservable: true;
		}
	    } else if (v.isPublic() or v.isPublicRead() or v.isPublicInit()) {
		println("{v.getName()} => Observable of ({rt})");
		toInsert = Member {
		    m: v;
		    t: rt
		    isObservable: true;
		}
	    } else {
	    }
	}
	if (toInsert <> null) {
	    insert toInsert into result;
	}
    }
    result = foreach (x in result where not x.t.isAssignableFrom(MAT4_TYPE)) x;
    exprMap.put(clazz, result);
    return result;
}

public class Member {
    public const m is F3Member; 
    public const t is F3Type;
    public const name = m.getName();
    public var isObservable is Boolean;
    public var isObserver is Boolean;
    public function getMembers to Member[]
    {
	Expression.introspect(t);
    }
}

public class FunctionMember is Member {
    public const ft is F3FunctionType;
}


function argName from (ft is F3FunctionType, i is Integer) to String {
    ft.getArgumentType(i).getName()
}

function resultName from (ft is F3FunctionType) to String {
    ft.getReturnType().getName();
}

public interface Expression {
    public function getName to String;
    public function getType to F3Type;
}

public interface MemberExpression is Expression {
    public var member is Member;
    override function getName to String { member.name }
}

public interface ObservableExpression is Expression {
    public var observers is ObserverExpression[];
}

public interface ObserverExpression is Expression {
    public var observable is ObservableExpression;
}

public interface VarExpression is MemberExpression {
    override function getType to F3Type { member.t }
}

public class GetVar is VarExpression, ObservableExpression {
}

public class SetVar is VarExpression, ObserverExpression {
}

public class Function is MemberExpression {
    public const fun is F3FunctionMember;
    const ft = fun.getType();
    postinit {
	member = Member {
	    m: fun;
	    t: ft;
	}
    }
    override function getType { ft }
    public var inputs is Parameter[] =
	bind foreach (i in [0..<ft.minArgs()]) {
	Parameter {
	    name: argName(ft, i);
	    target: this;
	    t: ft.getArgumentType(i)
	}
    }
    public var output is Result = Result {
	t: ft.getReturnType()
    }
}

public class Parameter is ObserverExpression {
    public var name is String;
    public var t is F3Type;
    public var target is Function;
    override function getName to String { name }
    override function getType to F3Type { t }
}

public class Result is ObservableExpression {
    override function getName to String { "return" }
    public var t is F3Type;
    public var source is Function;
    override function getType to F3Type { t }
}

public class Program {
    public var start is ObservableExpression;
}

class DataArrow is MeshNode.Instance {
}

class ControlArrow is MeshNode.Instance {
}

class ExpressionView is AbstractNode {
    public const canvas is Canvas;
    public var expression is Expression;
    public var pos is Point3;
    var cellWidth is Number = 150;
    var cellHeight is Number = bind canvas.cellHeight;
    var font is Text.Font = bind canvas.font;
    const label is Text.Label = Text.Label {
	text: bind expression.getName();
	height: bind cellHeight;
	width: bind cellWidth;
	font: bind font;
	foreground: bind canvas.textFg;
	background: bind canvas.cellBg;
	pickable: true;
    };
    function onDown from (e is MouseEvent) to () 
    {
    }
    function onDrag from (e is MouseEvent) to () 
    {
	println("dragging {label.text}");
	pos += e.picked.dragPoint1 - e.picked.dragPoint0;
    }
    function onUp from (e is MouseEvent) to () 
    {
    }
    var d1;
    var d2;
    var d3;
    postinit {
	d1 = label.observeMouseDown().subscribe(onDown);
	d2 = label.observeMouseUp().subscribe(onUp);
	d3 = label.observeMouseDrag().subscribe(onDrag);
    }
}

class FunctionView is ExpressionView {
    public var fun is Function;
    override var transform = bind translate(pos);
    override var expression = bind fun;
    var inputs is ParameterView[] = bind foreach (p in fun.inputs) ParameterView {
	canvas: bind canvas;
	parameter: p
    };
    var output = ResultView {
	canvas: bind canvas;
	result: bind fun.output;
    };
    const io = Group {
	transform: bind translate(0, -cellHeight);
	content: 
	[
	 Group {
	     content: bind inputs
	 }
	 Group {
	     transform: bind translate(0, -inputs.size() * cellHeight);
	     content: bind output;
	 }]
    };
    override var internalContent = Group {
	content: bind [label, io];
    }

    override function update {
	super.update();
	for (i in inputs) {
	    i.index = indexof i;
	}
    }
}

class LinkView is ExpressionView {
    public var target is LinkedView;
    public var source is LinkedView;
}

class LinkedView is ExpressionView {
    var links is LinkView;
}

class ParameterView is LinkedView {

    const parameter is Parameter;

    var index is Integer;
    
    override var transform = bind translate(0, index * -cellHeight);

    override var expression = bind parameter;

    override var internalContent = bind label;

    override function onDown from (e is MouseEvent) to () 
    {
    }
    override function onDrag from (e is MouseEvent) to () 
    {
    }
    override function onUp from (e is MouseEvent) to () 
    {
    }

}

class ResultView is LinkedView {

    public var result is Result;
    override var expression = bind result;

    override var internalContent = Group 
    {
	content: ObjectExpressionView {
	    canvas: bind canvas;
	    width: 150;
	    height: 200;
	    event: Member {
		m: null;
	        t: bind result.getType();
		name: "return"
	    }
	}

    }

    override function onDrag from (e is MouseEvent) to () 
    {
	//targetPos = e.location;
	const source = canvas.pickInput(e, result.getType());
    }

    override function onDown from (e is MouseEvent) to () 
    {
    }

    override function onUp from (e is MouseEvent) to () 
    {
    }
}

class MemberTreenode is Treenode {
    public var m is Member;
    override var label = bind m.name;
    readonly var members = bind m.getMembers();
    override var canOpen = bind { var n = members.size(); n > 0 }
    override var children = bind foreach (x in members) MemberTreenode { m: bind x };
    override function open {
    	children;
	super.open();
    }
}

class MemberTreemodel is Treemodel {
    public var member is Member;
    override var root = MemberTreenode { m: bind member };
}

class ObjectExpressionView is ResizableNode {
    public var event is Member;
    public var canvas is Canvas;
    var cellHeight = bind canvas.cellHeight;
    const treeModel = MemberTreemodel {
	member: bind event;
    };
    var treeHeight = bind Math.min(treeModel.rowCount, 5)*cellHeight;
    const tv = Treeview {
	transform: bind translate(0, -treeHeight/2+cellHeight/2);
	height: bind treeHeight;
	width: bind width;
	model: bind treeModel;
    };
    override var internalContent = bind tv;
    const onDrag2 = tv.observeMouseDrag().subscribe(function from (e is MouseEvent) to () {
	    const tn = tv.selectedTreenode;
	});
}

class Holder is Group, Scissored {
}

public class Canvas is ResizableNode {

    readonly var font = bind layoutEngine.createFont("font-size:11;font-style:LucidaSans");

    var portPaint is Paint;

    var BG = ColorPaint(Color.color(.9, .9, .9));

    const cellBg = ColorPaint(Color.color(.7, .7, .7));
    const textFg = ColorPaint(Color.color(.2, .2, .2));

    var cellHeight = 16;

    const portArrow = Polygon {
	points: [-3.5, -4.5, -3.5, 4.5, 3.5, 0];
	fillPaint: ColorPaint(Color.WHITE);
    };

    public var event is Member;

    var rootView = bind if (event == null) then null else ObjectExpressionView {
	canvas: this;
	height: 100; width: 200;
	event: bind event;
    };

    var cx is Number;
    var cy is Number;

    override var internalContent = Holder { 
	scissorBounds: bind Bounds.boundsFromRect(width, height);
	content:
	Group {
	    content:
	    [Rectangle {
		id: "canvas.bg"
		debug: true;
		width: bind width;
		height: bind height;
		fillPaint: bind ColorPaint(Color.color(.9, .9, .9));
		override function onMouseDrag from (e is MouseEvent) to ()
		{
		    const d = (e.picked.dragPoint1-e.picked.dragPoint0);
		    println("drag={e.drag}, sceneDrag={e.sceneDrag}");
		    cx += d.x;
		    cy += d.y;
		} 	
	    },
	    Group 
            { 
		transform: bind translate(cx, cy);
		content: bind [rootView, views]; 
	    }]
        };
    };

    const printlnFun = Function {
	fun: getFunction("f3.lang.Builtins", "println", ["Object"]);
    }

    var views is Node[] = FunctionView {
	pos: new Point3(100, 0, 0);
	canvas: this;
	fun: printlnFun;
    };


    function pickOutput from (e is MouseEvent, t is F3Type) to ExpressionView 
    {
	for (p in e.scene.underMouse) {
	    const n = p.node;
	    if (n is ResultView) {
		const rv = n as ResultView;
		if (rv.result.getType().isAssignableFrom(t)) {
		    return rv;
		}
	    }
	}
	null;
    }

    function pickInput 
	from (e is MouseEvent, 
	      t is F3Type) 
	to ExpressionView 
    {
	for (p in e.scene.underMouse) {
	    const n = p.node;
	    if (n is ParameterView) {
		const pv = n as ParameterView;
		if (t.isAssignableFrom(pv.parameter.getType())) {
		    return pv;
		}
	    }
	}
	null;
    }

    function genSrc from (e is Expression) to String 
    {
	// Observable of a -> function from a to b; // map 
	// Observable of a -> read var member // map 
	// Observable of a -> Observer of a; // subscribe
	// Observable of a -> Observer of a; // subscribe
	// Observable of a -> write var member; // subscribe
	// function from a to b -> function from b to c; // compose
	/*
	if (e is Function) {
	    const f = e as Function;
	    var isMap = f.inputs.size() == 1 and f.inputs[0].observable is ObservableExpression;
	    if (isMap) {
		"(foreach (i in {genSrc(f.inputs[0].observable)}) \{ {f.fun.name}(i) \})"; 
	    } else {
		var src = "{genSrc(f.inputs[0].observable)}.{f.fun.name}(";
		var sep = "";
		for (p in f.inputs[1..]) {
		    src = src.concat(genSrc(p.observable));
		    src = src.concat(sep);
		    sep = ",";
		}
		src = src.concat(")");
	    }
	} else if (e is ObservableExpression) {
	    const o = e as ObservableExpression;
	    for (x in o.observers) {
	    }
	}
	*/
	"";
    }

    /*
    function genReflect from (e is Expression) to function from (function from F3Value to F3Value) to F3Value;
    {
	// Observable of a -> function from a to b; // map 
	// Observable of a -> read var member // map 
	// Observable of a -> Observer of a; // subscribe
	// Observable of a -> Observer of a; // subscribe
	// Observable of a -> write var member; // subscribe
	// function from a to b -> function from b to c; // compose
	if (e is Function) {
	    const f = e as Function;
	    var isMap = f.inputs.size() == 1 and f.inputs[0].observable is ObservableExpression;
	    if (isMap) {
		const mapFun = getFunction(f.inputs[0].observable.getType(), "map");
		const k0 = genReflect(f.inputs[0].observable);
		function from (k is function from F3Value to F3Value) to F3Value 
		{
		    k0(function from (target is F3Value) to F3Value {
			    const obj = target as F3ObjectValue;
			    k1(function from (arg is F3Value) to F3Value {
				    k(fun.asFunction(obj).invoke())
				});
			});
		}
	    } else {
		const k0 = genReflect(f.inputs[0].observable);
		const k1 = genReflect(f.inputs[1].observable);
		function from (k is function from F3Value to F3Value) to F3Value 
		{
		    k0(function from (target is F3Value) to F3Value {
			    const obj = target as F3ObjectValue;
			    k1(function from (arg is F3Value) to F3Value {
				    k(fun.asFunction(obj).invoke())
				});
			});
		}
	    }
	} else if (e is ObservableExpression) {
	    const o = e as ObservableExpression;
	    for (x in o.observers) {
	    }
	}
    }
    */

}




 
