package expr.prog;
import f3.lang.Ref;
import f3.lang.ObservableRef;
import expr.*;
import f3.media.scene.*;
import f3.util.*;
import f3.util.Observer.*;
import f3.util.Observable.*;
import Expression.Canvas;
import Expression.ExpressionView;
import Expression.LinkedView;
import Expression.LinkView;
import Expression.Member;
import Expression.MemberExpression;
import Expression.ExprScene;
import Expression.ExprNode;
import Expression.GetVarView;
import expr.Context;
import expr.Context.*;
import expr.EventLayer;

public var evaluator is org.f3.tools.script.ScriptShell;

public function resetEvaluator to () {
    const loader = java.lang.Thread.currentThread().getContextClassLoader();
    evaluator = new org.f3.tools.script.ScriptShell(loader);
}

class Value {
    public var value is Object;
}

public class EvalContext {
    public var eventContext is Context.MemberContext;
    public var varContext is Context.ClosureVarContext;
    public var interactive is function from () to Boolean;
    public const targetNode is Object;
    public function getParentContext to EvalContext {
        var c is Context = if (varContext <> null) varContext else eventContext;
        c = c.parent;
        while (c <> null and not (c is ProgramContext)) { c = c.parent }
        const c1 = c as ProgramContext;
        //println("get parent context: {eventContext.member} / {varContext.variableName} => {c}, {c1.program}, {c1.program.evalContext}");
        return c1.program.evalContext;
    }
    public var debugger is ObservableDebugger = DebuggerEngine {
        override public function step of a from (location is Object, x is a, k is Observer of a) to ()
        {
            if (interactive()) {
                k.onNext(x);
            }
        }
    }
    public var instanceSpace is Group;
    public var targetTimeline is Timeline;
    public function lookupVar from (name is String) to Object {
        getVarRef(name);
    }
    public var lookupSpatial is function from String to Node;
    public var lookupTemporal is function from String to TimeNode;

    const varRefSubject = Subject of ((String, ObservableRef of Object)) {}

    public function observeVars to Observable of ((String, ObservableRef of Object)) {
        varRefSubject;
    }

    public function getVarRef from (name is String) to Ref of ?
    {
        var ref is Ref of ? = varMap.get(name);
        if (ref == null) {
            ref = getParentContext().getVarRef(name);
        }
        if (ref == null) {
            println("error: variable not found: {name}");
        }
        return ref;
    }

    function createVars from (prog is Program, target is Object) to ()
    {
        //println("CREATING VARS in {prog.event} => {prog.varSources}");
        for (ent in prog.varSources.entrySet() where not ent.getKey().isShortcut) {
            const v = ent.getKey();
            const t = v.varType.t;
            const vp = ent.getValue();
            var source = vp.sourceCode;
            var ref is ObservableRef of Object;
            if (not ent.getKey().isSubject) {
                const vo = Value {};
                const f = evaluator.compileAndRun(source) as function from (Object, Ref of Object, function from String to Object, function from String to Node, function from String to TimeNode) to ();
                ref = &vo.value;
                f(target, ref, lookupVar, lookupSpatial, lookupTemporal);

            } else {
                const value = evaluator.compileAndRun(source) as Subject of Object;
                ref = value.toRef();
            }
            println("created variable {v.variableName} = {source} => {ref}");
            java.lang.Thread.currentThread().dumpStack();
            registerVar(v.variableName, ref);
            for (g in prog.observers) {
                const v0 = g.evalContext.eventContext.parent as Context.ClosureVarContext;
                if (v0 == v) {
                    const f1 = evaluator.compileAndRun(g.getSourceCode()) 
                        as function from (ObservableDebugger, Object, 
                                          function from String to Object, function from String to Node, function from String to TimeNode, function from (Object) to ()) to (Observable of ?)[];
                    const obs1 = f1(debugger, targetNode, lookupVarDebug, lookupSpatialDebug, lookupTemporalDebug, function from (x is Object) to () {
                        });
                    if (varSubscriberMap.containsKey(v0)) {
                        const oldSubs = varSubscriberMap.get(v0);
                        for (x in oldSubs) x.dispose();
                    }
                    const subs1 = foreach (ob1 in obs1) subscribe(ob1);
                    varSubscriberMap.put(v0, subs1);
                }
            }
        }
    }

    var varSubscriberMap = new java.util.HashMap of (Context.ClosureVarContext, Disposable[]);

    public function registerVar of a from (name is String, value is ObservableRef of a) to ()
    {
        varMap.put(name, value);
        varRefSubject.onNext((name, value as ObservableRef of Object));
    }

    function undefineVar from (v is Context.ClosureVarContext) to ()
    {
        varMap.remove(v.variableName);
        varSubscriberMap.remove(v);
    }

    const varMap is java.util.Map of (String, ObservableRef of ?) = new java.util.HashMap of (String, ObservableRef of ?);

    function lookupVarDebug from (name is String) to Object {
        const r = lookupVar(name);
        return r;
    }

    function lookupSpatialDebug from (name is String) to Node {
        const r = lookupSpatial(name);
        println("lookup spatial {name} => {r}");
        return r;
    }

    function lookupTemporalDebug from (name is String) to TimeNode {
        const r = lookupTemporal(name);
        println("lookup temporal {name} => {r}");
        return r;
    }
    

    public function evaluate from (prog is Program) to ()
    {
        evaluate(prog, prog.debugger)
    }

    public function evaluate from (prog is Program, externalDebugger is ObservableDebugger) to ()
    {
        if (varContext <> null or prog.sourceCode == "") {
            unsubscribe();
            return;
        }
        const debugger = if externalDebugger <> null then externalDebugger else this.debugger;
        try {
            const f = evaluator.compileAndRun(prog.getSourceCode()) 
                as function from (ObservableDebugger, Object, 
                                  function from String to Object, function from String to Node, function from String to TimeNode, function from (Object) to ()) to (Observable of ?)[];
            unsubscribe();
            println("evaluating with debugger: {debugger}");
            const obs = f(debugger, targetNode, lookupVarDebug, lookupSpatialDebug, lookupTemporalDebug, function from (x is Object) to () {
                    createVars(prog, x);
                });
            for (o in obs) {
                subscribe(o, prog);
            }
        } catch (e is java.lang.Throwable) {
            e.printStackTrace();
        }
    }

    public function unsubscribe to () 
    {
	for (x in subs) x.dispose();
        subs = [];
    }

    var subs is Disposable[];

    public function subscribe of a from (obsvb is Observable of a) to Disposable
    {
        obsvb.subscribe(DefaultObserver of a {
                override function onNext from (x is a) to () {
                    println("var change...");
                }
            });
    }

    public function subscribe of a from (obsvb is Observable of a, prog is Program) to ()
    {
	println("SUBSCRIBE {targetNode} {obsvb}");
        var count = 0;
        const rs = foreach (x in eventContext.content) {
            if (x is Context.ResourceNodeContext) {
                (x as Context.ResourceNodeContext).resource;
            } else null;
        }
        insert obsvb.subscribe(DefaultObserver of a {
                override function onNext from (x is a) to ()
                {
                    if (interactive()) {
                        for (r in rs) {
                            var n = r.instance(r.id, lookupVar, lookupSpatial, lookupTemporal);
                            println("INSERTING {n} into {instanceSpace} at {targetTimeline.playhead}");
                            insert EventLayer.EventNode {
                                timestamp: targetTimeline.playhead;
                                event: n;
                            } into instanceSpace.content;
                        }
                        count++;
                    }
                }
            }) into subs;
    }
}

class ProgramLocation {
    public const sourceLocation is String;
    public const program is Program;
}

class ProgramDebugger is DebuggerEngine {

    const program is Program;

    override public function step of a from (location is Object, x is a, k is Observer of a) to ()
    {
        const progLoc = location as ProgramLocation;
        println("stepping program { program.event} {progLoc.sourceLocation} {x} canvas={program.canvas}");
        if (program.canvas <> null) {
            program.canvas.debuggerEngine.step(progLoc.sourceLocation, x, k);
        } else {
            k.onNext(x)
        }
    }

    override public function debug of a from (xs is Observable of a, id is Object) to Observable of a
    {
        println("compiling program: {program.event} {xs} {id}");
        super.debug(xs, ProgramLocation { sourceLocation: id.toString(), program: program});
    }
}

public class Program {

    public var event is Member;
    public var canvas is Canvas;
    public var code is ExprScene;
    public var sourceCode is String;
    public var targetPath is String;

    public var parent is Program on replace {
        println("defining parent of {this} { event }, {sourceCode}");
        java.lang.Thread.currentThread().dumpStack();
    }


    public const debugger is ProgramDebugger = ProgramDebugger {
        program: this;
    }

    public const evalContext is EvalContext;

    public const varSources = new java.util.HashMap of (Context.ClosureVarContext, Program);

    const observers is java.util.Set of Program = new java.util.HashSet of Program();

    public function addObserver from (p is Program) to () 
    {
        parent.observers.add(p);
    }

    public function removeObserver from (p is Program) to () 
    {
        parent.observers.remove(p);
    }

    public function undefineVar from (v is Context.ClosureVarContext) to ()
    {
        varSources.remove(v);
        evalContext.undefineVar(v);
    }

    public function defineVar from (v is Context.ClosureVarContext, p is Program) to ()
    {
        println("defining var {v.variableName} in {event} with p={p.event}, {p.sourceCode}");
        java.lang.Thread.currentThread().dumpStack();
        varSources.put(v, p);
    }

    public function defineVar from (v is Context.ClosureVarContext, source is String) to ()
    {
        sourceCode = source;
        println("defining var {v.variableName} in {event} source={source} evalContext.event={evalContext.eventContext}, {evalContext.varContext} parent={parent}, parent.event={parent.event}");
        parent.defineVar(v, this);
    }

    public function evaluate to () 
    {
        evalContext.evaluate(this, canvas.debuggerEngine)
    }

    public function evaluate from (sourceTemplate is String) to () 
    {
        this.sourceCode = sourceTemplate;
        evaluate();
    }

    function getSourceCode to String 
    {
        var varSource is String = "";
        for (ent in varSources.entrySet() where ent.getKey().isShortcut) {
            const v = ent.getValue();
            varSource = "{varSource}{v.sourceCode}";
        }
        const result = sourceCode.replace("%VARS%", varSource);
        println("SOURCE => {result}");
        return result;
    }

    public function reset to ()
    {
        evalContext.unsubscribe();
    }

    public function deserialize to () 
    {
        canvas.deserializationMap.clear();
        for (v in code.views) {
            const view = v.createView(canvas);
            println("deserialized {v} into {view}");
        }
        canvas.installLinks();
    }
}